Emitting fn: drnd
drnd
CompoundStmt 0x55b45323c028
`-ReturnStmt 0x55b45323bfe8
  `-ParenExpr 0x55b45323bfc8 'float'
    `-BinaryOperator 0x55b45323bfa8 'float' '/'
      |-CStyleCastExpr 0x55b45323bf20 'float' <IntegralToFloating>
      | `-CallExpr 0x55b45323bee8 'int'
      |   `-ImplicitCastExpr 0x55b45323bed0 'int (*)(void)' <FunctionToPointerDecay>
      |     `-DeclRefExpr 0x55b45323beb0 'int (void)' Function 0x55b4530a20c0 'rand' 'int (void)'
      `-CStyleCastExpr 0x55b45323bf80 'float' <IntegralToFloating>
        `-IntegerLiteral 0x55b45323bf48 'int' 2147483647
Emitting fn: dpn1
dpn1
CompoundStmt 0x55b453256868
`-ReturnStmt 0x55b453256828
  `-ImplicitCastExpr 0x55b453256810 'float' <FloatingCast>
    `-ParenExpr 0x55b4532567f0 'double'
      `-BinaryOperator 0x55b4532567d0 'double' '-'
        |-ParenExpr 0x55b453256790 'double'
        | `-BinaryOperator 0x55b45323c1c8 'double' '*'
        |   |-ImplicitCastExpr 0x55b45323c1b0 'double' <FloatingCast>
        |   | `-CallExpr 0x55b45323c170 'float'
        |   |   `-ImplicitCastExpr 0x55b45323c158 'float (*)()' <FunctionToPointerDecay>
        |   |     `-DeclRefExpr 0x55b45323c108 'float ()' Function 0x55b45323be10 'drnd' 'float ()'
        |   `-FloatingLiteral 0x55b45323c190 'double' 2.000000e+00
        `-FloatingLiteral 0x55b4532567b0 'double' 1.000000e+00
Emitting fn: squash
squash
CompoundStmt 0x55b453256ca8
|-DeclStmt 0x55b453256a88
| `-VarDecl 0x55b453256a20  m 'float'
`-ReturnStmt 0x55b453256c68
  `-ImplicitCastExpr 0x55b453256c50 'float' <FloatingCast>
    `-ParenExpr 0x55b453256c30 'double'
      `-BinaryOperator 0x55b453256c10 'double' '/'
        |-FloatingLiteral 0x55b453256aa0 'double' 1.000000e+00
        `-ParenExpr 0x55b453256bf0 'double'
          `-BinaryOperator 0x55b453256bd0 'double' '+'
            |-FloatingLiteral 0x55b453256ac0 'double' 1.000000e+00
            `-CallExpr 0x55b453256b90 'double'
              |-ImplicitCastExpr 0x55b453256b78 'double (*)(double)' <FunctionToPointerDecay>
              | `-DeclRefExpr 0x55b453256ae0 'double (double)' Function 0x55b4530e60f0 'exp' 'double (double)'
              `-ImplicitCastExpr 0x55b453256bb8 'double' <FloatingCast>
                `-UnaryOperator 0x55b453256b38 'float' prefix '-'
                  `-ImplicitCastExpr 0x55b453256b20 'float' <LValueToRValue>
                    `-DeclRefExpr 0x55b453256b00 'float' lvalue ParmVar 0x55b453256898 'x' 'float'
Emitting fn: alloc_1d_dbl
alloc_1d_dbl
CompoundStmt 0x55b453257558
|-DeclStmt 0x55b453256f08
| `-VarDecl 0x55b453256ea0  used new 'float *'
|-BinaryOperator 0x55b453257150 'float *' '='
| |-DeclRefExpr 0x55b453256f20 'float *' lvalue Var 0x55b453256ea0 'new' 'float *'
| `-CStyleCastExpr 0x55b453257128 'float *' <BitCast>
|   `-CallExpr 0x55b4532570d0 'void *'
|     |-ImplicitCastExpr 0x55b4532570b8 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b453256f40 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-ImplicitCastExpr 0x55b4532570f8 'unsigned long' <IntegralCast>
|       `-CStyleCastExpr 0x55b453257060 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55b453257040 'unsigned long'
|           `-BinaryOperator 0x55b453256fe8 'unsigned long' '*'
|             |-ImplicitCastExpr 0x55b453256fd0 'unsigned long' <IntegralCast>
|             | `-ImplicitCastExpr 0x55b453256fb8 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55b453256f60 'int' lvalue ParmVar 0x55b453256d10 'n' 'int'
|             `-UnaryExprOrTypeTraitExpr 0x55b453256f98 'unsigned long' sizeof 'float'
|-IfStmt 0x55b4532574a0
| |-BinaryOperator 0x55b453257240 'int' '=='
| | |-ImplicitCastExpr 0x55b453257210 'float *' <LValueToRValue>
| | | `-DeclRefExpr 0x55b453257170 'float *' lvalue Var 0x55b453256ea0 'new' 'float *'
| | `-ImplicitCastExpr 0x55b453257228 'float *' <BitCast>
| |   `-ParenExpr 0x55b4532571f0 'void *'
| |     `-CStyleCastExpr 0x55b4532571c8 'void *' <NullToPointer>
| |       `-IntegerLiteral 0x55b453257190 'int' 0
| `-CompoundStmt 0x55b453257480
|   |-CallExpr 0x55b453257360 'int'
|   | |-ImplicitCastExpr 0x55b453257348 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b453257260 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x55b4532573a0 'const char *' <NoOp>
|   |   `-ImplicitCastExpr 0x55b453257388 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x55b4532572b8 'char[49]' lvalue "ALLOC_1D_DBL: Couldn't allocate array of floats\n"
|   `-ReturnStmt 0x55b453257470
|     `-ImplicitCastExpr 0x55b453257458 'float *' <NullToPointer>
|       `-ParenExpr 0x55b453257438 'void *'
|         `-ParenExpr 0x55b453257418 'void *'
|           `-CStyleCastExpr 0x55b4532573f0 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55b4532573b8 'int' 0
`-ReturnStmt 0x55b453257518
  `-ImplicitCastExpr 0x55b453257500 'float *' <LValueToRValue>
    `-ParenExpr 0x55b4532574e0 'float *' lvalue
      `-DeclRefExpr 0x55b4532574c0 'float *' lvalue Var 0x55b453256ea0 'new' 'float *'
Emitting fn: alloc_2d_dbl
alloc_2d_dbl
CompoundStmt 0x55b4532581f8
|-DeclStmt 0x55b453257868
| `-VarDecl 0x55b453257800  used i 'int'
|-DeclStmt 0x55b453257908
| `-VarDecl 0x55b4532578a0  used new 'float **'
|-BinaryOperator 0x55b453257b28 'float **' '='
| |-DeclRefExpr 0x55b453257920 'float **' lvalue Var 0x55b4532578a0 'new' 'float **'
| `-CStyleCastExpr 0x55b453257b00 'float **' <BitCast>
|   `-CallExpr 0x55b453257aa0 'void *'
|     |-ImplicitCastExpr 0x55b453257a88 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b453257940 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-ImplicitCastExpr 0x55b453257ac8 'unsigned long' <IntegralCast>
|       `-CStyleCastExpr 0x55b453257a60 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55b453257a40 'unsigned long'
|           `-BinaryOperator 0x55b4532579e8 'unsigned long' '*'
|             |-ImplicitCastExpr 0x55b4532579d0 'unsigned long' <IntegralCast>
|             | `-ImplicitCastExpr 0x55b4532579b8 'int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55b453257960 'int' lvalue ParmVar 0x55b4532575d0 'm' 'int'
|             `-UnaryExprOrTypeTraitExpr 0x55b453257998 'unsigned long' sizeof 'float *'
|-IfStmt 0x55b453257e58
| |-BinaryOperator 0x55b453257c18 'int' '=='
| | |-ImplicitCastExpr 0x55b453257be8 'float **' <LValueToRValue>
| | | `-DeclRefExpr 0x55b453257b48 'float **' lvalue Var 0x55b4532578a0 'new' 'float **'
| | `-ImplicitCastExpr 0x55b453257c00 'float **' <BitCast>
| |   `-ParenExpr 0x55b453257bc8 'void *'
| |     `-CStyleCastExpr 0x55b453257ba0 'void *' <NullToPointer>
| |       `-IntegerLiteral 0x55b453257b68 'int' 0
| `-CompoundStmt 0x55b453257e38
|   |-CallExpr 0x55b453257d18 'int'
|   | |-ImplicitCastExpr 0x55b453257d00 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b453257c38 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x55b453257d58 'const char *' <NoOp>
|   |   `-ImplicitCastExpr 0x55b453257d40 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x55b453257c98 'char[51]' lvalue "ALLOC_2D_DBL: Couldn't allocate array of dbl ptrs\n"
|   `-ReturnStmt 0x55b453257e28
|     `-ImplicitCastExpr 0x55b453257e10 'float **' <NullToPointer>
|       `-ParenExpr 0x55b453257df0 'void *'
|         `-ParenExpr 0x55b453257dd0 'void *'
|           `-CStyleCastExpr 0x55b453257da8 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55b453257d70 'int' 0
|-ForStmt 0x55b453258158
| |-BinaryOperator 0x55b453257eb8 'int' '='
| | |-DeclRefExpr 0x55b453257e78 'int' lvalue Var 0x55b453257800 'i' 'int'
| | `-IntegerLiteral 0x55b453257e98 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b453257f48 'int' '<'
| | |-ImplicitCastExpr 0x55b453257f18 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b453257ed8 'int' lvalue Var 0x55b453257800 'i' 'int'
| | `-ImplicitCastExpr 0x55b453257f30 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b453257ef8 'int' lvalue ParmVar 0x55b4532575d0 'm' 'int'
| |-UnaryOperator 0x55b453257f88 'int' postfix '++'
| | `-DeclRefExpr 0x55b453257f68 'int' lvalue Var 0x55b453257800 'i' 'int'
| `-CompoundStmt 0x55b453258140
|   `-BinaryOperator 0x55b453258120 'float *' '='
|     |-ArraySubscriptExpr 0x55b453258010 'float *' lvalue
|     | |-ImplicitCastExpr 0x55b453257fe0 'float **' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b453257fa0 'float **' lvalue Var 0x55b4532578a0 'new' 'float **'
|     | `-ImplicitCastExpr 0x55b453257ff8 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b453257fc0 'int' lvalue Var 0x55b453257800 'i' 'int'
|     `-CallExpr 0x55b4532580e0 'float *'
|       |-ImplicitCastExpr 0x55b4532580c8 'float *(*)()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55b453258058 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|       `-ImplicitCastExpr 0x55b453258108 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55b453258078 'int' lvalue ParmVar 0x55b453257650 'n' 'int'
`-ReturnStmt 0x55b4532581e8
  `-ImplicitCastExpr 0x55b4532581d0 'float **' <LValueToRValue>
    `-ParenExpr 0x55b4532581b0 'float **' lvalue
      `-DeclRefExpr 0x55b453258190 'float **' lvalue Var 0x55b4532578a0 'new' 'float **'
backprop.c:93:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
bpnn_randomize_weights(w, m, n)
^
backprop.c:101:31: warning: implicit conversion from 'int' to 'float' changes value from 2147483647 to 2147483648 [-Wimplicit-const-int-float-conversion]
     w[i][j] = (float) rand()/RAND_MAX;
                             ~^~~~~~~~
/usr/include/stdlib.h:86:18: note: expanded from macro 'RAND_MAX'
#define RAND_MAX        2147483647
                        ^~~~~~~~~~
backprop.c:105:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
Emitting fn: bpnn_randomize_weights
bpnn_randomize_weights
CompoundStmt 0x55b45329f070
|-DeclStmt 0x55b453258670
| |-VarDecl 0x55b453258570  used i 'int'
| `-VarDecl 0x55b4532585f0  used j 'int'
`-ForStmt 0x55b45329f038
  |-BinaryOperator 0x55b4532586c8 'int' '='
  | |-DeclRefExpr 0x55b453258688 'int' lvalue Var 0x55b453258570 'i' 'int'
  | `-IntegerLiteral 0x55b4532586a8 'int' 0
  |-<<<NULL>>>
  |-BinaryOperator 0x55b453258758 'int' '<='
  | |-ImplicitCastExpr 0x55b453258728 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x55b4532586e8 'int' lvalue Var 0x55b453258570 'i' 'int'
  | `-ImplicitCastExpr 0x55b453258740 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x55b453258708 'int' lvalue ParmVar 0x55b453258338 'm' 'int'
  |-UnaryOperator 0x55b45329ec80 'int' postfix '++'
  | `-DeclRefExpr 0x55b45329ec60 'int' lvalue Var 0x55b453258570 'i' 'int'
  `-CompoundStmt 0x55b45329f020
    `-ForStmt 0x55b45329efe8
      |-BinaryOperator 0x55b45329ecd8 'int' '='
      | |-DeclRefExpr 0x55b45329ec98 'int' lvalue Var 0x55b4532585f0 'j' 'int'
      | `-IntegerLiteral 0x55b45329ecb8 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x55b45329ed68 'int' '<='
      | |-ImplicitCastExpr 0x55b45329ed38 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x55b45329ecf8 'int' lvalue Var 0x55b4532585f0 'j' 'int'
      | `-ImplicitCastExpr 0x55b45329ed50 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x55b45329ed18 'int' lvalue ParmVar 0x55b4532583b8 'n' 'int'
      |-UnaryOperator 0x55b45329eda8 'int' postfix '++'
      | `-DeclRefExpr 0x55b45329ed88 'int' lvalue Var 0x55b4532585f0 'j' 'int'
      `-CompoundStmt 0x55b45329efd0
        `-BinaryOperator 0x55b45329efb0 'float' '='
          |-ArraySubscriptExpr 0x55b45329eea0 'float' lvalue
          | |-ImplicitCastExpr 0x55b45329ee70 'float *' <LValueToRValue>
          | | `-ArraySubscriptExpr 0x55b45329ee30 'float *' lvalue
          | |   |-ImplicitCastExpr 0x55b45329ee00 'float **' <LValueToRValue>
          | |   | `-DeclRefExpr 0x55b45329edc0 'float **' lvalue ParmVar 0x55b4532582b8 'w' 'float **'
          | |   `-ImplicitCastExpr 0x55b45329ee18 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x55b45329ede0 'int' lvalue Var 0x55b453258570 'i' 'int'
          | `-ImplicitCastExpr 0x55b45329ee88 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x55b45329ee50 'int' lvalue Var 0x55b4532585f0 'j' 'int'
          `-BinaryOperator 0x55b45329ef90 'float' '/'
            |-CStyleCastExpr 0x55b45329ef30 'float' <IntegralToFloating>
            | `-CallExpr 0x55b45329eef8 'int'
            |   `-ImplicitCastExpr 0x55b45329eee0 'int (*)(void)' <FunctionToPointerDecay>
            |     `-DeclRefExpr 0x55b45329eec0 'int (void)' Function 0x55b4530a20c0 'rand' 'int (void)'
            `-ImplicitCastExpr 0x55b45329ef78 'float' <IntegralToFloating>
              `-IntegerLiteral 0x55b45329ef58 'int' 2147483647
backprop.c:107:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
bpnn_randomize_row(w, m)
^
backprop.c:116:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
Emitting fn: bpnn_randomize_row
bpnn_randomize_row
CompoundStmt 0x55b45329f998
|-DeclStmt 0x55b45329f720
| `-VarDecl 0x55b45329f6b8  used i 'int'
`-ForStmt 0x55b45329f960
  |-BinaryOperator 0x55b45329f778 'int' '='
  | |-DeclRefExpr 0x55b45329f738 'int' lvalue Var 0x55b45329f6b8 'i' 'int'
  | `-IntegerLiteral 0x55b45329f758 'int' 0
  |-<<<NULL>>>
  |-BinaryOperator 0x55b45329f808 'int' '<='
  | |-ImplicitCastExpr 0x55b45329f7d8 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x55b45329f798 'int' lvalue Var 0x55b45329f6b8 'i' 'int'
  | `-ImplicitCastExpr 0x55b45329f7f0 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x55b45329f7b8 'int' lvalue ParmVar 0x55b45329f510 'm' 'int'
  |-UnaryOperator 0x55b45329f848 'int' postfix '++'
  | `-DeclRefExpr 0x55b45329f828 'int' lvalue Var 0x55b45329f6b8 'i' 'int'
  `-CompoundStmt 0x55b45329f948
    `-BinaryOperator 0x55b45329f928 'float' '='
      |-ArraySubscriptExpr 0x55b45329f8d0 'float' lvalue
      | |-ImplicitCastExpr 0x55b45329f8a0 'float *' <LValueToRValue>
      | | `-DeclRefExpr 0x55b45329f860 'float *' lvalue ParmVar 0x55b45329f490 'w' 'float *'
      | `-ImplicitCastExpr 0x55b45329f8b8 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x55b45329f880 'int' lvalue Var 0x55b45329f6b8 'i' 'int'
      `-ImplicitCastExpr 0x55b45329f910 'float' <FloatingCast>
        `-FloatingLiteral 0x55b45329f8f0 'double' 1.000000e-01
backprop.c:119:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
bpnn_zero_weights(w, m, n)
^
backprop.c:130:1: warning: non-void function does not return a value [-Wreturn-type]
}
^
Emitting fn: bpnn_zero_weights
bpnn_zero_weights
CompoundStmt 0x55b4532a01b0
|-DeclStmt 0x55b45329fd50
| |-VarDecl 0x55b45329fc50  used i 'int'
| `-VarDecl 0x55b45329fcd0  used j 'int'
`-ForStmt 0x55b4532a0178
  |-BinaryOperator 0x55b45329fda8 'int' '='
  | |-DeclRefExpr 0x55b45329fd68 'int' lvalue Var 0x55b45329fc50 'i' 'int'
  | `-IntegerLiteral 0x55b45329fd88 'int' 0
  |-<<<NULL>>>
  |-BinaryOperator 0x55b45329fe38 'int' '<='
  | |-ImplicitCastExpr 0x55b45329fe08 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x55b45329fdc8 'int' lvalue Var 0x55b45329fc50 'i' 'int'
  | `-ImplicitCastExpr 0x55b45329fe20 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x55b45329fde8 'int' lvalue ParmVar 0x55b45329fa58 'm' 'int'
  |-UnaryOperator 0x55b45329fe78 'int' postfix '++'
  | `-DeclRefExpr 0x55b45329fe58 'int' lvalue Var 0x55b45329fc50 'i' 'int'
  `-CompoundStmt 0x55b4532a0160
    `-ForStmt 0x55b4532a0128
      |-BinaryOperator 0x55b45329fed0 'int' '='
      | |-DeclRefExpr 0x55b45329fe90 'int' lvalue Var 0x55b45329fcd0 'j' 'int'
      | `-IntegerLiteral 0x55b45329feb0 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x55b45329ff60 'int' '<='
      | |-ImplicitCastExpr 0x55b45329ff30 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x55b45329fef0 'int' lvalue Var 0x55b45329fcd0 'j' 'int'
      | `-ImplicitCastExpr 0x55b45329ff48 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x55b45329ff10 'int' lvalue ParmVar 0x55b45329fad8 'n' 'int'
      |-UnaryOperator 0x55b45329ffa0 'int' postfix '++'
      | `-DeclRefExpr 0x55b45329ff80 'int' lvalue Var 0x55b45329fcd0 'j' 'int'
      `-CompoundStmt 0x55b4532a0110
        `-BinaryOperator 0x55b4532a00f0 'float' '='
          |-ArraySubscriptExpr 0x55b4532a0098 'float' lvalue
          | |-ImplicitCastExpr 0x55b4532a0068 'float *' <LValueToRValue>
          | | `-ArraySubscriptExpr 0x55b4532a0028 'float *' lvalue
          | |   |-ImplicitCastExpr 0x55b45329fff8 'float **' <LValueToRValue>
          | |   | `-DeclRefExpr 0x55b45329ffb8 'float **' lvalue ParmVar 0x55b45329f9d8 'w' 'float **'
          | |   `-ImplicitCastExpr 0x55b4532a0010 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x55b45329ffd8 'int' lvalue Var 0x55b45329fc50 'i' 'int'
          | `-ImplicitCastExpr 0x55b4532a0080 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x55b4532a0048 'int' lvalue Var 0x55b45329fcd0 'j' 'int'
          `-ImplicitCastExpr 0x55b4532a00d8 'float' <FloatingCast>
            `-FloatingLiteral 0x55b4532a00b8 'double' 0.000000e+00
Emitting fn: bpnn_initialize
bpnn_initialize
CompoundStmt 0x55b4532a0588
|-CallExpr 0x55b4532a0438 'int'
| |-ImplicitCastExpr 0x55b4532a0420 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532a0350 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| |-ImplicitCastExpr 0x55b4532a0480 'const char *' <NoOp>
| | `-ImplicitCastExpr 0x55b4532a0468 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x55b4532a03a8 'char[34]' lvalue "Random number generator seed: %d\n"
| `-ImplicitCastExpr 0x55b4532a0498 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532a03e8 'int' lvalue ParmVar 0x55b4532a0218 'seed' 'int'
`-CallExpr 0x55b4532a0530 'void'
  |-ImplicitCastExpr 0x55b4532a0518 'void (*)(unsigned int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55b4532a04b0 'void (unsigned int)' Function 0x55b4530a2260 'srand' 'void (unsigned int)'
  `-ImplicitCastExpr 0x55b4532a0570 'unsigned int' <IntegralCast>
    `-ImplicitCastExpr 0x55b4532a0558 'int' <LValueToRValue>
      `-DeclRefExpr 0x55b4532a04d0 'int' lvalue ParmVar 0x55b4532a0218 'seed' 'int'
Emitting fn: bpnn_internal_create
bpnn_internal_create
CompoundStmt 0x55b4532b9798
|-DeclStmt 0x55b4532a0918
| `-VarDecl 0x55b4532a08b0  used newnet 'BPNN *'
|-BinaryOperator 0x55b4532a0a18 'BPNN *' '='
| |-DeclRefExpr 0x55b4532a0930 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CStyleCastExpr 0x55b4532a09f0 'BPNN *' <BitCast>
|   `-CallExpr 0x55b4532a09b8 'void *'
|     |-ImplicitCastExpr 0x55b4532a09a0 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b4532a0950 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-UnaryExprOrTypeTraitExpr 0x55b4532a0980 'unsigned long' sizeof 'BPNN':'BPNN'
|-IfStmt 0x55b4532b84b8
| |-BinaryOperator 0x55b4532a0b08 'int' '=='
| | |-ImplicitCastExpr 0x55b4532a0ad8 'BPNN *' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532a0a38 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| | `-ImplicitCastExpr 0x55b4532a0af0 'BPNN *' <BitCast>
| |   `-ParenExpr 0x55b4532a0ab8 'void *'
| |     `-CStyleCastExpr 0x55b4532a0a90 'void *' <NullToPointer>
| |       `-IntegerLiteral 0x55b4532a0a58 'int' 0
| `-CompoundStmt 0x55b4532b8498
|   |-CallExpr 0x55b4532a0c00 'int'
|   | |-ImplicitCastExpr 0x55b4532a0be8 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b4532a0b28 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x55b4532a0c40 'const char *' <NoOp>
|   |   `-ImplicitCastExpr 0x55b4532a0c28 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x55b4532a0b88 'char[47]' lvalue "BPNN_CREATE: Couldn't allocate neural network\n"
|   `-ReturnStmt 0x55b4532b8488
|     `-ImplicitCastExpr 0x55b4532b8470 'BPNN *' <NullToPointer>
|       `-ParenExpr 0x55b4532b8450 'void *'
|         `-ParenExpr 0x55b4532b8430 'void *'
|           `-CStyleCastExpr 0x55b4532b8408 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55b4532b83d0 'int' 0
|-BinaryOperator 0x55b4532b8578 'int' '='
| |-MemberExpr 0x55b4532b8510 'int' lvalue ->input_n 0x55b45316fa58
| | `-ImplicitCastExpr 0x55b4532b84f8 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b84d8 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-ImplicitCastExpr 0x55b4532b8560 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532b8540 'int' lvalue ParmVar 0x55b4532a05c0 'n_in' 'int'
|-BinaryOperator 0x55b4532b8638 'int' '='
| |-MemberExpr 0x55b4532b85d0 'int' lvalue ->hidden_n 0x55b45316fac0
| | `-ImplicitCastExpr 0x55b4532b85b8 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8598 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-ImplicitCastExpr 0x55b4532b8620 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532b8600 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|-BinaryOperator 0x55b4532b86f8 'int' '='
| |-MemberExpr 0x55b4532b8690 'int' lvalue ->output_n 0x55b45316fb28
| | `-ImplicitCastExpr 0x55b4532b8678 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8658 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-ImplicitCastExpr 0x55b4532b86e0 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532b86c0 'int' lvalue ParmVar 0x55b4532a06c0 'n_out' 'int'
|-BinaryOperator 0x55b4532b8858 'float *' '='
| |-MemberExpr 0x55b4532b8750 'float *' lvalue ->input_units 0x55b45316fbc0
| | `-ImplicitCastExpr 0x55b4532b8738 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8718 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b8830 'float *'
|   |-ImplicitCastExpr 0x55b4532b8818 'float *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b8780 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|   `-BinaryOperator 0x55b4532b87f8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b87e0 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b87a0 'int' lvalue ParmVar 0x55b4532a05c0 'n_in' 'int'
|     `-IntegerLiteral 0x55b4532b87c0 'int' 1
|-BinaryOperator 0x55b4532b89b8 'float *' '='
| |-MemberExpr 0x55b4532b88b0 'float *' lvalue ->hidden_units 0x55b45316fc28
| | `-ImplicitCastExpr 0x55b4532b8898 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8878 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b8990 'float *'
|   |-ImplicitCastExpr 0x55b4532b8978 'float *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b88e0 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|   `-BinaryOperator 0x55b4532b8958 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b8940 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b8900 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|     `-IntegerLiteral 0x55b4532b8920 'int' 1
|-BinaryOperator 0x55b4532b8b18 'float *' '='
| |-MemberExpr 0x55b4532b8a10 'float *' lvalue ->output_units 0x55b45316fc90
| | `-ImplicitCastExpr 0x55b4532b89f8 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b89d8 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b8af0 'float *'
|   |-ImplicitCastExpr 0x55b4532b8ad8 'float *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b8a40 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|   `-BinaryOperator 0x55b4532b8ab8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b8aa0 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b8a60 'int' lvalue ParmVar 0x55b4532a06c0 'n_out' 'int'
|     `-IntegerLiteral 0x55b4532b8a80 'int' 1
|-BinaryOperator 0x55b4532b8c78 'float *' '='
| |-MemberExpr 0x55b4532b8b70 'float *' lvalue ->hidden_delta 0x55b45316fcf8
| | `-ImplicitCastExpr 0x55b4532b8b58 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8b38 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b8c50 'float *'
|   |-ImplicitCastExpr 0x55b4532b8c38 'float *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b8ba0 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|   `-BinaryOperator 0x55b4532b8c18 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b8c00 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b8bc0 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|     `-IntegerLiteral 0x55b4532b8be0 'int' 1
|-BinaryOperator 0x55b4532b8dd8 'float *' '='
| |-MemberExpr 0x55b4532b8cd0 'float *' lvalue ->output_delta 0x55b45316fd60
| | `-ImplicitCastExpr 0x55b4532b8cb8 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8c98 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b8db0 'float *'
|   |-ImplicitCastExpr 0x55b4532b8d98 'float *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b8d00 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|   `-BinaryOperator 0x55b4532b8d78 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b8d60 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b8d20 'int' lvalue ParmVar 0x55b4532a06c0 'n_out' 'int'
|     `-IntegerLiteral 0x55b4532b8d40 'int' 1
|-BinaryOperator 0x55b4532b8f38 'float *' '='
| |-MemberExpr 0x55b4532b8e30 'float *' lvalue ->target 0x55b45316fdc8
| | `-ImplicitCastExpr 0x55b4532b8e18 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8df8 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b8f10 'float *'
|   |-ImplicitCastExpr 0x55b4532b8ef8 'float *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b8e60 'float *()' Function 0x55b453256de0 'alloc_1d_dbl' 'float *(int)'
|   `-BinaryOperator 0x55b4532b8ed8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b8ec0 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b8e80 'int' lvalue ParmVar 0x55b4532a06c0 'n_out' 'int'
|     `-IntegerLiteral 0x55b4532b8ea0 'int' 1
|-BinaryOperator 0x55b4532b9170 'float **' '='
| |-MemberExpr 0x55b4532b8f90 'float **' lvalue ->input_weights 0x55b45316fe68
| | `-ImplicitCastExpr 0x55b4532b8f78 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b8f58 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b9140 'float **'
|   |-ImplicitCastExpr 0x55b4532b9128 'float **(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b8fe8 'float **()' Function 0x55b453257738 'alloc_2d_dbl' 'float **(int, int)'
|   |-BinaryOperator 0x55b4532b9060 'int' '+'
|   | |-ImplicitCastExpr 0x55b4532b9048 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b4532b9008 'int' lvalue ParmVar 0x55b4532a05c0 'n_in' 'int'
|   | `-IntegerLiteral 0x55b4532b9028 'int' 1
|   `-BinaryOperator 0x55b4532b90d8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b90c0 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b9080 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|     `-IntegerLiteral 0x55b4532b90a0 'int' 1
|-BinaryOperator 0x55b4532b9350 'float **' '='
| |-MemberExpr 0x55b4532b91c8 'float **' lvalue ->hidden_weights 0x55b45316fed8
| | `-ImplicitCastExpr 0x55b4532b91b0 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b9190 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b9320 'float **'
|   |-ImplicitCastExpr 0x55b4532b9308 'float **(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b91f8 'float **()' Function 0x55b453257738 'alloc_2d_dbl' 'float **(int, int)'
|   |-BinaryOperator 0x55b4532b9270 'int' '+'
|   | |-ImplicitCastExpr 0x55b4532b9258 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b4532b9218 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|   | `-IntegerLiteral 0x55b4532b9238 'int' 1
|   `-BinaryOperator 0x55b4532b92e8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b92d0 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b9290 'int' lvalue ParmVar 0x55b4532a06c0 'n_out' 'int'
|     `-IntegerLiteral 0x55b4532b92b0 'int' 1
|-BinaryOperator 0x55b4532b9530 'float **' '='
| |-MemberExpr 0x55b4532b93a8 'float **' lvalue ->input_prev_weights 0x55b45316ff78
| | `-ImplicitCastExpr 0x55b4532b9390 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b9370 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b9500 'float **'
|   |-ImplicitCastExpr 0x55b4532b94e8 'float **(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b93d8 'float **()' Function 0x55b453257738 'alloc_2d_dbl' 'float **(int, int)'
|   |-BinaryOperator 0x55b4532b9450 'int' '+'
|   | |-ImplicitCastExpr 0x55b4532b9438 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b4532b93f8 'int' lvalue ParmVar 0x55b4532a05c0 'n_in' 'int'
|   | `-IntegerLiteral 0x55b4532b9418 'int' 1
|   `-BinaryOperator 0x55b4532b94c8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b94b0 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b9470 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|     `-IntegerLiteral 0x55b4532b9490 'int' 1
|-BinaryOperator 0x55b4532b9710 'float **' '='
| |-MemberExpr 0x55b4532b9588 'float **' lvalue ->hidden_prev_weights 0x55b45316ffe8
| | `-ImplicitCastExpr 0x55b4532b9570 'BPNN *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532b9550 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532b96e0 'float **'
|   |-ImplicitCastExpr 0x55b4532b96c8 'float **(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532b95b8 'float **()' Function 0x55b453257738 'alloc_2d_dbl' 'float **(int, int)'
|   |-BinaryOperator 0x55b4532b9630 'int' '+'
|   | |-ImplicitCastExpr 0x55b4532b9618 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x55b4532b95d8 'int' lvalue ParmVar 0x55b4532a0640 'n_hidden' 'int'
|   | `-IntegerLiteral 0x55b4532b95f8 'int' 1
|   `-BinaryOperator 0x55b4532b96a8 'int' '+'
|     |-ImplicitCastExpr 0x55b4532b9690 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55b4532b9650 'int' lvalue ParmVar 0x55b4532a06c0 'n_out' 'int'
|     `-IntegerLiteral 0x55b4532b9670 'int' 1
`-ReturnStmt 0x55b4532b9788
  `-ImplicitCastExpr 0x55b4532b9770 'BPNN *' <LValueToRValue>
    `-ParenExpr 0x55b4532b9750 'BPNN *' lvalue
      `-DeclRefExpr 0x55b4532b9730 'BPNN *' lvalue Var 0x55b4532a08b0 'newnet' 'BPNN *'
Emitting fn: bpnn_free
bpnn_free
CompoundStmt 0x55b4532d16c8
|-DeclStmt 0x55b4532b9c90
| |-VarDecl 0x55b4532b9b08  used n1 'int'
| |-VarDecl 0x55b4532b9b88  used n2 'int'
| `-VarDecl 0x55b4532b9c08  used i 'int'
|-BinaryOperator 0x55b4532b9d48 'int' '='
| |-DeclRefExpr 0x55b4532b9ca8 'int' lvalue Var 0x55b4532b9b08 'n1' 'int'
| `-ImplicitCastExpr 0x55b4532b9d30 'int' <LValueToRValue>
|   `-MemberExpr 0x55b4532b9d00 'int' lvalue ->input_n 0x55b45316fa58
|     `-ImplicitCastExpr 0x55b4532b9ce8 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b4532b9cc8 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-BinaryOperator 0x55b4532b9e08 'int' '='
| |-DeclRefExpr 0x55b4532b9d68 'int' lvalue Var 0x55b4532b9b88 'n2' 'int'
| `-ImplicitCastExpr 0x55b4532b9df0 'int' <LValueToRValue>
|   `-MemberExpr 0x55b4532b9dc0 'int' lvalue ->hidden_n 0x55b45316fac0
|     `-ImplicitCastExpr 0x55b4532b9da8 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b4532b9d88 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532b9f50 'void'
| |-ImplicitCastExpr 0x55b4532b9f38 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532b9e28 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532b9f78 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532b9ee0 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532b9ec8 'float *' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532b9e80 'float *' lvalue ->input_units 0x55b45316fbc0
|         `-ImplicitCastExpr 0x55b4532b9e68 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532b9e48 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532ba088 'void'
| |-ImplicitCastExpr 0x55b4532ba070 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532b9f90 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532ba0b0 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532ba048 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532ba030 'float *' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532b9fe8 'float *' lvalue ->hidden_units 0x55b45316fc28
|         `-ImplicitCastExpr 0x55b4532b9fd0 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532b9fb0 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532ba1c0 'void'
| |-ImplicitCastExpr 0x55b4532ba1a8 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532ba0c8 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532ba1e8 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532ba180 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532ba168 'float *' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532ba120 'float *' lvalue ->output_units 0x55b45316fc90
|         `-ImplicitCastExpr 0x55b4532ba108 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532ba0e8 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532ba2f8 'void'
| |-ImplicitCastExpr 0x55b4532ba2e0 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532ba200 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532ba320 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532ba2b8 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532ba2a0 'float *' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532ba258 'float *' lvalue ->hidden_delta 0x55b45316fcf8
|         `-ImplicitCastExpr 0x55b4532ba240 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532ba220 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532d05b0 'void'
| |-ImplicitCastExpr 0x55b4532d0598 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532ba338 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532d05d8 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532d0570 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532d0558 'float *' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532ba390 'float *' lvalue ->output_delta 0x55b45316fd60
|         `-ImplicitCastExpr 0x55b4532ba378 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532ba358 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532d06e8 'void'
| |-ImplicitCastExpr 0x55b4532d06d0 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d05f0 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532d0710 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532d06a8 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532d0690 'float *' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532d0648 'float *' lvalue ->target 0x55b45316fdc8
|         `-ImplicitCastExpr 0x55b4532d0630 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532d0610 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-ForStmt 0x55b4532d0bc0
| |-BinaryOperator 0x55b4532d0768 'int' '='
| | |-DeclRefExpr 0x55b4532d0728 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
| | `-IntegerLiteral 0x55b4532d0748 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b4532d07f8 'int' '<='
| | |-ImplicitCastExpr 0x55b4532d07c8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532d0788 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
| | `-ImplicitCastExpr 0x55b4532d07e0 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532d07a8 'int' lvalue Var 0x55b4532b9b08 'n1' 'int'
| |-UnaryOperator 0x55b4532d0838 'int' postfix '++'
| | `-DeclRefExpr 0x55b4532d0818 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
| `-CompoundStmt 0x55b4532d0ba0
|   |-CallExpr 0x55b4532d09b8 'void'
|   | |-ImplicitCastExpr 0x55b4532d09a0 'void (*)(void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b4532d0850 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
|   | `-ImplicitCastExpr 0x55b4532d09e0 'void *' <BitCast>
|   |   `-CStyleCastExpr 0x55b4532d0978 'char *' <BitCast>
|   |     `-ImplicitCastExpr 0x55b4532d0960 'float *' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x55b4532d0928 'float *' lvalue
|   |         |-ImplicitCastExpr 0x55b4532d08f8 'float **' <LValueToRValue>
|   |         | `-MemberExpr 0x55b4532d08a8 'float **' lvalue ->input_weights 0x55b45316fe68
|   |         |   `-ImplicitCastExpr 0x55b4532d0890 'BPNN *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x55b4532d0870 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|   |         `-ImplicitCastExpr 0x55b4532d0910 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x55b4532d08d8 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
|   `-CallExpr 0x55b4532d0b60 'void'
|     |-ImplicitCastExpr 0x55b4532d0b48 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b4532d09f8 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
|     `-ImplicitCastExpr 0x55b4532d0b88 'void *' <BitCast>
|       `-CStyleCastExpr 0x55b4532d0b20 'char *' <BitCast>
|         `-ImplicitCastExpr 0x55b4532d0b08 'float *' <LValueToRValue> part_of_explicit_cast
|           `-ArraySubscriptExpr 0x55b4532d0ad0 'float *' lvalue
|             |-ImplicitCastExpr 0x55b4532d0aa0 'float **' <LValueToRValue>
|             | `-MemberExpr 0x55b4532d0a50 'float **' lvalue ->input_prev_weights 0x55b45316ff78
|             |   `-ImplicitCastExpr 0x55b4532d0a38 'BPNN *' <LValueToRValue>
|             |     `-DeclRefExpr 0x55b4532d0a18 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|             `-ImplicitCastExpr 0x55b4532d0ab8 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4532d0a80 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
|-CallExpr 0x55b4532d0cf0 'void'
| |-ImplicitCastExpr 0x55b4532d0cd8 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d0bf8 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532d0d18 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532d0cb0 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532d0c98 'float **' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532d0c50 'float **' lvalue ->input_weights 0x55b45316fe68
|         `-ImplicitCastExpr 0x55b4532d0c38 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532d0c18 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532d0e28 'void'
| |-ImplicitCastExpr 0x55b4532d0e10 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d0d30 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532d0e50 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532d0de8 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532d0dd0 'float **' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532d0d88 'float **' lvalue ->input_prev_weights 0x55b45316ff78
|         `-ImplicitCastExpr 0x55b4532d0d70 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532d0d50 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-ForStmt 0x55b4532d1300
| |-BinaryOperator 0x55b4532d0ea8 'int' '='
| | |-DeclRefExpr 0x55b4532d0e68 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
| | `-IntegerLiteral 0x55b4532d0e88 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b4532d0f38 'int' '<='
| | |-ImplicitCastExpr 0x55b4532d0f08 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532d0ec8 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
| | `-ImplicitCastExpr 0x55b4532d0f20 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532d0ee8 'int' lvalue Var 0x55b4532b9b88 'n2' 'int'
| |-UnaryOperator 0x55b4532d0f78 'int' postfix '++'
| | `-DeclRefExpr 0x55b4532d0f58 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
| `-CompoundStmt 0x55b4532d12e0
|   |-CallExpr 0x55b4532d10f8 'void'
|   | |-ImplicitCastExpr 0x55b4532d10e0 'void (*)(void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55b4532d0f90 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
|   | `-ImplicitCastExpr 0x55b4532d1120 'void *' <BitCast>
|   |   `-CStyleCastExpr 0x55b4532d10b8 'char *' <BitCast>
|   |     `-ImplicitCastExpr 0x55b4532d10a0 'float *' <LValueToRValue> part_of_explicit_cast
|   |       `-ArraySubscriptExpr 0x55b4532d1068 'float *' lvalue
|   |         |-ImplicitCastExpr 0x55b4532d1038 'float **' <LValueToRValue>
|   |         | `-MemberExpr 0x55b4532d0fe8 'float **' lvalue ->hidden_weights 0x55b45316fed8
|   |         |   `-ImplicitCastExpr 0x55b4532d0fd0 'BPNN *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x55b4532d0fb0 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|   |         `-ImplicitCastExpr 0x55b4532d1050 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x55b4532d1018 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
|   `-CallExpr 0x55b4532d12a0 'void'
|     |-ImplicitCastExpr 0x55b4532d1288 'void (*)(void *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b4532d1138 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
|     `-ImplicitCastExpr 0x55b4532d12c8 'void *' <BitCast>
|       `-CStyleCastExpr 0x55b4532d1260 'char *' <BitCast>
|         `-ImplicitCastExpr 0x55b4532d1248 'float *' <LValueToRValue> part_of_explicit_cast
|           `-ArraySubscriptExpr 0x55b4532d1210 'float *' lvalue
|             |-ImplicitCastExpr 0x55b4532d11e0 'float **' <LValueToRValue>
|             | `-MemberExpr 0x55b4532d1190 'float **' lvalue ->hidden_prev_weights 0x55b45316ffe8
|             |   `-ImplicitCastExpr 0x55b4532d1178 'BPNN *' <LValueToRValue>
|             |     `-DeclRefExpr 0x55b4532d1158 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|             `-ImplicitCastExpr 0x55b4532d11f8 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55b4532d11c0 'int' lvalue Var 0x55b4532b9c08 'i' 'int'
|-CallExpr 0x55b4532d1430 'void'
| |-ImplicitCastExpr 0x55b4532d1418 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d1338 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532d1458 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532d13f0 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532d13d8 'float **' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532d1390 'float **' lvalue ->hidden_weights 0x55b45316fed8
|         `-ImplicitCastExpr 0x55b4532d1378 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532d1358 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
|-CallExpr 0x55b4532d1568 'void'
| |-ImplicitCastExpr 0x55b4532d1550 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d1470 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b4532d1590 'void *' <BitCast>
|   `-CStyleCastExpr 0x55b4532d1528 'char *' <BitCast>
|     `-ImplicitCastExpr 0x55b4532d1510 'float **' <LValueToRValue> part_of_explicit_cast
|       `-MemberExpr 0x55b4532d14c8 'float **' lvalue ->hidden_prev_weights 0x55b45316ffe8
|         `-ImplicitCastExpr 0x55b4532d14b0 'BPNN *' <LValueToRValue>
|           `-DeclRefExpr 0x55b4532d1490 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
`-CallExpr 0x55b4532d1658 'void'
  |-ImplicitCastExpr 0x55b4532d1640 'void (*)(void *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55b4532d15a8 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
  `-ImplicitCastExpr 0x55b4532d1680 'void *' <BitCast>
    `-CStyleCastExpr 0x55b4532d1618 'char *' <BitCast>
      `-ImplicitCastExpr 0x55b4532d1600 'BPNN *' <LValueToRValue> part_of_explicit_cast
        `-DeclRefExpr 0x55b4532d15c8 'BPNN *' lvalue ParmVar 0x55b4532b9958 'net' 'BPNN *'
Emitting fn: bpnn_create
bpnn_create
CompoundStmt 0x55b4532d23c8
|-DeclStmt 0x55b4532d1aa0
| `-VarDecl 0x55b4532d1a38  used newnet 'BPNN *'
|-BinaryOperator 0x55b4532d1c50 'BPNN *' '='
| |-DeclRefExpr 0x55b4532d1ab8 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
| `-CallExpr 0x55b4532d1bd0 'BPNN *'
|   |-ImplicitCastExpr 0x55b4532d1bb8 'BPNN *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b4532d1ad8 'BPNN *()' Function 0x55b4532a07e8 'bpnn_internal_create' 'BPNN *(int, int, int)'
|   |-ImplicitCastExpr 0x55b4532d1c08 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x55b4532d1af8 'int' lvalue ParmVar 0x55b4532d17d0 'n_in' 'int'
|   |-ImplicitCastExpr 0x55b4532d1c20 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x55b4532d1b18 'int' lvalue ParmVar 0x55b4532d1850 'n_hidden' 'int'
|   `-ImplicitCastExpr 0x55b4532d1c38 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55b4532d1b38 'int' lvalue ParmVar 0x55b4532d18d0 'n_out' 'int'
|-CallExpr 0x55b4532d1da0 'int'
| |-ImplicitCastExpr 0x55b4532d1d88 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d1c98 'int ()' Function 0x55b4532584a0 'bpnn_randomize_weights' 'int (float **, int, int)'
| |-ImplicitCastExpr 0x55b4532d1dd8 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b4532d1cf0 'float **' lvalue ->input_weights 0x55b45316fe68
| |   `-ImplicitCastExpr 0x55b4532d1cd8 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b4532d1cb8 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
| |-ImplicitCastExpr 0x55b4532d1df0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b4532d1d20 'int' lvalue ParmVar 0x55b4532d17d0 'n_in' 'int'
| `-ImplicitCastExpr 0x55b4532d1e08 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532d1d40 'int' lvalue ParmVar 0x55b4532d1850 'n_hidden' 'int'
|-CallExpr 0x55b4532d1f00 'int'
| |-ImplicitCastExpr 0x55b4532d1ee8 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d1e20 'int ()' Function 0x55b4532584a0 'bpnn_randomize_weights' 'int (float **, int, int)'
| |-ImplicitCastExpr 0x55b4532d1f38 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b4532d1e78 'float **' lvalue ->hidden_weights 0x55b45316fed8
| |   `-ImplicitCastExpr 0x55b4532d1e60 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b4532d1e40 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
| |-ImplicitCastExpr 0x55b4532d1f50 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b4532d1ea8 'int' lvalue ParmVar 0x55b4532d1850 'n_hidden' 'int'
| `-ImplicitCastExpr 0x55b4532d1f68 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532d1ec8 'int' lvalue ParmVar 0x55b4532d18d0 'n_out' 'int'
|-CallExpr 0x55b4532d2060 'int'
| |-ImplicitCastExpr 0x55b4532d2048 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d1f80 'int ()' Function 0x55b45329fb80 'bpnn_zero_weights' 'int (float **, int, int)'
| |-ImplicitCastExpr 0x55b4532d2098 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b4532d1fd8 'float **' lvalue ->input_prev_weights 0x55b45316ff78
| |   `-ImplicitCastExpr 0x55b4532d1fc0 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b4532d1fa0 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
| |-ImplicitCastExpr 0x55b4532d20b0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b4532d2008 'int' lvalue ParmVar 0x55b4532d17d0 'n_in' 'int'
| `-ImplicitCastExpr 0x55b4532d20c8 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532d2028 'int' lvalue ParmVar 0x55b4532d1850 'n_hidden' 'int'
|-CallExpr 0x55b4532d21c0 'int'
| |-ImplicitCastExpr 0x55b4532d21a8 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d20e0 'int ()' Function 0x55b45329fb80 'bpnn_zero_weights' 'int (float **, int, int)'
| |-ImplicitCastExpr 0x55b4532d21f8 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b4532d2138 'float **' lvalue ->hidden_prev_weights 0x55b45316ffe8
| |   `-ImplicitCastExpr 0x55b4532d2120 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b4532d2100 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
| |-ImplicitCastExpr 0x55b4532d2210 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b4532d2168 'int' lvalue ParmVar 0x55b4532d1850 'n_hidden' 'int'
| `-ImplicitCastExpr 0x55b4532d2228 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532d2188 'int' lvalue ParmVar 0x55b4532d18d0 'n_out' 'int'
|-CallExpr 0x55b4532d2300 'int'
| |-ImplicitCastExpr 0x55b4532d22e8 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4532d2240 'int ()' Function 0x55b45329f5f0 'bpnn_randomize_row' 'int (float *, int)'
| |-ImplicitCastExpr 0x55b4532d2330 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b4532d2298 'float *' lvalue ->target 0x55b45316fdc8
| |   `-ImplicitCastExpr 0x55b4532d2280 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b4532d2260 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
| `-ImplicitCastExpr 0x55b4532d2348 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b4532d22c8 'int' lvalue ParmVar 0x55b4532d18d0 'n_out' 'int'
`-ReturnStmt 0x55b4532d23b8
  `-ImplicitCastExpr 0x55b4532d23a0 'BPNN *' <LValueToRValue>
    `-ParenExpr 0x55b4532d2380 'BPNN *' lvalue
      `-DeclRefExpr 0x55b4532d2360 'BPNN *' lvalue Var 0x55b4532d1a38 'newnet' 'BPNN *'
Emitting fn: bpnn_layerforward
bpnn_layerforward
CompoundStmt 0x55b4532e8868
|-DeclStmt 0x55b4532e7ec0
| `-VarDecl 0x55b4532e7e58  used sum 'float'
|-DeclStmt 0x55b4532e8020
| |-VarDecl 0x55b4532e7ef0  used j 'int'
| `-VarDecl 0x55b4532e7f70  used k 'int'
|-BinaryOperator 0x55b4532e80e8 'float' '='
| |-ArraySubscriptExpr 0x55b4532e8090 'float' lvalue
| | |-ImplicitCastExpr 0x55b4532e8078 'float *' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532e8038 'float *' lvalue ParmVar 0x55b4532d2430 'l1' 'float *'
| | `-IntegerLiteral 0x55b4532e8058 'int' 0
| `-ImplicitCastExpr 0x55b4532e80d0 'float' <FloatingCast>
|   `-FloatingLiteral 0x55b4532e80b0 'double' 1.000000e+00
`-ForStmt 0x55b4532e8830
  |-BinaryOperator 0x55b4532e8178 'int' '='
  | |-DeclRefExpr 0x55b4532e8138 'int' lvalue Var 0x55b4532e7ef0 'j' 'int'
  | `-IntegerLiteral 0x55b4532e8158 'int' 1
  |-<<<NULL>>>
  |-BinaryOperator 0x55b4532e8208 'int' '<='
  | |-ImplicitCastExpr 0x55b4532e81d8 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x55b4532e8198 'int' lvalue Var 0x55b4532e7ef0 'j' 'int'
  | `-ImplicitCastExpr 0x55b4532e81f0 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x55b4532e81b8 'int' lvalue ParmVar 0x55b4532e7c70 'n2' 'int'
  |-UnaryOperator 0x55b4532e8248 'int' postfix '++'
  | `-DeclRefExpr 0x55b4532e8228 'int' lvalue Var 0x55b4532e7ef0 'j' 'int'
  `-CompoundStmt 0x55b4532e8808
    |-BinaryOperator 0x55b4532e82e0 'float' '='
    | |-DeclRefExpr 0x55b4532e8288 'float' lvalue Var 0x55b4532e7e58 'sum' 'float'
    | `-ImplicitCastExpr 0x55b4532e82c8 'float' <FloatingCast>
    |   `-FloatingLiteral 0x55b4532e82a8 'double' 0.000000e+00
    |-ForStmt 0x55b4532e8670
    | |-BinaryOperator 0x55b4532e8340 'int' '='
    | | |-DeclRefExpr 0x55b4532e8300 'int' lvalue Var 0x55b4532e7f70 'k' 'int'
    | | `-IntegerLiteral 0x55b4532e8320 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55b4532e83d0 'int' '<='
    | | |-ImplicitCastExpr 0x55b4532e83a0 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55b4532e8360 'int' lvalue Var 0x55b4532e7f70 'k' 'int'
    | | `-ImplicitCastExpr 0x55b4532e83b8 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55b4532e8380 'int' lvalue ParmVar 0x55b4532e7bf0 'n1' 'int'
    | |-UnaryOperator 0x55b4532e8410 'int' postfix '++'
    | | `-DeclRefExpr 0x55b4532e83f0 'int' lvalue Var 0x55b4532e7f70 'k' 'int'
    | `-CompoundStmt 0x55b4532e8658
    |   `-CompoundAssignOperator 0x55b4532e8628 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
    |     |-DeclRefExpr 0x55b4532e8428 'float' lvalue Var 0x55b4532e7e58 'sum' 'float'
    |     `-BinaryOperator 0x55b4532e8608 'float' '*'
    |       |-ImplicitCastExpr 0x55b4532e85d8 'float' <LValueToRValue>
    |       | `-ArraySubscriptExpr 0x55b4532e8528 'float' lvalue
    |       |   |-ImplicitCastExpr 0x55b4532e84f8 'float *' <LValueToRValue>
    |       |   | `-ArraySubscriptExpr 0x55b4532e84b8 'float *' lvalue
    |       |   |   |-ImplicitCastExpr 0x55b4532e8488 'float **' <LValueToRValue>
    |       |   |   | `-DeclRefExpr 0x55b4532e8448 'float **' lvalue ParmVar 0x55b4532e7b70 'conn' 'float **'
    |       |   |   `-ImplicitCastExpr 0x55b4532e84a0 'int' <LValueToRValue>
    |       |   |     `-DeclRefExpr 0x55b4532e8468 'int' lvalue Var 0x55b4532e7f70 'k' 'int'
    |       |   `-ImplicitCastExpr 0x55b4532e8510 'int' <LValueToRValue>
    |       |     `-DeclRefExpr 0x55b4532e84d8 'int' lvalue Var 0x55b4532e7ef0 'j' 'int'
    |       `-ImplicitCastExpr 0x55b4532e85f0 'float' <LValueToRValue>
    |         `-ArraySubscriptExpr 0x55b4532e85b8 'float' lvalue
    |           |-ImplicitCastExpr 0x55b4532e8588 'float *' <LValueToRValue>
    |           | `-DeclRefExpr 0x55b4532e8548 'float *' lvalue ParmVar 0x55b4532d2430 'l1' 'float *'
    |           `-ImplicitCastExpr 0x55b4532e85a0 'int' <LValueToRValue>
    |             `-DeclRefExpr 0x55b4532e8568 'int' lvalue Var 0x55b4532e7f70 'k' 'int'
    `-BinaryOperator 0x55b4532e87e8 'float' '='
      |-ArraySubscriptExpr 0x55b4532e8718 'float' lvalue
      | |-ImplicitCastExpr 0x55b4532e86e8 'float *' <LValueToRValue>
      | | `-DeclRefExpr 0x55b4532e86a8 'float *' lvalue ParmVar 0x55b4532d24b0 'l2' 'float *'
      | `-ImplicitCastExpr 0x55b4532e8700 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x55b4532e86c8 'int' lvalue Var 0x55b4532e7ef0 'j' 'int'
      `-CallExpr 0x55b4532e8790 'float'
        |-ImplicitCastExpr 0x55b4532e8778 'float (*)()' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x55b4532e8738 'float ()' Function 0x55b453256960 'squash' 'float (double)'
        `-ImplicitCastExpr 0x55b4532e87d0 'double' <FloatingCast>
          `-ImplicitCastExpr 0x55b4532e87b8 'float' <LValueToRValue>
            `-DeclRefExpr 0x55b4532e8758 'float' lvalue Var 0x55b4532e7e58 'sum' 'float'
Emitting fn: bpnn_output_error
bpnn_output_error
CompoundStmt 0x55b4532e99c8
|-DeclStmt 0x55b4532e8d00
| `-VarDecl 0x55b4532e8c98  used j 'int'
|-DeclStmt 0x55b4532e8eb8
| |-VarDecl 0x55b4532e8d30  used o 'float'
| |-VarDecl 0x55b4532e8db0  used t 'float'
| `-VarDecl 0x55b4532e8e30  used errsum 'float'
|-BinaryOperator 0x55b4532e8f28 'float' '='
| |-DeclRefExpr 0x55b4532e8ed0 'float' lvalue Var 0x55b4532e8e30 'errsum' 'float'
| `-ImplicitCastExpr 0x55b4532e8f10 'float' <FloatingCast>
|   `-FloatingLiteral 0x55b4532e8ef0 'double' 0.000000e+00
|-ForStmt 0x55b4532e98e8
| |-BinaryOperator 0x55b4532e8f88 'int' '='
| | |-DeclRefExpr 0x55b4532e8f48 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
| | `-IntegerLiteral 0x55b4532e8f68 'int' 1
| |-<<<NULL>>>
| |-BinaryOperator 0x55b4532e9018 'int' '<='
| | |-ImplicitCastExpr 0x55b4532e8fe8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532e8fa8 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
| | `-ImplicitCastExpr 0x55b4532e9000 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532e8fc8 'int' lvalue ParmVar 0x55b4532e8ab0 'nj' 'int'
| |-UnaryOperator 0x55b4532e9058 'int' postfix '++'
| | `-DeclRefExpr 0x55b4532e9038 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
| `-CompoundStmt 0x55b4532e98b8
|   |-BinaryOperator 0x55b4532e9138 'float' '='
|   | |-DeclRefExpr 0x55b4532e9070 'float' lvalue Var 0x55b4532e8d30 'o' 'float'
|   | `-ImplicitCastExpr 0x55b4532e9120 'float' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x55b4532e9100 'float' lvalue
|   |     |-ImplicitCastExpr 0x55b4532e90d0 'float *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55b4532e9090 'float *' lvalue ParmVar 0x55b4532e89b0 'output' 'float *'
|   |     `-ImplicitCastExpr 0x55b4532e90e8 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b4532e90b0 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
|   |-BinaryOperator 0x55b4532e9220 'float' '='
|   | |-DeclRefExpr 0x55b4532e9158 'float' lvalue Var 0x55b4532e8db0 't' 'float'
|   | `-ImplicitCastExpr 0x55b4532e9208 'float' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x55b4532e91e8 'float' lvalue
|   |     |-ImplicitCastExpr 0x55b4532e91b8 'float *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55b4532e9178 'float *' lvalue ParmVar 0x55b4532e8930 'target' 'float *'
|   |     `-ImplicitCastExpr 0x55b4532e91d0 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b4532e9198 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
|   |-BinaryOperator 0x55b4532e94f0 'float' '='
|   | |-ArraySubscriptExpr 0x55b4532e92b0 'float' lvalue
|   | | |-ImplicitCastExpr 0x55b4532e9280 'float *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b4532e9240 'float *' lvalue ParmVar 0x55b4532e88b0 'delta' 'float *'
|   | | `-ImplicitCastExpr 0x55b4532e9298 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b4532e9260 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
|   | `-ImplicitCastExpr 0x55b4532e94d8 'float' <FloatingCast>
|   |   `-BinaryOperator 0x55b4532e94b8 'double' '*'
|   |     |-BinaryOperator 0x55b4532e93d0 'double' '*'
|   |     | |-ImplicitCastExpr 0x55b4532e93b8 'double' <FloatingCast>
|   |     | | `-ImplicitCastExpr 0x55b4532e93a0 'float' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55b4532e92d0 'float' lvalue Var 0x55b4532e8d30 'o' 'float'
|   |     | `-ParenExpr 0x55b4532e9380 'double'
|   |     |   `-BinaryOperator 0x55b4532e9360 'double' '-'
|   |     |     |-FloatingLiteral 0x55b4532e92f0 'double' 1.000000e+00
|   |     |     `-ImplicitCastExpr 0x55b4532e9348 'double' <FloatingCast>
|   |     |       `-ImplicitCastExpr 0x55b4532e9330 'float' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x55b4532e9310 'float' lvalue Var 0x55b4532e8d30 'o' 'float'
|   |     `-ImplicitCastExpr 0x55b4532e94a0 'double' <FloatingCast>
|   |       `-ParenExpr 0x55b4532e9480 'float'
|   |         `-BinaryOperator 0x55b4532e9460 'float' '-'
|   |           |-ImplicitCastExpr 0x55b4532e9430 'float' <LValueToRValue>
|   |           | `-DeclRefExpr 0x55b4532e93f0 'float' lvalue Var 0x55b4532e8db0 't' 'float'
|   |           `-ImplicitCastExpr 0x55b4532e9448 'float' <LValueToRValue>
|   |             `-DeclRefExpr 0x55b4532e9410 'float' lvalue Var 0x55b4532e8d30 'o' 'float'
|   `-CompoundAssignOperator 0x55b4532e9888 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|     |-DeclRefExpr 0x55b4532e9510 'float' lvalue Var 0x55b4532e8e30 'errsum' 'float'
|     `-ParenExpr 0x55b4532e9868 'float'
|       `-ConditionalOperator 0x55b4532e9838 'float'
|         |-ParenExpr 0x55b4532e9650 'int'
|         | `-BinaryOperator 0x55b4532e9630 'int' '>'
|         |   |-ImplicitCastExpr 0x55b4532e9618 'double' <FloatingCast>
|         |   | `-ImplicitCastExpr 0x55b4532e9600 'float' <LValueToRValue>
|         |   |   `-ParenExpr 0x55b4532e95c0 'float' lvalue
|         |   |     `-ArraySubscriptExpr 0x55b4532e95a0 'float' lvalue
|         |   |       |-ImplicitCastExpr 0x55b4532e9570 'float *' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x55b4532e9530 'float *' lvalue ParmVar 0x55b4532e88b0 'delta' 'float *'
|         |   |       `-ImplicitCastExpr 0x55b4532e9588 'int' <LValueToRValue>
|         |   |         `-DeclRefExpr 0x55b4532e9550 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
|         |   `-FloatingLiteral 0x55b4532e95e0 'double' 0.000000e+00
|         |-ImplicitCastExpr 0x55b4532e9820 'float' <LValueToRValue>
|         | `-ParenExpr 0x55b4532e9700 'float' lvalue
|         |   `-ArraySubscriptExpr 0x55b4532e96e0 'float' lvalue
|         |     |-ImplicitCastExpr 0x55b4532e96b0 'float *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x55b4532e9670 'float *' lvalue ParmVar 0x55b4532e88b0 'delta' 'float *'
|         |     `-ImplicitCastExpr 0x55b4532e96c8 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x55b4532e9690 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
|         `-ParenExpr 0x55b4532e9800 'float'
|           `-UnaryOperator 0x55b4532e97e8 'float' prefix '-'
|             `-ImplicitCastExpr 0x55b4532e97d0 'float' <LValueToRValue>
|               `-ParenExpr 0x55b4532e97b0 'float' lvalue
|                 `-ArraySubscriptExpr 0x55b4532e9790 'float' lvalue
|                   |-ImplicitCastExpr 0x55b4532e9760 'float *' <LValueToRValue>
|                   | `-DeclRefExpr 0x55b4532e9720 'float *' lvalue ParmVar 0x55b4532e88b0 'delta' 'float *'
|                   `-ImplicitCastExpr 0x55b4532e9778 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x55b4532e9740 'int' lvalue Var 0x55b4532e8c98 'j' 'int'
`-BinaryOperator 0x55b4532e99a8 'float' '='
  |-UnaryOperator 0x55b4532e9958 'float' lvalue prefix '*' cannot overflow
  | `-ImplicitCastExpr 0x55b4532e9940 'float *' <LValueToRValue>
  |   `-DeclRefExpr 0x55b4532e9920 'float *' lvalue ParmVar 0x55b4532e8a30 'err' 'float *'
  `-ImplicitCastExpr 0x55b4532e9990 'float' <LValueToRValue>
    `-DeclRefExpr 0x55b4532e9970 'float' lvalue Var 0x55b4532e8e30 'errsum' 'float'
Emitting fn: bpnn_hidden_error
bpnn_hidden_error
CompoundStmt 0x55b4532fd9d8
|-DeclStmt 0x55b4532fca48
| |-VarDecl 0x55b4532fc948  used j 'int'
| `-VarDecl 0x55b4532fc9c8  used k 'int'
|-DeclStmt 0x55b4532fcc00
| |-VarDecl 0x55b4532fca78  used h 'float'
| |-VarDecl 0x55b4532fcaf8  used sum 'float'
| `-VarDecl 0x55b4532fcb78  used errsum 'float'
|-BinaryOperator 0x55b4532fcc70 'float' '='
| |-DeclRefExpr 0x55b4532fcc18 'float' lvalue Var 0x55b4532fcb78 'errsum' 'float'
| `-ImplicitCastExpr 0x55b4532fcc58 'float' <FloatingCast>
|   `-FloatingLiteral 0x55b4532fcc38 'double' 0.000000e+00
|-ForStmt 0x55b4532fd8f8
| |-BinaryOperator 0x55b4532fccd0 'int' '='
| | |-DeclRefExpr 0x55b4532fcc90 'int' lvalue Var 0x55b4532fc948 'j' 'int'
| | `-IntegerLiteral 0x55b4532fccb0 'int' 1
| |-<<<NULL>>>
| |-BinaryOperator 0x55b4532fcd60 'int' '<='
| | |-ImplicitCastExpr 0x55b4532fcd30 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532fccf0 'int' lvalue Var 0x55b4532fc948 'j' 'int'
| | `-ImplicitCastExpr 0x55b4532fcd48 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b4532fcd10 'int' lvalue ParmVar 0x55b4532fc6b8 'nh' 'int'
| |-UnaryOperator 0x55b4532fcda0 'int' postfix '++'
| | `-DeclRefExpr 0x55b4532fcd80 'int' lvalue Var 0x55b4532fc948 'j' 'int'
| `-CompoundStmt 0x55b4532fd8c0
|   |-BinaryOperator 0x55b4532fce80 'float' '='
|   | |-DeclRefExpr 0x55b4532fcdb8 'float' lvalue Var 0x55b4532fca78 'h' 'float'
|   | `-ImplicitCastExpr 0x55b4532fce68 'float' <LValueToRValue>
|   |   `-ArraySubscriptExpr 0x55b4532fce48 'float' lvalue
|   |     |-ImplicitCastExpr 0x55b4532fce18 'float *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55b4532fcdd8 'float *' lvalue ParmVar 0x55b4532fc530 'hidden' 'float *'
|   |     `-ImplicitCastExpr 0x55b4532fce30 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55b4532fcdf8 'int' lvalue Var 0x55b4532fc948 'j' 'int'
|   |-BinaryOperator 0x55b4532fcef8 'float' '='
|   | |-DeclRefExpr 0x55b4532fcea0 'float' lvalue Var 0x55b4532fcaf8 'sum' 'float'
|   | `-ImplicitCastExpr 0x55b4532fcee0 'float' <FloatingCast>
|   |   `-FloatingLiteral 0x55b4532fcec0 'double' 0.000000e+00
|   |-ForStmt 0x55b4532fd288
|   | |-BinaryOperator 0x55b4532fcf58 'int' '='
|   | | |-DeclRefExpr 0x55b4532fcf18 'int' lvalue Var 0x55b4532fc9c8 'k' 'int'
|   | | `-IntegerLiteral 0x55b4532fcf38 'int' 1
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55b4532fcfe8 'int' '<='
|   | | |-ImplicitCastExpr 0x55b4532fcfb8 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b4532fcf78 'int' lvalue Var 0x55b4532fc9c8 'k' 'int'
|   | | `-ImplicitCastExpr 0x55b4532fcfd0 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b4532fcf98 'int' lvalue ParmVar 0x55b4532fc738 'no' 'int'
|   | |-UnaryOperator 0x55b4532fd028 'int' postfix '++'
|   | | `-DeclRefExpr 0x55b4532fd008 'int' lvalue Var 0x55b4532fc9c8 'k' 'int'
|   | `-CompoundStmt 0x55b4532fd270
|   |   `-CompoundAssignOperator 0x55b4532fd240 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   |     |-DeclRefExpr 0x55b4532fd040 'float' lvalue Var 0x55b4532fcaf8 'sum' 'float'
|   |     `-BinaryOperator 0x55b4532fd220 'float' '*'
|   |       |-ImplicitCastExpr 0x55b4532fd1f0 'float' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x55b4532fd0d0 'float' lvalue
|   |       |   |-ImplicitCastExpr 0x55b4532fd0a0 'float *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x55b4532fd060 'float *' lvalue ParmVar 0x55b4532e9a98 'delta_o' 'float *'
|   |       |   `-ImplicitCastExpr 0x55b4532fd0b8 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x55b4532fd080 'int' lvalue Var 0x55b4532fc9c8 'k' 'int'
|   |       `-ImplicitCastExpr 0x55b4532fd208 'float' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x55b4532fd1d0 'float' lvalue
|   |           |-ImplicitCastExpr 0x55b4532fd1a0 'float *' <LValueToRValue>
|   |           | `-ArraySubscriptExpr 0x55b4532fd160 'float *' lvalue
|   |           |   |-ImplicitCastExpr 0x55b4532fd130 'float **' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x55b4532fd0f0 'float **' lvalue ParmVar 0x55b4532fc5b8 'who' 'float **'
|   |           |   `-ImplicitCastExpr 0x55b4532fd148 'int' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x55b4532fd110 'int' lvalue Var 0x55b4532fc948 'j' 'int'
|   |           `-ImplicitCastExpr 0x55b4532fd1b8 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55b4532fd180 'int' lvalue Var 0x55b4532fc9c8 'k' 'int'
|   |-BinaryOperator 0x55b4532fd4f8 'float' '='
|   | |-ArraySubscriptExpr 0x55b4532fd330 'float' lvalue
|   | | |-ImplicitCastExpr 0x55b4532fd300 'float *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55b4532fd2c0 'float *' lvalue ParmVar 0x55b4532e9a18 'delta_h' 'float *'
|   | | `-ImplicitCastExpr 0x55b4532fd318 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x55b4532fd2e0 'int' lvalue Var 0x55b4532fc948 'j' 'int'
|   | `-ImplicitCastExpr 0x55b4532fd4e0 'float' <FloatingCast>
|   |   `-BinaryOperator 0x55b4532fd4c0 'double' '*'
|   |     |-BinaryOperator 0x55b4532fd450 'double' '*'
|   |     | |-ImplicitCastExpr 0x55b4532fd438 'double' <FloatingCast>
|   |     | | `-ImplicitCastExpr 0x55b4532fd420 'float' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x55b4532fd350 'float' lvalue Var 0x55b4532fca78 'h' 'float'
|   |     | `-ParenExpr 0x55b4532fd400 'double'
|   |     |   `-BinaryOperator 0x55b4532fd3e0 'double' '-'
|   |     |     |-FloatingLiteral 0x55b4532fd370 'double' 1.000000e+00
|   |     |     `-ImplicitCastExpr 0x55b4532fd3c8 'double' <FloatingCast>
|   |     |       `-ImplicitCastExpr 0x55b4532fd3b0 'float' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x55b4532fd390 'float' lvalue Var 0x55b4532fca78 'h' 'float'
|   |     `-ImplicitCastExpr 0x55b4532fd4a8 'double' <FloatingCast>
|   |       `-ImplicitCastExpr 0x55b4532fd490 'float' <LValueToRValue>
|   |         `-DeclRefExpr 0x55b4532fd470 'float' lvalue Var 0x55b4532fcaf8 'sum' 'float'
|   `-CompoundAssignOperator 0x55b4532fd890 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|     |-DeclRefExpr 0x55b4532fd518 'float' lvalue Var 0x55b4532fcb78 'errsum' 'float'
|     `-ParenExpr 0x55b4532fd870 'float'
|       `-ConditionalOperator 0x55b4532fd840 'float'
|         |-ParenExpr 0x55b4532fd658 'int'
|         | `-BinaryOperator 0x55b4532fd638 'int' '>'
|         |   |-ImplicitCastExpr 0x55b4532fd620 'double' <FloatingCast>
|         |   | `-ImplicitCastExpr 0x55b4532fd608 'float' <LValueToRValue>
|         |   |   `-ParenExpr 0x55b4532fd5c8 'float' lvalue
|         |   |     `-ArraySubscriptExpr 0x55b4532fd5a8 'float' lvalue
|         |   |       |-ImplicitCastExpr 0x55b4532fd578 'float *' <LValueToRValue>
|         |   |       | `-DeclRefExpr 0x55b4532fd538 'float *' lvalue ParmVar 0x55b4532e9a18 'delta_h' 'float *'
|         |   |       `-ImplicitCastExpr 0x55b4532fd590 'int' <LValueToRValue>
|         |   |         `-DeclRefExpr 0x55b4532fd558 'int' lvalue Var 0x55b4532fc948 'j' 'int'
|         |   `-FloatingLiteral 0x55b4532fd5e8 'double' 0.000000e+00
|         |-ImplicitCastExpr 0x55b4532fd828 'float' <LValueToRValue>
|         | `-ParenExpr 0x55b4532fd708 'float' lvalue
|         |   `-ArraySubscriptExpr 0x55b4532fd6e8 'float' lvalue
|         |     |-ImplicitCastExpr 0x55b4532fd6b8 'float *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x55b4532fd678 'float *' lvalue ParmVar 0x55b4532e9a18 'delta_h' 'float *'
|         |     `-ImplicitCastExpr 0x55b4532fd6d0 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x55b4532fd698 'int' lvalue Var 0x55b4532fc948 'j' 'int'
|         `-ParenExpr 0x55b4532fd808 'float'
|           `-UnaryOperator 0x55b4532fd7f0 'float' prefix '-'
|             `-ImplicitCastExpr 0x55b4532fd7d8 'float' <LValueToRValue>
|               `-ParenExpr 0x55b4532fd7b8 'float' lvalue
|                 `-ArraySubscriptExpr 0x55b4532fd798 'float' lvalue
|                   |-ImplicitCastExpr 0x55b4532fd768 'float *' <LValueToRValue>
|                   | `-DeclRefExpr 0x55b4532fd728 'float *' lvalue ParmVar 0x55b4532e9a18 'delta_h' 'float *'
|                   `-ImplicitCastExpr 0x55b4532fd780 'int' <LValueToRValue>
|                     `-DeclRefExpr 0x55b4532fd748 'int' lvalue Var 0x55b4532fc948 'j' 'int'
`-BinaryOperator 0x55b4532fd9b8 'float' '='
  |-UnaryOperator 0x55b4532fd968 'float' lvalue prefix '*' cannot overflow
  | `-ImplicitCastExpr 0x55b4532fd950 'float *' <LValueToRValue>
  |   `-DeclRefExpr 0x55b4532fd930 'float *' lvalue ParmVar 0x55b4532fc638 'err' 'float *'
  `-ImplicitCastExpr 0x55b4532fd9a0 'float' <LValueToRValue>
    `-DeclRefExpr 0x55b4532fd980 'float' lvalue Var 0x55b4532fcb78 'errsum' 'float'
Emitting fn: bpnn_adjust_weights
bpnn_adjust_weights
CompoundStmt 0x55b45330bdd8
|-DeclStmt 0x55b4532fdf18
| `-VarDecl 0x55b4532fdeb0  used new_dw 'float'
|-DeclStmt 0x55b4532fe048
| |-VarDecl 0x55b4532fdf48  used k 'int'
| `-VarDecl 0x55b4532fdfc8  used j 'int'
|-BinaryOperator 0x55b4532fe110 'float' '='
| |-ArraySubscriptExpr 0x55b4532fe0b8 'float' lvalue
| | |-ImplicitCastExpr 0x55b4532fe0a0 'float *' <LValueToRValue>
| | | `-DeclRefExpr 0x55b4532fe060 'float *' lvalue ParmVar 0x55b4532fdaa8 'ly' 'float *'
| | `-IntegerLiteral 0x55b4532fe080 'int' 0
| `-ImplicitCastExpr 0x55b4532fe0f8 'float' <FloatingCast>
|   `-FloatingLiteral 0x55b4532fe0d8 'double' 1.000000e+00
`-ForStmt 0x55b45330bda0
  |-BinaryOperator 0x55b4532fe170 'int' '='
  | |-DeclRefExpr 0x55b4532fe130 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
  | `-IntegerLiteral 0x55b4532fe150 'int' 1
  |-<<<NULL>>>
  |-BinaryOperator 0x55b4532fe200 'int' '<='
  | |-ImplicitCastExpr 0x55b4532fe1d0 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x55b4532fe190 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
  | `-ImplicitCastExpr 0x55b4532fe1e8 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x55b4532fe1b0 'int' lvalue ParmVar 0x55b4532fdcb8 'ndelta' 'int'
  |-UnaryOperator 0x55b4532fe240 'int' postfix '++'
  | `-DeclRefExpr 0x55b4532fe220 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
  `-CompoundStmt 0x55b45330bd88
    `-ForStmt 0x55b45330bd50
      |-BinaryOperator 0x55b4532fe298 'int' '='
      | |-DeclRefExpr 0x55b4532fe258 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
      | `-IntegerLiteral 0x55b4532fe278 'int' 0
      |-<<<NULL>>>
      |-BinaryOperator 0x55b4532fe328 'int' '<='
      | |-ImplicitCastExpr 0x55b4532fe2f8 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x55b4532fe2b8 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
      | `-ImplicitCastExpr 0x55b4532fe310 'int' <LValueToRValue>
      |   `-DeclRefExpr 0x55b4532fe2d8 'int' lvalue ParmVar 0x55b4532fdc38 'nly' 'int'
      |-UnaryOperator 0x55b4532fe368 'int' postfix '++'
      | `-DeclRefExpr 0x55b4532fe348 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
      `-CompoundStmt 0x55b45330bd28
        |-BinaryOperator 0x55b45330ba48 'float' '='
        | |-DeclRefExpr 0x55b4532fe380 'float' lvalue Var 0x55b4532fdeb0 'new_dw' 'float'
        | `-ImplicitCastExpr 0x55b45330ba30 'float' <FloatingCast>
        |   `-ParenExpr 0x55b45330ba10 'double'
        |     `-BinaryOperator 0x55b45330b9f0 'double' '+'
        |       |-ParenExpr 0x55b45330b840 'double'
        |       | `-BinaryOperator 0x55b45330b820 'double' '*'
        |       |   |-BinaryOperator 0x55b4532fe480 'double' '*'
        |       |   | |-FloatingLiteral 0x55b4532fe3a0 'double' 3.000000e-01
        |       |   | `-ImplicitCastExpr 0x55b4532fe468 'double' <FloatingCast>
        |       |   |   `-ImplicitCastExpr 0x55b4532fe450 'float' <LValueToRValue>
        |       |   |     `-ArraySubscriptExpr 0x55b4532fe430 'float' lvalue
        |       |   |       |-ImplicitCastExpr 0x55b4532fe400 'float *' <LValueToRValue>
        |       |   |       | `-DeclRefExpr 0x55b4532fe3c0 'float *' lvalue ParmVar 0x55b4532fda28 'delta' 'float *'
        |       |   |       `-ImplicitCastExpr 0x55b4532fe418 'int' <LValueToRValue>
        |       |   |         `-DeclRefExpr 0x55b4532fe3e0 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
        |       |   `-ImplicitCastExpr 0x55b45330b808 'double' <FloatingCast>
        |       |     `-ImplicitCastExpr 0x55b45330b7f0 'float' <LValueToRValue>
        |       |       `-ArraySubscriptExpr 0x55b4532fe510 'float' lvalue
        |       |         |-ImplicitCastExpr 0x55b4532fe4e0 'float *' <LValueToRValue>
        |       |         | `-DeclRefExpr 0x55b4532fe4a0 'float *' lvalue ParmVar 0x55b4532fdaa8 'ly' 'float *'
        |       |         `-ImplicitCastExpr 0x55b4532fe4f8 'int' <LValueToRValue>
        |       |           `-DeclRefExpr 0x55b4532fe4c0 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
        |       `-ParenExpr 0x55b45330b9d0 'double'
        |         `-BinaryOperator 0x55b45330b9b0 'double' '*'
        |           |-FloatingLiteral 0x55b45330b860 'double' 3.000000e-01
        |           `-ImplicitCastExpr 0x55b45330b998 'double' <FloatingCast>
        |             `-ImplicitCastExpr 0x55b45330b980 'float' <LValueToRValue>
        |               `-ArraySubscriptExpr 0x55b45330b960 'float' lvalue
        |                 |-ImplicitCastExpr 0x55b45330b930 'float *' <LValueToRValue>
        |                 | `-ArraySubscriptExpr 0x55b45330b8f0 'float *' lvalue
        |                 |   |-ImplicitCastExpr 0x55b45330b8c0 'float **' <LValueToRValue>
        |                 |   | `-DeclRefExpr 0x55b45330b880 'float **' lvalue ParmVar 0x55b4532fdbb8 'oldw' 'float **'
        |                 |   `-ImplicitCastExpr 0x55b45330b8d8 'int' <LValueToRValue>
        |                 |     `-DeclRefExpr 0x55b45330b8a0 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
        |                 `-ImplicitCastExpr 0x55b45330b948 'int' <LValueToRValue>
        |                   `-DeclRefExpr 0x55b45330b910 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
        |-CompoundAssignOperator 0x55b45330bba0 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
        | |-ArraySubscriptExpr 0x55b45330bb48 'float' lvalue
        | | |-ImplicitCastExpr 0x55b45330bb18 'float *' <LValueToRValue>
        | | | `-ArraySubscriptExpr 0x55b45330bad8 'float *' lvalue
        | | |   |-ImplicitCastExpr 0x55b45330baa8 'float **' <LValueToRValue>
        | | |   | `-DeclRefExpr 0x55b45330ba68 'float **' lvalue ParmVar 0x55b4532fdb30 'w' 'float **'
        | | |   `-ImplicitCastExpr 0x55b45330bac0 'int' <LValueToRValue>
        | | |     `-DeclRefExpr 0x55b45330ba88 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
        | | `-ImplicitCastExpr 0x55b45330bb30 'int' <LValueToRValue>
        | |   `-DeclRefExpr 0x55b45330baf8 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
        | `-ImplicitCastExpr 0x55b45330bb88 'float' <LValueToRValue>
        |   `-DeclRefExpr 0x55b45330bb68 'float' lvalue Var 0x55b4532fdeb0 'new_dw' 'float'
        `-BinaryOperator 0x55b45330bd08 'float' '='
          |-ArraySubscriptExpr 0x55b45330bcb0 'float' lvalue
          | |-ImplicitCastExpr 0x55b45330bc80 'float *' <LValueToRValue>
          | | `-ArraySubscriptExpr 0x55b45330bc40 'float *' lvalue
          | |   |-ImplicitCastExpr 0x55b45330bc10 'float **' <LValueToRValue>
          | |   | `-DeclRefExpr 0x55b45330bbd0 'float **' lvalue ParmVar 0x55b4532fdbb8 'oldw' 'float **'
          | |   `-ImplicitCastExpr 0x55b45330bc28 'int' <LValueToRValue>
          | |     `-DeclRefExpr 0x55b45330bbf0 'int' lvalue Var 0x55b4532fdf48 'k' 'int'
          | `-ImplicitCastExpr 0x55b45330bc98 'int' <LValueToRValue>
          |   `-DeclRefExpr 0x55b45330bc60 'int' lvalue Var 0x55b4532fdfc8 'j' 'int'
          `-ImplicitCastExpr 0x55b45330bcf0 'float' <LValueToRValue>
            `-DeclRefExpr 0x55b45330bcd0 'float' lvalue Var 0x55b4532fdeb0 'new_dw' 'float'
Emitting fn: bpnn_feedforward
bpnn_feedforward
CompoundStmt 0x55b45330c880
|-DeclStmt 0x55b45330c0f0
| |-VarDecl 0x55b45330bf68  used in 'int'
| |-VarDecl 0x55b45330bfe8  used hid 'int'
| `-VarDecl 0x55b45330c068  used out 'int'
|-BinaryOperator 0x55b45330c1a8 'int' '='
| |-DeclRefExpr 0x55b45330c108 'int' lvalue Var 0x55b45330bf68 'in' 'int'
| `-ImplicitCastExpr 0x55b45330c190 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45330c160 'int' lvalue ->input_n 0x55b45316fa58
|     `-ImplicitCastExpr 0x55b45330c148 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45330c128 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
|-BinaryOperator 0x55b45330c268 'int' '='
| |-DeclRefExpr 0x55b45330c1c8 'int' lvalue Var 0x55b45330bfe8 'hid' 'int'
| `-ImplicitCastExpr 0x55b45330c250 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45330c220 'int' lvalue ->hidden_n 0x55b45316fac0
|     `-ImplicitCastExpr 0x55b45330c208 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45330c1e8 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
|-BinaryOperator 0x55b45330c328 'int' '='
| |-DeclRefExpr 0x55b45330c288 'int' lvalue Var 0x55b45330c068 'out' 'int'
| `-ImplicitCastExpr 0x55b45330c310 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45330c2e0 'int' lvalue ->output_n 0x55b45316fb28
|     `-ImplicitCastExpr 0x55b45330c2c8 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45330c2a8 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
|-CallExpr 0x55b45330c550 'void'
| |-ImplicitCastExpr 0x55b45330c538 'void (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45330c378 'void ()' Function 0x55b4532e7d78 'bpnn_layerforward' 'void (float *, float *, float **, int, int)'
| |-ImplicitCastExpr 0x55b45330c598 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330c3d0 'float *' lvalue ->input_units 0x55b45316fbc0
| |   `-ImplicitCastExpr 0x55b45330c3b8 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330c398 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330c5b0 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330c438 'float *' lvalue ->hidden_units 0x55b45316fc28
| |   `-ImplicitCastExpr 0x55b45330c420 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330c400 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330c5c8 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45330c4a0 'float **' lvalue ->input_weights 0x55b45316fe68
| |   `-ImplicitCastExpr 0x55b45330c488 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330c468 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330c5e0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45330c4d0 'int' lvalue Var 0x55b45330bf68 'in' 'int'
| `-ImplicitCastExpr 0x55b45330c5f8 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45330c4f0 'int' lvalue Var 0x55b45330bfe8 'hid' 'int'
`-CallExpr 0x55b45330c7c0 'void'
  |-ImplicitCastExpr 0x55b45330c7a8 'void (*)()' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55b45330c610 'void ()' Function 0x55b4532e7d78 'bpnn_layerforward' 'void (float *, float *, float **, int, int)'
  |-ImplicitCastExpr 0x55b45330c808 'float *' <LValueToRValue>
  | `-MemberExpr 0x55b45330c668 'float *' lvalue ->hidden_units 0x55b45316fc28
  |   `-ImplicitCastExpr 0x55b45330c650 'BPNN *' <LValueToRValue>
  |     `-DeclRefExpr 0x55b45330c630 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
  |-ImplicitCastExpr 0x55b45330c820 'float *' <LValueToRValue>
  | `-MemberExpr 0x55b45330c6d0 'float *' lvalue ->output_units 0x55b45316fc90
  |   `-ImplicitCastExpr 0x55b45330c6b8 'BPNN *' <LValueToRValue>
  |     `-DeclRefExpr 0x55b45330c698 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
  |-ImplicitCastExpr 0x55b45330c838 'float **' <LValueToRValue>
  | `-MemberExpr 0x55b45330c738 'float **' lvalue ->hidden_weights 0x55b45316fed8
  |   `-ImplicitCastExpr 0x55b45330c720 'BPNN *' <LValueToRValue>
  |     `-DeclRefExpr 0x55b45330c700 'BPNN *' lvalue ParmVar 0x55b45330be18 'net' 'BPNN *'
  |-ImplicitCastExpr 0x55b45330c850 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55b45330c768 'int' lvalue Var 0x55b45330bfe8 'hid' 'int'
  `-ImplicitCastExpr 0x55b45330c868 'int' <LValueToRValue>
    `-DeclRefExpr 0x55b45330c788 'int' lvalue Var 0x55b45330c068 'out' 'int'
Emitting fn: bpnn_train
bpnn_train
CompoundStmt 0x55b45331f238
|-DeclStmt 0x55b45330cd50
| |-VarDecl 0x55b45330cbc8  used in 'int'
| |-VarDecl 0x55b45330cc48  used hid 'int'
| `-VarDecl 0x55b45330ccc8  used out 'int'
|-DeclStmt 0x55b45330ce80
| |-VarDecl 0x55b45330cd80  used out_err 'float'
| `-VarDecl 0x55b45330ce00  used hid_err 'float'
|-BinaryOperator 0x55b45330cf38 'int' '='
| |-DeclRefExpr 0x55b45330ce98 'int' lvalue Var 0x55b45330cbc8 'in' 'int'
| `-ImplicitCastExpr 0x55b45330cf20 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45330cef0 'int' lvalue ->input_n 0x55b45316fa58
|     `-ImplicitCastExpr 0x55b45330ced8 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45330ceb8 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
|-BinaryOperator 0x55b45330cff8 'int' '='
| |-DeclRefExpr 0x55b45330cf58 'int' lvalue Var 0x55b45330cc48 'hid' 'int'
| `-ImplicitCastExpr 0x55b45330cfe0 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45330cfb0 'int' lvalue ->hidden_n 0x55b45316fac0
|     `-ImplicitCastExpr 0x55b45330cf98 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45330cf78 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
|-BinaryOperator 0x55b45330d0b8 'int' '='
| |-DeclRefExpr 0x55b45330d018 'int' lvalue Var 0x55b45330ccc8 'out' 'int'
| `-ImplicitCastExpr 0x55b45330d0a0 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45330d070 'int' lvalue ->output_n 0x55b45316fb28
|     `-ImplicitCastExpr 0x55b45330d058 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45330d038 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
|-CallExpr 0x55b45330d2b8 'void'
| |-ImplicitCastExpr 0x55b45330d2a0 'void (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45330d108 'void ()' Function 0x55b4532e7d78 'bpnn_layerforward' 'void (float *, float *, float **, int, int)'
| |-ImplicitCastExpr 0x55b45330d300 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d160 'float *' lvalue ->input_units 0x55b45316fbc0
| |   `-ImplicitCastExpr 0x55b45330d148 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d128 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330d318 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d1c8 'float *' lvalue ->hidden_units 0x55b45316fc28
| |   `-ImplicitCastExpr 0x55b45330d1b0 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d190 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330d330 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45330d230 'float **' lvalue ->input_weights 0x55b45316fe68
| |   `-ImplicitCastExpr 0x55b45330d218 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d1f8 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330d348 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45330d260 'int' lvalue Var 0x55b45330cbc8 'in' 'int'
| `-ImplicitCastExpr 0x55b45330d360 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45330d280 'int' lvalue Var 0x55b45330cc48 'hid' 'int'
|-CallExpr 0x55b45330d528 'void'
| |-ImplicitCastExpr 0x55b45330d510 'void (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45330d378 'void ()' Function 0x55b4532e7d78 'bpnn_layerforward' 'void (float *, float *, float **, int, int)'
| |-ImplicitCastExpr 0x55b45330d570 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d3d0 'float *' lvalue ->hidden_units 0x55b45316fc28
| |   `-ImplicitCastExpr 0x55b45330d3b8 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d398 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330d588 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d438 'float *' lvalue ->output_units 0x55b45316fc90
| |   `-ImplicitCastExpr 0x55b45330d420 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d400 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330d5a0 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45330d4a0 'float **' lvalue ->hidden_weights 0x55b45316fed8
| |   `-ImplicitCastExpr 0x55b45330d488 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d468 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45330d5b8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45330d4d0 'int' lvalue Var 0x55b45330cc48 'hid' 'int'
| `-ImplicitCastExpr 0x55b45330d5d0 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45330d4f0 'int' lvalue Var 0x55b45330ccc8 'out' 'int'
|-CallExpr 0x55b45331e6f0 'void'
| |-ImplicitCastExpr 0x55b45330d7c8 'void (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45330d618 'void ()' Function 0x55b4532e8bb8 'bpnn_output_error' 'void (float *, float *, float *, int, float *)'
| |-ImplicitCastExpr 0x55b45331e738 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d670 'float *' lvalue ->output_delta 0x55b45316fd60
| |   `-ImplicitCastExpr 0x55b45330d658 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d638 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331e750 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d6d8 'float *' lvalue ->target 0x55b45316fdc8
| |   `-ImplicitCastExpr 0x55b45330d6c0 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d6a0 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331e768 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45330d740 'float *' lvalue ->output_units 0x55b45316fc90
| |   `-ImplicitCastExpr 0x55b45330d728 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45330d708 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331e780 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45330d770 'int' lvalue Var 0x55b45330ccc8 'out' 'int'
| `-UnaryOperator 0x55b45330d7b0 'float *' prefix '&' cannot overflow
|   `-DeclRefExpr 0x55b45330d790 'float' lvalue Var 0x55b45330cd80 'out_err' 'float'
|-CallExpr 0x55b45331e9e8 'void'
| |-ImplicitCastExpr 0x55b45331e9d0 'void (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45331e798 'void ()' Function 0x55b4532fc858 'bpnn_hidden_error' 'void (float *, int, float *, int, float **, float *, float *)'
| |-ImplicitCastExpr 0x55b45331ea40 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45331e7f0 'float *' lvalue ->hidden_delta 0x55b45316fcf8
| |   `-ImplicitCastExpr 0x55b45331e7d8 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331e7b8 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331ea58 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331e820 'int' lvalue Var 0x55b45330cc48 'hid' 'int'
| |-ImplicitCastExpr 0x55b45331ea70 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45331e878 'float *' lvalue ->output_delta 0x55b45316fd60
| |   `-ImplicitCastExpr 0x55b45331e860 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331e840 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331ea88 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331e8a8 'int' lvalue Var 0x55b45330ccc8 'out' 'int'
| |-ImplicitCastExpr 0x55b45331eaa0 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45331e900 'float **' lvalue ->hidden_weights 0x55b45316fed8
| |   `-ImplicitCastExpr 0x55b45331e8e8 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331e8c8 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331eab8 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45331e968 'float *' lvalue ->hidden_units 0x55b45316fc28
| |   `-ImplicitCastExpr 0x55b45331e950 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331e930 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| `-UnaryOperator 0x55b45331e9b8 'float *' prefix '&' cannot overflow
|   `-DeclRefExpr 0x55b45331e998 'float' lvalue Var 0x55b45330ce00 'hid_err' 'float'
|-BinaryOperator 0x55b45331eb58 'float' '='
| |-UnaryOperator 0x55b45331eb08 'float' lvalue prefix '*' cannot overflow
| | `-ImplicitCastExpr 0x55b45331eaf0 'float *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45331ead0 'float *' lvalue ParmVar 0x55b45330c950 'eo' 'float *'
| `-ImplicitCastExpr 0x55b45331eb40 'float' <LValueToRValue>
|   `-DeclRefExpr 0x55b45331eb20 'float' lvalue Var 0x55b45330cd80 'out_err' 'float'
|-BinaryOperator 0x55b45331ec00 'float' '='
| |-UnaryOperator 0x55b45331ebb0 'float' lvalue prefix '*' cannot overflow
| | `-ImplicitCastExpr 0x55b45331eb98 'float *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45331eb78 'float *' lvalue ParmVar 0x55b45330c9d0 'eh' 'float *'
| `-ImplicitCastExpr 0x55b45331ebe8 'float' <LValueToRValue>
|   `-DeclRefExpr 0x55b45331ebc8 'float' lvalue Var 0x55b45330ce00 'hid_err' 'float'
|-CallExpr 0x55b45331ee60 'void'
| |-ImplicitCastExpr 0x55b45331ee48 'void (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45331ec48 'void ()' Function 0x55b4532fddc8 'bpnn_adjust_weights' 'void (float *, int, float *, int, float **, float **)'
| |-ImplicitCastExpr 0x55b45331eeb0 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45331eca0 'float *' lvalue ->output_delta 0x55b45316fd60
| |   `-ImplicitCastExpr 0x55b45331ec88 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331ec68 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331eec8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331ecd0 'int' lvalue Var 0x55b45330ccc8 'out' 'int'
| |-ImplicitCastExpr 0x55b45331eee0 'float *' <LValueToRValue>
| | `-MemberExpr 0x55b45331ed28 'float *' lvalue ->hidden_units 0x55b45316fc28
| |   `-ImplicitCastExpr 0x55b45331ed10 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331ecf0 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| |-ImplicitCastExpr 0x55b45331eef8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331ed58 'int' lvalue Var 0x55b45330cc48 'hid' 'int'
| |-ImplicitCastExpr 0x55b45331ef10 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45331edb0 'float **' lvalue ->hidden_weights 0x55b45316fed8
| |   `-ImplicitCastExpr 0x55b45331ed98 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45331ed78 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
| `-ImplicitCastExpr 0x55b45331ef28 'float **' <LValueToRValue>
|   `-MemberExpr 0x55b45331ee18 'float **' lvalue ->hidden_prev_weights 0x55b45316ffe8
|     `-ImplicitCastExpr 0x55b45331ee00 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45331ede0 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
`-CallExpr 0x55b45331f158 'void'
  |-ImplicitCastExpr 0x55b45331f140 'void (*)()' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x55b45331ef40 'void ()' Function 0x55b4532fddc8 'bpnn_adjust_weights' 'void (float *, int, float *, int, float **, float **)'
  |-ImplicitCastExpr 0x55b45331f1a8 'float *' <LValueToRValue>
  | `-MemberExpr 0x55b45331ef98 'float *' lvalue ->hidden_delta 0x55b45316fcf8
  |   `-ImplicitCastExpr 0x55b45331ef80 'BPNN *' <LValueToRValue>
  |     `-DeclRefExpr 0x55b45331ef60 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
  |-ImplicitCastExpr 0x55b45331f1c0 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55b45331efc8 'int' lvalue Var 0x55b45330cc48 'hid' 'int'
  |-ImplicitCastExpr 0x55b45331f1d8 'float *' <LValueToRValue>
  | `-MemberExpr 0x55b45331f020 'float *' lvalue ->input_units 0x55b45316fbc0
  |   `-ImplicitCastExpr 0x55b45331f008 'BPNN *' <LValueToRValue>
  |     `-DeclRefExpr 0x55b45331efe8 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
  |-ImplicitCastExpr 0x55b45331f1f0 'int' <LValueToRValue>
  | `-DeclRefExpr 0x55b45331f050 'int' lvalue Var 0x55b45330cbc8 'in' 'int'
  |-ImplicitCastExpr 0x55b45331f208 'float **' <LValueToRValue>
  | `-MemberExpr 0x55b45331f0a8 'float **' lvalue ->input_weights 0x55b45316fe68
  |   `-ImplicitCastExpr 0x55b45331f090 'BPNN *' <LValueToRValue>
  |     `-DeclRefExpr 0x55b45331f070 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
  `-ImplicitCastExpr 0x55b45331f220 'float **' <LValueToRValue>
    `-MemberExpr 0x55b45331f110 'float **' lvalue ->input_prev_weights 0x55b45316ff78
      `-ImplicitCastExpr 0x55b45331f0f8 'BPNN *' <LValueToRValue>
        `-DeclRefExpr 0x55b45331f0d8 'BPNN *' lvalue ParmVar 0x55b45330c8d0 'net' 'BPNN *'
Emitting fn: bpnn_save
bpnn_save
CompoundStmt 0x55b45332dc78
|-DeclStmt 0x55b45331f840
| |-VarDecl 0x55b45331f520  used n1 'int'
| |-VarDecl 0x55b45331f5a0  used n2 'int'
| |-VarDecl 0x55b45331f620  used n3 'int'
| |-VarDecl 0x55b45331f6a0  used i 'int'
| |-VarDecl 0x55b45331f720  used j 'int'
| `-VarDecl 0x55b45331f7a0  used memcnt 'int'
|-DeclStmt 0x55b45331f978
| |-VarDecl 0x55b45331f870  used dvalue 'float'
| `-VarDecl 0x55b45331f8f8  used w 'float **'
|-DeclStmt 0x55b45331fa38
| `-VarDecl 0x55b45331f9a8  used mem 'char *'
|-DeclStmt 0x55b45331fac8
| `-VarDecl 0x55b45331fa60  used pFile 'FILE *'
|   `-FullComment 0x55b45332de00
|     `-ParagraphComment 0x55b45332ddd0
|       `-TextComment 0x55b45332dda0 Text="add//"
|-BinaryOperator 0x55b45331fc70 'FILE *' '='
| |-DeclRefExpr 0x55b45331fae0 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
| `-CallExpr 0x55b45331fbe0 'FILE *'
|   |-ImplicitCastExpr 0x55b45331fbc8 'FILE *(*)(const char *, const char *)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b45331fb00 'FILE *(const char *, const char *)' Function 0x55b4530d4790 'fopen' 'FILE *(const char *, const char *)'
|   |-ImplicitCastExpr 0x55b45331fc28 'const char *' <NoOp>
|   | `-ImplicitCastExpr 0x55b45331fc10 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55b45331fb20 'char *' lvalue ParmVar 0x55b45331f340 'filename' 'char *'
|   `-ImplicitCastExpr 0x55b45331fc58 'const char *' <NoOp>
|     `-ImplicitCastExpr 0x55b45331fc40 'char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55b45331fb78 'char[3]' lvalue "w+"
|-BinaryOperator 0x55b45331fd58 'int' '='
| |-DeclRefExpr 0x55b45331fcb8 'int' lvalue Var 0x55b45331f520 'n1' 'int'
| `-ImplicitCastExpr 0x55b45331fd40 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45331fd10 'int' lvalue ->input_n 0x55b45316fa58
|     `-ImplicitCastExpr 0x55b45331fcf8 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45331fcd8 'BPNN *' lvalue ParmVar 0x55b45331f2c0 'net' 'BPNN *'
|-BinaryOperator 0x55b45331fe18 'int' '='
| |-DeclRefExpr 0x55b45331fd78 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
| `-ImplicitCastExpr 0x55b45331fe00 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45331fdd0 'int' lvalue ->hidden_n 0x55b45316fac0
|     `-ImplicitCastExpr 0x55b45331fdb8 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45331fd98 'BPNN *' lvalue ParmVar 0x55b45331f2c0 'net' 'BPNN *'
|-BinaryOperator 0x55b45331fed8 'int' '='
| |-DeclRefExpr 0x55b45331fe38 'int' lvalue Var 0x55b45331f620 'n3' 'int'
| `-ImplicitCastExpr 0x55b45331fec0 'int' <LValueToRValue>
|   `-MemberExpr 0x55b45331fe90 'int' lvalue ->output_n 0x55b45316fb28
|     `-ImplicitCastExpr 0x55b45331fe78 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45331fe58 'BPNN *' lvalue ParmVar 0x55b45331f2c0 'net' 'BPNN *'
|-CallExpr 0x55b453320040 'int'
| |-ImplicitCastExpr 0x55b453320028 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45331fef8 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| |-ImplicitCastExpr 0x55b4533200a0 'const char *' <NoOp>
| | `-ImplicitCastExpr 0x55b453320088 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x55b45331ff58 'char[33]' lvalue "Saving %dx%dx%d network to '%s'\n"
| |-ImplicitCastExpr 0x55b4533200b8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331ff90 'int' lvalue Var 0x55b45331f520 'n1' 'int'
| |-ImplicitCastExpr 0x55b4533200d0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331ffb0 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
| |-ImplicitCastExpr 0x55b4533200e8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45331ffd0 'int' lvalue Var 0x55b45331f620 'n3' 'int'
| `-ImplicitCastExpr 0x55b453320100 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x55b45331fff0 'char *' lvalue ParmVar 0x55b45331f340 'filename' 'char *'
|-CallExpr 0x55b4533202c0 'unsigned long'
| |-ImplicitCastExpr 0x55b4533202a8 'unsigned long (*)(const void *, unsigned long, unsigned long, FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b453320118 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' Function 0x55b4530e3a40 'fwrite' 'unsigned long (const void *, unsigned long, unsigned long, FILE *)'
| |-ImplicitCastExpr 0x55b453320300 'const void *' <BitCast>
| | `-CStyleCastExpr 0x55b453320188 'char *' <BitCast>
| |   `-UnaryOperator 0x55b453320158 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x55b453320138 'int' lvalue Var 0x55b45331f520 'n1' 'int'
| |-UnaryExprOrTypeTraitExpr 0x55b4533201c0 'unsigned long' sizeof 'char'
| |-UnaryExprOrTypeTraitExpr 0x55b4533201f0 'unsigned long' sizeof 'char'
| `-ImplicitCastExpr 0x55b453320318 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x55b453320210 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
|-CallExpr 0x55b453320478 'unsigned long'
| |-ImplicitCastExpr 0x55b453320460 'unsigned long (*)(const void *, unsigned long, unsigned long, FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b453320330 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' Function 0x55b4530e3a40 'fwrite' 'unsigned long (const void *, unsigned long, unsigned long, FILE *)'
| |-ImplicitCastExpr 0x55b4533204b8 'const void *' <BitCast>
| | `-CStyleCastExpr 0x55b4533203a0 'char *' <BitCast>
| |   `-UnaryOperator 0x55b453320370 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x55b453320350 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
| |-UnaryExprOrTypeTraitExpr 0x55b4533203d8 'unsigned long' sizeof 'char'
| |-UnaryExprOrTypeTraitExpr 0x55b453320408 'unsigned long' sizeof 'char'
| `-ImplicitCastExpr 0x55b4533204d0 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x55b453320428 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
|-CallExpr 0x55b453320630 'unsigned long'
| |-ImplicitCastExpr 0x55b453320618 'unsigned long (*)(const void *, unsigned long, unsigned long, FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b4533204e8 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' Function 0x55b4530e3a40 'fwrite' 'unsigned long (const void *, unsigned long, unsigned long, FILE *)'
| |-ImplicitCastExpr 0x55b453320670 'const void *' <BitCast>
| | `-CStyleCastExpr 0x55b453320558 'char *' <BitCast>
| |   `-UnaryOperator 0x55b453320528 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x55b453320508 'int' lvalue Var 0x55b45331f620 'n3' 'int'
| |-UnaryExprOrTypeTraitExpr 0x55b453320590 'unsigned long' sizeof 'char'
| |-UnaryExprOrTypeTraitExpr 0x55b4533205c0 'unsigned long' sizeof 'char'
| `-ImplicitCastExpr 0x55b453320688 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x55b4533205e0 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
|-BinaryOperator 0x55b45332ac50 'int' '='
| |-DeclRefExpr 0x55b4533206a0 'int' lvalue Var 0x55b45331f7a0 'memcnt' 'int'
| `-IntegerLiteral 0x55b4533206c0 'int' 0
|-BinaryOperator 0x55b45332ad10 'float **' '='
| |-DeclRefExpr 0x55b45332ac70 'float **' lvalue Var 0x55b45331f8f8 'w' 'float **'
| `-ImplicitCastExpr 0x55b45332acf8 'float **' <LValueToRValue>
|   `-MemberExpr 0x55b45332acc8 'float **' lvalue ->input_weights 0x55b45316fe68
|     `-ImplicitCastExpr 0x55b45332acb0 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45332ac90 'BPNN *' lvalue ParmVar 0x55b45331f2c0 'net' 'BPNN *'
|-BinaryOperator 0x55b45332b048 'char *' '='
| |-DeclRefExpr 0x55b45332ad30 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
| `-CStyleCastExpr 0x55b45332b020 'char *' <BitCast>
|   `-CallExpr 0x55b45332afc8 'void *'
|     |-ImplicitCastExpr 0x55b45332afb0 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b45332ad50 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-ImplicitCastExpr 0x55b45332aff0 'unsigned long' <IntegralCast>
|       `-CStyleCastExpr 0x55b45332af88 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55b45332af68 'unsigned long'
|           `-BinaryOperator 0x55b45332af10 'unsigned long' '*'
|             |-ImplicitCastExpr 0x55b45332aef8 'unsigned long' <IntegralCast>
|             | `-BinaryOperator 0x55b45332aea0 'int' '*'
|             |   |-ParenExpr 0x55b45332ade8 'int'
|             |   | `-BinaryOperator 0x55b45332adc8 'int' '+'
|             |   |   |-ImplicitCastExpr 0x55b45332adb0 'int' <LValueToRValue>
|             |   |   | `-DeclRefExpr 0x55b45332ad70 'int' lvalue Var 0x55b45331f520 'n1' 'int'
|             |   |   `-IntegerLiteral 0x55b45332ad90 'int' 1
|             |   `-ParenExpr 0x55b45332ae80 'int'
|             |     `-BinaryOperator 0x55b45332ae60 'int' '+'
|             |       |-ImplicitCastExpr 0x55b45332ae48 'int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55b45332ae08 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
|             |       `-IntegerLiteral 0x55b45332ae28 'int' 1
|             `-UnaryExprOrTypeTraitExpr 0x55b45332aed8 'unsigned long' sizeof 'float'
|-ForStmt 0x55b45332bd08
| |-BinaryOperator 0x55b45332b0a8 'int' '='
| | |-DeclRefExpr 0x55b45332b068 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
| | `-IntegerLiteral 0x55b45332b088 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b45332b138 'int' '<='
| | |-ImplicitCastExpr 0x55b45332b108 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b45332b0c8 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
| | `-ImplicitCastExpr 0x55b45332b120 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45332b0e8 'int' lvalue Var 0x55b45331f520 'n1' 'int'
| |-UnaryOperator 0x55b45332b178 'int' postfix '++'
| | `-DeclRefExpr 0x55b45332b158 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
| `-CompoundStmt 0x55b45332bcf0
|   `-ForStmt 0x55b45332bcb8
|     |-BinaryOperator 0x55b45332b1d0 'int' '='
|     | |-DeclRefExpr 0x55b45332b190 'int' lvalue Var 0x55b45331f720 'j' 'int'
|     | `-IntegerLiteral 0x55b45332b1b0 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b45332b260 'int' '<='
|     | |-ImplicitCastExpr 0x55b45332b230 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b45332b1f0 'int' lvalue Var 0x55b45331f720 'j' 'int'
|     | `-ImplicitCastExpr 0x55b45332b248 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b45332b210 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
|     |-UnaryOperator 0x55b45332b2a0 'int' postfix '++'
|     | `-DeclRefExpr 0x55b45332b280 'int' lvalue Var 0x55b45331f720 'j' 'int'
|     `-CompoundStmt 0x55b45332bc88
|       |-BinaryOperator 0x55b45332b3f0 'float' '='
|       | |-DeclRefExpr 0x55b45332b2b8 'float' lvalue Var 0x55b45331f870 'dvalue' 'float'
|       | `-ImplicitCastExpr 0x55b45332b3d8 'float' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55b45332b3b8 'float' lvalue
|       |     |-ImplicitCastExpr 0x55b45332b388 'float *' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x55b45332b348 'float *' lvalue
|       |     |   |-ImplicitCastExpr 0x55b45332b318 'float **' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x55b45332b2d8 'float **' lvalue Var 0x55b45331f8f8 'w' 'float **'
|       |     |   `-ImplicitCastExpr 0x55b45332b330 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x55b45332b2f8 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
|       |     `-ImplicitCastExpr 0x55b45332b3a0 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x55b45332b368 'int' lvalue Var 0x55b45331f720 'j' 'int'
|       |-CompoundStmt 0x55b45332bbb8
|       | |-DeclStmt 0x55b45332b528
|       | | |-VarDecl 0x55b45332b428  used _to 'char *' register
|       | | `-VarDecl 0x55b45332b4a8  used _from 'char *' register
|       | |-DeclStmt 0x55b45332b658
|       | | |-VarDecl 0x55b45332b558  used _i 'int' register
|       | | `-VarDecl 0x55b45332b5d8  used _l 'int' register
|       | |-BinaryOperator 0x55b45332b7b8 'char *' '='
|       | | |-DeclRefExpr 0x55b45332b670 'char *' lvalue Var 0x55b45332b428 '_to' 'char *'
|       | | `-CStyleCastExpr 0x55b45332b790 'char *' <NoOp>
|       | |   `-ParenExpr 0x55b45332b770 'char *'
|       | |     `-UnaryOperator 0x55b45332b720 'char *' prefix '&' cannot overflow
|       | |       `-ArraySubscriptExpr 0x55b45332b700 'char' lvalue
|       | |         |-ImplicitCastExpr 0x55b45332b6d0 'char *' <LValueToRValue>
|       | |         | `-DeclRefExpr 0x55b45332b690 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
|       | |         `-ImplicitCastExpr 0x55b45332b6e8 'int' <LValueToRValue>
|       | |           `-DeclRefExpr 0x55b45332b6b0 'int' lvalue Var 0x55b45331f7a0 'memcnt' 'int'
|       | |-BinaryOperator 0x55b45332b8b0 'char *' '='
|       | | |-DeclRefExpr 0x55b45332b7d8 'char *' lvalue Var 0x55b45332b4a8 '_from' 'char *'
|       | | `-CStyleCastExpr 0x55b45332b888 'char *' <BitCast>
|       | |   `-ParenExpr 0x55b45332b868 'float *'
|       | |     `-UnaryOperator 0x55b45332b818 'float *' prefix '&' cannot overflow
|       | |       `-DeclRefExpr 0x55b45332b7f8 'float' lvalue Var 0x55b45331f870 'dvalue' 'float'
|       | |-BinaryOperator 0x55b45332b960 'int' '='
|       | | |-DeclRefExpr 0x55b45332b8d0 'int' lvalue Var 0x55b45332b5d8 '_l' 'int'
|       | | `-ImplicitCastExpr 0x55b45332b948 'int' <IntegralCast>
|       | |   `-ParenExpr 0x55b45332b928 'unsigned long'
|       | |     `-UnaryExprOrTypeTraitExpr 0x55b45332b908 'unsigned long' sizeof 'float'
|       | `-ForStmt 0x55b45332bb80
|       |   |-BinaryOperator 0x55b45332b9c0 'int' '='
|       |   | |-DeclRefExpr 0x55b45332b980 'int' lvalue Var 0x55b45332b558 '_i' 'int'
|       |   | `-IntegerLiteral 0x55b45332b9a0 'int' 0
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x55b45332ba50 'int' '<'
|       |   | |-ImplicitCastExpr 0x55b45332ba20 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x55b45332b9e0 'int' lvalue Var 0x55b45332b558 '_i' 'int'
|       |   | `-ImplicitCastExpr 0x55b45332ba38 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55b45332ba00 'int' lvalue Var 0x55b45332b5d8 '_l' 'int'
|       |   |-UnaryOperator 0x55b45332ba90 'int' postfix '++'
|       |   | `-DeclRefExpr 0x55b45332ba70 'int' lvalue Var 0x55b45332b558 '_i' 'int'
|       |   `-BinaryOperator 0x55b45332bb60 'char' '='
|       |     |-UnaryOperator 0x55b45332bae0 'char' lvalue prefix '*' cannot overflow
|       |     | `-UnaryOperator 0x55b45332bac8 'char *' postfix '++'
|       |     |   `-DeclRefExpr 0x55b45332baa8 'char *' lvalue Var 0x55b45332b428 '_to' 'char *'
|       |     `-ImplicitCastExpr 0x55b45332bb48 'char' <LValueToRValue>
|       |       `-UnaryOperator 0x55b45332bb30 'char' lvalue prefix '*' cannot overflow
|       |         `-UnaryOperator 0x55b45332bb18 'char *' postfix '++'
|       |           `-DeclRefExpr 0x55b45332baf8 'char *' lvalue Var 0x55b45332b4a8 '_from' 'char *'
|       |-NullStmt 0x55b45332bbf8
|       `-CompoundAssignOperator 0x55b45332bc58 'int' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|         |-DeclRefExpr 0x55b45332bc00 'int' lvalue Var 0x55b45331f7a0 'memcnt' 'int'
|         `-UnaryExprOrTypeTraitExpr 0x55b45332bc38 'unsigned long' sizeof 'float'
|-CallExpr 0x55b45332c0e0 'unsigned long'
| |-ImplicitCastExpr 0x55b45332c0c8 'unsigned long (*)(const void *, unsigned long, unsigned long, FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332bd40 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' Function 0x55b4530e3a40 'fwrite' 'unsigned long (const void *, unsigned long, unsigned long, FILE *)'
| |-ImplicitCastExpr 0x55b45332c138 'const void *' <BitCast>
| | `-ImplicitCastExpr 0x55b45332c120 'char *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45332bd60 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
| |-ImplicitCastExpr 0x55b45332c150 'unsigned long' <IntegralCast>
| | `-CStyleCastExpr 0x55b45332be10 'unsigned int' <IntegralCast>
| |   `-ParenExpr 0x55b45332bdf0 'unsigned long'
| |     `-UnaryExprOrTypeTraitExpr 0x55b45332bd98 'unsigned long' sizeof 'float'
| |-ImplicitCastExpr 0x55b45332c168 'unsigned long' <IntegralCast>
| | `-CStyleCastExpr 0x55b45332c050 'unsigned int' <IntegralCast>
| |   `-ParenExpr 0x55b45332c030 'unsigned long'
| |     `-BinaryOperator 0x55b45332bfd8 'unsigned long' '*'
| |       |-ImplicitCastExpr 0x55b45332bfc0 'unsigned long' <IntegralCast>
| |       | `-BinaryOperator 0x55b45332bf68 'int' '*'
| |       |   |-ParenExpr 0x55b45332beb0 'int'
| |       |   | `-BinaryOperator 0x55b45332be90 'int' '+'
| |       |   |   |-ImplicitCastExpr 0x55b45332be78 'int' <LValueToRValue>
| |       |   |   | `-DeclRefExpr 0x55b45332be38 'int' lvalue Var 0x55b45331f520 'n1' 'int'
| |       |   |   `-IntegerLiteral 0x55b45332be58 'int' 1
| |       |   `-ParenExpr 0x55b45332bf48 'int'
| |       |     `-BinaryOperator 0x55b45332bf28 'int' '+'
| |       |       |-ImplicitCastExpr 0x55b45332bf10 'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x55b45332bed0 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
| |       |       `-IntegerLiteral 0x55b45332bef0 'int' 1
| |       `-UnaryExprOrTypeTraitExpr 0x55b45332bfa0 'unsigned long' sizeof 'float'
| `-ImplicitCastExpr 0x55b45332c180 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x55b45332c078 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
|-CallExpr 0x55b45332c208 'void'
| |-ImplicitCastExpr 0x55b45332c1f0 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332c198 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b45332c248 'void *' <BitCast>
|   `-ImplicitCastExpr 0x55b45332c230 'char *' <LValueToRValue>
|     `-DeclRefExpr 0x55b45332c1b8 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
|-BinaryOperator 0x55b45332c2a0 'int' '='
| |-DeclRefExpr 0x55b45332c260 'int' lvalue Var 0x55b45331f7a0 'memcnt' 'int'
| `-IntegerLiteral 0x55b45332c280 'int' 0
|-BinaryOperator 0x55b45332c360 'float **' '='
| |-DeclRefExpr 0x55b45332c2c0 'float **' lvalue Var 0x55b45331f8f8 'w' 'float **'
| `-ImplicitCastExpr 0x55b45332c348 'float **' <LValueToRValue>
|   `-MemberExpr 0x55b45332c318 'float **' lvalue ->hidden_weights 0x55b45316fed8
|     `-ImplicitCastExpr 0x55b45332c300 'BPNN *' <LValueToRValue>
|       `-DeclRefExpr 0x55b45332c2e0 'BPNN *' lvalue ParmVar 0x55b45331f2c0 'net' 'BPNN *'
|-BinaryOperator 0x55b45332c698 'char *' '='
| |-DeclRefExpr 0x55b45332c380 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
| `-CStyleCastExpr 0x55b45332c670 'char *' <BitCast>
|   `-CallExpr 0x55b45332c618 'void *'
|     |-ImplicitCastExpr 0x55b45332c600 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b45332c3a0 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-ImplicitCastExpr 0x55b45332c640 'unsigned long' <IntegralCast>
|       `-CStyleCastExpr 0x55b45332c5d8 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55b45332c5b8 'unsigned long'
|           `-BinaryOperator 0x55b45332c560 'unsigned long' '*'
|             |-ImplicitCastExpr 0x55b45332c548 'unsigned long' <IntegralCast>
|             | `-BinaryOperator 0x55b45332c4f0 'int' '*'
|             |   |-ParenExpr 0x55b45332c438 'int'
|             |   | `-BinaryOperator 0x55b45332c418 'int' '+'
|             |   |   |-ImplicitCastExpr 0x55b45332c400 'int' <LValueToRValue>
|             |   |   | `-DeclRefExpr 0x55b45332c3c0 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
|             |   |   `-IntegerLiteral 0x55b45332c3e0 'int' 1
|             |   `-ParenExpr 0x55b45332c4d0 'int'
|             |     `-BinaryOperator 0x55b45332c4b0 'int' '+'
|             |       |-ImplicitCastExpr 0x55b45332c498 'int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55b45332c458 'int' lvalue Var 0x55b45331f620 'n3' 'int'
|             |       `-IntegerLiteral 0x55b45332c478 'int' 1
|             `-UnaryExprOrTypeTraitExpr 0x55b45332c528 'unsigned long' sizeof 'float'
|-ForStmt 0x55b45332d710
| |-BinaryOperator 0x55b45332c6f8 'int' '='
| | |-DeclRefExpr 0x55b45332c6b8 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
| | `-IntegerLiteral 0x55b45332c6d8 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b45332c788 'int' '<='
| | |-ImplicitCastExpr 0x55b45332c758 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b45332c718 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
| | `-ImplicitCastExpr 0x55b45332c770 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45332c738 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
| |-UnaryOperator 0x55b45332c7c8 'int' postfix '++'
| | `-DeclRefExpr 0x55b45332c7a8 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
| `-CompoundStmt 0x55b45332d6f8
|   `-ForStmt 0x55b45332d6c0
|     |-BinaryOperator 0x55b45332c820 'int' '='
|     | |-DeclRefExpr 0x55b45332c7e0 'int' lvalue Var 0x55b45331f720 'j' 'int'
|     | `-IntegerLiteral 0x55b45332c800 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b45332c8b0 'int' '<='
|     | |-ImplicitCastExpr 0x55b45332c880 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b45332c840 'int' lvalue Var 0x55b45331f720 'j' 'int'
|     | `-ImplicitCastExpr 0x55b45332c898 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b45332c860 'int' lvalue Var 0x55b45331f620 'n3' 'int'
|     |-UnaryOperator 0x55b45332c8f0 'int' postfix '++'
|     | `-DeclRefExpr 0x55b45332c8d0 'int' lvalue Var 0x55b45331f720 'j' 'int'
|     `-CompoundStmt 0x55b45332d690
|       |-BinaryOperator 0x55b45332ca40 'float' '='
|       | |-DeclRefExpr 0x55b45332c908 'float' lvalue Var 0x55b45331f870 'dvalue' 'float'
|       | `-ImplicitCastExpr 0x55b45332ca28 'float' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55b45332ca08 'float' lvalue
|       |     |-ImplicitCastExpr 0x55b45332c9d8 'float *' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x55b45332c998 'float *' lvalue
|       |     |   |-ImplicitCastExpr 0x55b45332c968 'float **' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x55b45332c928 'float **' lvalue Var 0x55b45331f8f8 'w' 'float **'
|       |     |   `-ImplicitCastExpr 0x55b45332c980 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x55b45332c948 'int' lvalue Var 0x55b45331f6a0 'i' 'int'
|       |     `-ImplicitCastExpr 0x55b45332c9f0 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x55b45332c9b8 'int' lvalue Var 0x55b45331f720 'j' 'int'
|       |-CompoundStmt 0x55b45332d5c0
|       | |-DeclStmt 0x55b45332cb78
|       | | |-VarDecl 0x55b45332ca78  used _to 'char *' register
|       | | `-VarDecl 0x55b45332caf8  used _from 'char *' register
|       | |-DeclStmt 0x55b45332d060
|       | | |-VarDecl 0x55b45332cba8  used _i 'int' register
|       | | `-VarDecl 0x55b45332cfe0  used _l 'int' register
|       | |-BinaryOperator 0x55b45332d1c0 'char *' '='
|       | | |-DeclRefExpr 0x55b45332d078 'char *' lvalue Var 0x55b45332ca78 '_to' 'char *'
|       | | `-CStyleCastExpr 0x55b45332d198 'char *' <NoOp>
|       | |   `-ParenExpr 0x55b45332d178 'char *'
|       | |     `-UnaryOperator 0x55b45332d128 'char *' prefix '&' cannot overflow
|       | |       `-ArraySubscriptExpr 0x55b45332d108 'char' lvalue
|       | |         |-ImplicitCastExpr 0x55b45332d0d8 'char *' <LValueToRValue>
|       | |         | `-DeclRefExpr 0x55b45332d098 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
|       | |         `-ImplicitCastExpr 0x55b45332d0f0 'int' <LValueToRValue>
|       | |           `-DeclRefExpr 0x55b45332d0b8 'int' lvalue Var 0x55b45331f7a0 'memcnt' 'int'
|       | |-BinaryOperator 0x55b45332d2b8 'char *' '='
|       | | |-DeclRefExpr 0x55b45332d1e0 'char *' lvalue Var 0x55b45332caf8 '_from' 'char *'
|       | | `-CStyleCastExpr 0x55b45332d290 'char *' <BitCast>
|       | |   `-ParenExpr 0x55b45332d270 'float *'
|       | |     `-UnaryOperator 0x55b45332d220 'float *' prefix '&' cannot overflow
|       | |       `-DeclRefExpr 0x55b45332d200 'float' lvalue Var 0x55b45331f870 'dvalue' 'float'
|       | |-BinaryOperator 0x55b45332d368 'int' '='
|       | | |-DeclRefExpr 0x55b45332d2d8 'int' lvalue Var 0x55b45332cfe0 '_l' 'int'
|       | | `-ImplicitCastExpr 0x55b45332d350 'int' <IntegralCast>
|       | |   `-ParenExpr 0x55b45332d330 'unsigned long'
|       | |     `-UnaryExprOrTypeTraitExpr 0x55b45332d310 'unsigned long' sizeof 'float'
|       | `-ForStmt 0x55b45332d588
|       |   |-BinaryOperator 0x55b45332d3c8 'int' '='
|       |   | |-DeclRefExpr 0x55b45332d388 'int' lvalue Var 0x55b45332cba8 '_i' 'int'
|       |   | `-IntegerLiteral 0x55b45332d3a8 'int' 0
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x55b45332d458 'int' '<'
|       |   | |-ImplicitCastExpr 0x55b45332d428 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x55b45332d3e8 'int' lvalue Var 0x55b45332cba8 '_i' 'int'
|       |   | `-ImplicitCastExpr 0x55b45332d440 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55b45332d408 'int' lvalue Var 0x55b45332cfe0 '_l' 'int'
|       |   |-UnaryOperator 0x55b45332d498 'int' postfix '++'
|       |   | `-DeclRefExpr 0x55b45332d478 'int' lvalue Var 0x55b45332cba8 '_i' 'int'
|       |   `-BinaryOperator 0x55b45332d568 'char' '='
|       |     |-UnaryOperator 0x55b45332d4e8 'char' lvalue prefix '*' cannot overflow
|       |     | `-UnaryOperator 0x55b45332d4d0 'char *' postfix '++'
|       |     |   `-DeclRefExpr 0x55b45332d4b0 'char *' lvalue Var 0x55b45332ca78 '_to' 'char *'
|       |     `-ImplicitCastExpr 0x55b45332d550 'char' <LValueToRValue>
|       |       `-UnaryOperator 0x55b45332d538 'char' lvalue prefix '*' cannot overflow
|       |         `-UnaryOperator 0x55b45332d520 'char *' postfix '++'
|       |           `-DeclRefExpr 0x55b45332d500 'char *' lvalue Var 0x55b45332caf8 '_from' 'char *'
|       |-NullStmt 0x55b45332d600
|       `-CompoundAssignOperator 0x55b45332d660 'int' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|         |-DeclRefExpr 0x55b45332d608 'int' lvalue Var 0x55b45331f7a0 'memcnt' 'int'
|         `-UnaryExprOrTypeTraitExpr 0x55b45332d640 'unsigned long' sizeof 'float'
|-CallExpr 0x55b45332da68 'unsigned long'
| |-ImplicitCastExpr 0x55b45332da50 'unsigned long (*)(const void *, unsigned long, unsigned long, FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332d748 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' Function 0x55b4530e3a40 'fwrite' 'unsigned long (const void *, unsigned long, unsigned long, FILE *)'
| |-ImplicitCastExpr 0x55b45332dac0 'const void *' <BitCast>
| | `-ImplicitCastExpr 0x55b45332daa8 'char *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45332d768 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
| |-UnaryExprOrTypeTraitExpr 0x55b45332d7a0 'unsigned long' sizeof 'float'
| |-ImplicitCastExpr 0x55b45332dad8 'unsigned long' <IntegralCast>
| | `-CStyleCastExpr 0x55b45332d9d8 'unsigned int' <IntegralCast>
| |   `-ParenExpr 0x55b45332d9b8 'unsigned long'
| |     `-BinaryOperator 0x55b45332d960 'unsigned long' '*'
| |       |-ImplicitCastExpr 0x55b45332d948 'unsigned long' <IntegralCast>
| |       | `-BinaryOperator 0x55b45332d8f0 'int' '*'
| |       |   |-ParenExpr 0x55b45332d838 'int'
| |       |   | `-BinaryOperator 0x55b45332d818 'int' '+'
| |       |   |   |-ImplicitCastExpr 0x55b45332d800 'int' <LValueToRValue>
| |       |   |   | `-DeclRefExpr 0x55b45332d7c0 'int' lvalue Var 0x55b45331f5a0 'n2' 'int'
| |       |   |   `-IntegerLiteral 0x55b45332d7e0 'int' 1
| |       |   `-ParenExpr 0x55b45332d8d0 'int'
| |       |     `-BinaryOperator 0x55b45332d8b0 'int' '+'
| |       |       |-ImplicitCastExpr 0x55b45332d898 'int' <LValueToRValue>
| |       |       | `-DeclRefExpr 0x55b45332d858 'int' lvalue Var 0x55b45331f620 'n3' 'int'
| |       |       `-IntegerLiteral 0x55b45332d878 'int' 1
| |       `-UnaryExprOrTypeTraitExpr 0x55b45332d928 'unsigned long' sizeof 'float'
| `-ImplicitCastExpr 0x55b45332daf0 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x55b45332da00 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
|-CallExpr 0x55b45332db78 'void'
| |-ImplicitCastExpr 0x55b45332db60 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332db08 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b45332dbb8 'void *' <BitCast>
|   `-ImplicitCastExpr 0x55b45332dba0 'char *' <LValueToRValue>
|     `-DeclRefExpr 0x55b45332db28 'char *' lvalue Var 0x55b45331f9a8 'mem' 'char *'
|-CallExpr 0x55b45332dc28 'int'
| |-ImplicitCastExpr 0x55b45332dc10 'int (*)(FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332dbd0 'int (FILE *)' Function 0x55b4530d4060 'fclose' 'int (FILE *)'
| `-ImplicitCastExpr 0x55b45332dc50 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x55b45332dbf0 'FILE *' lvalue Var 0x55b45331fa60 'pFile' 'FILE *'
`-ReturnStmt 0x55b45332dc68
BinaryOperator 0x55b45332b8b0 'char *' '='
|-DeclRefExpr 0x55b45332b7d8 'char *' lvalue Var 0x55b45332b4a8 '_from' 'char *'
`-CStyleCastExpr 0x55b45332b888 'char *' <BitCast>
  `-ParenExpr 0x55b45332b868 'float *'
    `-UnaryOperator 0x55b45332b818 'float *' prefix '&' cannot overflow
      `-DeclRefExpr 0x55b45332b7f8 'float' lvalue Var 0x55b45331f870 'dvalue' 'float'
func @bpnn_save(%arg0: !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, %arg1: !llvm.ptr<i8>) attributes {llvm.linkage = #llvm.linkage<external>} {
  %0 = memref.alloca() : memref<1xi32>
  %1 = memref.cast %0 : memref<1xi32> to memref<?xi32>
  %c0 = arith.constant 0 : index
  %2 = llvm.mlir.undef : i32
  memref.store %2, %1[%c0] : memref<?xi32>
  %3 = memref.alloca() : memref<1xi32>
  %4 = memref.cast %3 : memref<1xi32> to memref<?xi32>
  %c0_0 = arith.constant 0 : index
  %5 = llvm.mlir.undef : i32
  memref.store %5, %4[%c0_0] : memref<?xi32>
  %c1_i64 = arith.constant 1 : i64
  %6 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_1 = arith.constant 1 : i64
  %7 = llvm.alloca %c1_i64_1 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c0_2 = arith.constant 0 : index
  %c1_i64_3 = arith.constant 1 : i64
  %8 = llvm.alloca %c1_i64_3 x !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>> : (i64) -> !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
  %c1_i64_4 = arith.constant 1 : i64
  %9 = llvm.alloca %c1_i64_4 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %10 = memref.alloca() : memref<1xmemref<?xmemref<?xf32>>>
  %11 = memref.cast %10 : memref<1xmemref<?xmemref<?xf32>>> to memref<?xmemref<?xmemref<?xf32>>>
  %12 = memref.alloca() : memref<1xf32>
  %13 = memref.cast %12 : memref<1xf32> to memref<?xf32>
  %14 = memref.alloca() : memref<1xi32>
  %15 = memref.cast %14 : memref<1xi32> to memref<?xi32>
  %c0_5 = arith.constant 0 : index
  %16 = llvm.mlir.undef : i32
  memref.store %16, %15[%c0_5] : memref<?xi32>
  %17 = memref.alloca() : memref<1xi32>
  %18 = memref.cast %17 : memref<1xi32> to memref<?xi32>
  %c0_6 = arith.constant 0 : index
  %19 = llvm.mlir.undef : i32
  memref.store %19, %18[%c0_6] : memref<?xi32>
  %20 = memref.alloca() : memref<1xi32>
  %21 = memref.cast %20 : memref<1xi32> to memref<?xi32>
  %c0_7 = arith.constant 0 : index
  %22 = llvm.mlir.undef : i32
  memref.store %22, %21[%c0_7] : memref<?xi32>
  %23 = memref.alloca() : memref<1xi32>
  %24 = memref.cast %23 : memref<1xi32> to memref<?xi32>
  %c0_8 = arith.constant 0 : index
  %25 = llvm.mlir.undef : i32
  memref.store %25, %24[%c0_8] : memref<?xi32>
  %26 = memref.alloca() : memref<1xi32>
  %27 = memref.cast %26 : memref<1xi32> to memref<?xi32>
  %c0_9 = arith.constant 0 : index
  %28 = llvm.mlir.undef : i32
  memref.store %28, %27[%c0_9] : memref<?xi32>
  %29 = memref.alloca() : memref<1xi32>
  %30 = memref.cast %29 : memref<1xi32> to memref<?xi32>
  %c0_10 = arith.constant 0 : index
  %31 = llvm.mlir.undef : i32
  memref.store %31, %30[%c0_10] : memref<?xi32>
  %c1_i64_11 = arith.constant 1 : i64
  %32 = llvm.alloca %c1_i64_11 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_12 = arith.constant 1 : i64
  %33 = llvm.alloca %c1_i64_12 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  llvm.store %arg0, %33 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  llvm.store %arg1, %32 : !llvm.ptr<ptr<i8>>
  %true = arith.constant true
  %34 = memref.alloca() : memref<i1>
  %35 = memref.alloca() : memref<i1>
  memref.store %true, %35[] : memref<i1>
  memref.store %true, %34[] : memref<i1>
  %36 = memref.load %34[] : memref<i1>
  scf.if %36 {
    scf.execute_region {
      %52 = memref.load %34[] : memref<i1>
      scf.if %52 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %37 = memref.load %34[] : memref<i1>
  scf.if %37 {
    scf.execute_region {
      %52 = memref.load %34[] : memref<i1>
      scf.if %52 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %38 = memref.load %34[] : memref<i1>
  scf.if %38 {
    scf.execute_region {
      %52 = memref.load %34[] : memref<i1>
      scf.if %52 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %39 = memref.load %34[] : memref<i1>
  scf.if %39 {
    scf.execute_region {
      %52 = memref.load %34[] : memref<i1>
      scf.if %52 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %40 = memref.load %34[] : memref<i1>
  scf.if %40 {
    scf.execute_region {
      %52 = llvm.load %32 : !llvm.ptr<ptr<i8>>
      %53 = llvm.mlir.addressof @str4 : !llvm.ptr<array<3 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_13 = arith.constant 0 : i32
      %54 = llvm.getelementptr %53[%c0_i32, %c0_i32_13] : (!llvm.ptr<array<3 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %55 = llvm.call @fopen(%52, %54) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>
      llvm.store %55, %8 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      scf.yield
    }
  }
  %41 = memref.load %34[] : memref<i1>
  scf.if %41 {
    scf.execute_region {
      %52 = llvm.load %33 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_13 = arith.constant 0 : i32
      %53 = llvm.getelementptr %52[%c0_i32, %c0_i32_13] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      %54 = llvm.load %53 : !llvm.ptr<i32>
      %c0_14 = arith.constant 0 : index
      memref.store %54, %30[%c0_14] : memref<?xi32>
      scf.yield
    }
  }
  %42 = memref.load %34[] : memref<i1>
  scf.if %42 {
    scf.execute_region {
      %52 = llvm.load %33 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c1_i32 = arith.constant 1 : i32
      %53 = llvm.getelementptr %52[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      %54 = llvm.load %53 : !llvm.ptr<i32>
      %c0_13 = arith.constant 0 : index
      memref.store %54, %27[%c0_13] : memref<?xi32>
      scf.yield
    }
  }
  %43 = memref.load %34[] : memref<i1>
  scf.if %43 {
    scf.execute_region {
      %52 = llvm.load %33 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %53 = llvm.getelementptr %52[%c0_i32, %c2_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      %54 = llvm.load %53 : !llvm.ptr<i32>
      %c0_13 = arith.constant 0 : index
      memref.store %54, %24[%c0_13] : memref<?xi32>
      scf.yield
    }
  }
  %44 = memref.load %34[] : memref<i1>
  scf.if %44 {
    scf.execute_region {
      %52 = llvm.mlir.addressof @str5 : !llvm.ptr<array<33 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_13 = arith.constant 0 : i32
      %53 = llvm.getelementptr %52[%c0_i32, %c0_i32_13] : (!llvm.ptr<array<33 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %c0_14 = arith.constant 0 : index
      %54 = memref.load %30[%c0_14] : memref<?xi32>
      %c0_15 = arith.constant 0 : index
      %55 = memref.load %27[%c0_15] : memref<?xi32>
      %c0_16 = arith.constant 0 : index
      %56 = memref.load %24[%c0_16] : memref<?xi32>
      %57 = llvm.load %32 : !llvm.ptr<ptr<i8>>
      %58 = llvm.call @printf(%53, %54, %55, %56, %57) : (!llvm.ptr<i8>, i32, i32, i32, !llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %45 = memref.load %34[] : memref<i1>
  scf.if %45 {
    scf.execute_region {
      %52 = memref.cast %30 : memref<?xi32> to memref<?xi32>
      %53 = memref.cast %52 : memref<?xi32> to memref<?xi8>
      %54 = memref.cast %53 : memref<?xi8> to memref<?xi8>
      %55 = "polygeist.memref2pointer"(%54) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c1_i64_13 = arith.constant 1 : i64
      %c1_i64_14 = arith.constant 1 : i64
      %56 = llvm.load %8 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %57 = llvm.call @fwrite(%55, %c1_i64_13, %c1_i64_14, %56) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %46 = memref.load %34[] : memref<i1>
  scf.if %46 {
    scf.execute_region {
      %52 = memref.cast %27 : memref<?xi32> to memref<?xi32>
      %53 = memref.cast %52 : memref<?xi32> to memref<?xi8>
      %54 = memref.cast %53 : memref<?xi8> to memref<?xi8>
      %55 = "polygeist.memref2pointer"(%54) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c1_i64_13 = arith.constant 1 : i64
      %c1_i64_14 = arith.constant 1 : i64
      %56 = llvm.load %8 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %57 = llvm.call @fwrite(%55, %c1_i64_13, %c1_i64_14, %56) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %47 = memref.load %34[] : memref<i1>
  scf.if %47 {
    scf.execute_region {
      %52 = memref.cast %24 : memref<?xi32> to memref<?xi32>
      %53 = memref.cast %52 : memref<?xi32> to memref<?xi8>
      %54 = memref.cast %53 : memref<?xi8> to memref<?xi8>
      %55 = "polygeist.memref2pointer"(%54) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c1_i64_13 = arith.constant 1 : i64
      %c1_i64_14 = arith.constant 1 : i64
      %56 = llvm.load %8 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %57 = llvm.call @fwrite(%55, %c1_i64_13, %c1_i64_14, %56) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %48 = memref.load %34[] : memref<i1>
  scf.if %48 {
    scf.execute_region {
      %c0_i32 = arith.constant 0 : i32
      %c0_13 = arith.constant 0 : index
      memref.store %c0_i32, %15[%c0_13] : memref<?xi32>
      scf.yield
    }
  }
  %49 = memref.load %34[] : memref<i1>
  scf.if %49 {
    scf.execute_region {
      %52 = llvm.load %33 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c9_i32 = arith.constant 9 : i32
      %53 = llvm.getelementptr %52[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %54 = llvm.load %53 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %c0_13 = arith.constant 0 : index
      memref.store %54, %11[%c0_13] : memref<?xmemref<?xmemref<?xf32>>>
      scf.yield
    }
  }
  %50 = memref.load %34[] : memref<i1>
  scf.if %50 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %52 = memref.load %30[%c0_13] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %53 = arith.addi %52, %c1_i32 : i32
      %c0_14 = arith.constant 0 : index
      %54 = memref.load %27[%c0_14] : memref<?xi32>
      %c1_i32_15 = arith.constant 1 : i32
      %55 = arith.addi %54, %c1_i32_15 : i32
      %56 = arith.muli %53, %55 : i32
      %57 = arith.extui %56 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %58 = arith.muli %57, %c4_i64 : i64
      %59 = arith.trunci %58 : i64 to i32
      %60 = arith.extui %59 : i32 to i64
      %61 = llvm.call @malloc(%60) : (i64) -> !llvm.ptr<i8>
      %62 = llvm.bitcast %61 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %62, %9 : !llvm.ptr<ptr<i8>>
      scf.yield
    }
  }
  %51 = memref.load %34[] : memref<i1>
  scf.if %51 {
    scf.execute_region {
      %52 = memref.load %34[] : memref<i1>
      scf.if %52 {
        scf.execute_region {
          %c0_i32 = arith.constant 0 : i32
          %c0_13 = arith.constant 0 : index
          memref.store %c0_i32, %21[%c0_13] : memref<?xi32>
          %true_14 = arith.constant true
          %53 = memref.alloca() : memref<i1>
          %54 = memref.alloca() : memref<i1>
          memref.store %true_14, %54[] : memref<i1>
          br ^bb1
        ^bb1:  // pred: ^bb0
          %c0_15 = arith.constant 0 : index
          %55 = memref.load %21[%c0_15] : memref<?xi32>
          %c0_16 = arith.constant 0 : index
          %56 = memref.load %30[%c0_16] : memref<?xi32>
          %57 = arith.cmpi sle, %55, %56 : i32
          %58 = arith.extsi %57 : i1 to i32
          %59 = arith.trunci %58 : i32 to i1
          %60 = memref.load %54[] : memref<i1>
          %61 = arith.andi %59, %60 : i1
          cond_br %61, ^bb2, ^bb3
        ^bb2:  // pred: ^bb1
          %62 = memref.load %54[] : memref<i1>
          memref.store %62, %53[] : memref<i1>
          %63 = memref.load %53[] : memref<i1>
          scf.if %63 {
            scf.execute_region {
              %64 = memref.load %53[] : memref<i1>
              scf.if %64 {
                scf.execute_region {
                  %c0_i32_17 = arith.constant 0 : i32
                  %c0_18 = arith.constant 0 : index
                  memref.store %c0_i32_17, %18[%c0_18] : memref<?xi32>
                  %true_19 = arith.constant true
                  %65 = memref.alloca() : memref<i1>
                  %66 = memref.alloca() : memref<i1>
                  memref.store %true_19, %66[] : memref<i1>
                  br ^bb1
                ^bb1:  // pred: ^bb0
                  %c0_20 = arith.constant 0 : index
                  %67 = memref.load %18[%c0_20] : memref<?xi32>
                  %c0_21 = arith.constant 0 : index
                  %68 = memref.load %27[%c0_21] : memref<?xi32>
                  %69 = arith.cmpi sle, %67, %68 : i32
                  %70 = arith.extsi %69 : i1 to i32
                  %71 = arith.trunci %70 : i32 to i1
                  %72 = memref.load %66[] : memref<i1>
                  %73 = arith.andi %71, %72 : i1
                  cond_br %73, ^bb2, ^bb3
                ^bb2:  // pred: ^bb1
                  %74 = memref.load %66[] : memref<i1>
                  memref.store %74, %65[] : memref<i1>
                  %75 = memref.load %65[] : memref<i1>
                  scf.if %75 {
                    scf.execute_region {
                      %c0_22 = arith.constant 0 : index
                      %77 = memref.load %11[%c0_22] : memref<?xmemref<?xmemref<?xf32>>>
                      %c0_23 = arith.constant 0 : index
                      %78 = memref.load %21[%c0_23] : memref<?xi32>
                      %79 = arith.index_cast %78 : i32 to index
                      %80 = "polygeist.subindex"(%77, %79) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                      %81 = "polygeist.subindex"(%80, %c0_2) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                      %c0_24 = arith.constant 0 : index
                      %82 = memref.load %81[%c0_24] : memref<?xmemref<?xf32>>
                      %c0_25 = arith.constant 0 : index
                      %83 = memref.load %18[%c0_25] : memref<?xi32>
                      %84 = arith.index_cast %83 : i32 to index
                      %85 = "polygeist.subindex"(%82, %84) : (memref<?xf32>, index) -> memref<?xf32>
                      %86 = "polygeist.subindex"(%85, %c0_2) : (memref<?xf32>, index) -> memref<?xf32>
                      %c0_26 = arith.constant 0 : index
                      %87 = memref.load %86[%c0_26] : memref<?xf32>
                      %c0_27 = arith.constant 0 : index
                      memref.store %87, %13[%c0_27] : memref<?xf32>
                      scf.yield
                    }
                  }
                  %76 = memref.load %65[] : memref<i1>
                  scf.if %76 {
                    scf.execute_region {
                      %77 = memref.load %65[] : memref<i1>
                      scf.if %77 {
                        scf.execute_region {
                          %81 = memref.load %65[] : memref<i1>
                          scf.if %81 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %78 = memref.load %65[] : memref<i1>
                      scf.if %78 {
                        scf.execute_region {
                          %81 = memref.load %65[] : memref<i1>
                          scf.if %81 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %79 = memref.load %65[] : memref<i1>
                      scf.if %79 {
                        scf.execute_region {
                          %81 = llvm.load %9 : !llvm.ptr<ptr<i8>>
                          %c0_22 = arith.constant 0 : index
                          %82 = memref.load %15[%c0_22] : memref<?xi32>
                          %83 = arith.index_cast %82 : i32 to index
                          %84 = arith.index_cast %83 : index to i64
                          %85 = llvm.getelementptr %81[%84] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                          llvm.store %85, %7 : !llvm.ptr<ptr<i8>>
                          scf.yield
                        }
                      }
                      %80 = memref.load %65[] : memref<i1>
                      scf.if %80 {
                        scf.execute_region {
                          %81 = memref.cast %13 : memref<?xf32> to memref<?xf32>
                          %82 = memref.cast %81 : memref<?xf32> to memref<?xi8>
                        }
                      }
                    }
                  }
                ^bb3:  // pred: ^bb1
                }
              }
            }
          }
        ^bb3:  // pred: ^bb1
        }
      }
    }
  }
}
 lhs.val: %6 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
 tostore: %82 = memref.cast %81 : memref<?xf32> to memref<?xi8>
BinaryOperator 0x55b45332d2b8 'char *' '='
|-DeclRefExpr 0x55b45332d1e0 'char *' lvalue Var 0x55b45332caf8 '_from' 'char *'
`-CStyleCastExpr 0x55b45332d290 'char *' <BitCast>
  `-ParenExpr 0x55b45332d270 'float *'
    `-UnaryOperator 0x55b45332d220 'float *' prefix '&' cannot overflow
      `-DeclRefExpr 0x55b45332d200 'float' lvalue Var 0x55b45331f870 'dvalue' 'float'
func @bpnn_save(%arg0: !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, %arg1: !llvm.ptr<i8>) attributes {llvm.linkage = #llvm.linkage<external>} {
  %0 = memref.alloca() : memref<1xi32>
  %1 = memref.cast %0 : memref<1xi32> to memref<?xi32>
  %c0 = arith.constant 0 : index
  %2 = llvm.mlir.undef : i32
  memref.store %2, %1[%c0] : memref<?xi32>
  %3 = memref.alloca() : memref<1xi32>
  %4 = memref.cast %3 : memref<1xi32> to memref<?xi32>
  %c0_0 = arith.constant 0 : index
  %5 = llvm.mlir.undef : i32
  memref.store %5, %4[%c0_0] : memref<?xi32>
  %c1_i64 = arith.constant 1 : i64
  %6 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_1 = arith.constant 1 : i64
  %7 = llvm.alloca %c1_i64_1 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %8 = memref.alloca() : memref<1xi32>
  %9 = memref.cast %8 : memref<1xi32> to memref<?xi32>
  %c0_2 = arith.constant 0 : index
  %10 = llvm.mlir.undef : i32
  memref.store %10, %9[%c0_2] : memref<?xi32>
  %11 = memref.alloca() : memref<1xi32>
  %12 = memref.cast %11 : memref<1xi32> to memref<?xi32>
  %c0_3 = arith.constant 0 : index
  %13 = llvm.mlir.undef : i32
  memref.store %13, %12[%c0_3] : memref<?xi32>
  %c1_i64_4 = arith.constant 1 : i64
  %14 = llvm.alloca %c1_i64_4 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_5 = arith.constant 1 : i64
  %15 = llvm.alloca %c1_i64_5 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c0_6 = arith.constant 0 : index
  %c1_i64_7 = arith.constant 1 : i64
  %16 = llvm.alloca %c1_i64_7 x !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>> : (i64) -> !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
  %c1_i64_8 = arith.constant 1 : i64
  %17 = llvm.alloca %c1_i64_8 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %18 = memref.alloca() : memref<1xmemref<?xmemref<?xf32>>>
  %19 = memref.cast %18 : memref<1xmemref<?xmemref<?xf32>>> to memref<?xmemref<?xmemref<?xf32>>>
  %20 = memref.alloca() : memref<1xf32>
  %21 = memref.cast %20 : memref<1xf32> to memref<?xf32>
  %22 = memref.alloca() : memref<1xi32>
  %23 = memref.cast %22 : memref<1xi32> to memref<?xi32>
  %c0_9 = arith.constant 0 : index
  %24 = llvm.mlir.undef : i32
  memref.store %24, %23[%c0_9] : memref<?xi32>
  %25 = memref.alloca() : memref<1xi32>
  %26 = memref.cast %25 : memref<1xi32> to memref<?xi32>
  %c0_10 = arith.constant 0 : index
  %27 = llvm.mlir.undef : i32
  memref.store %27, %26[%c0_10] : memref<?xi32>
  %28 = memref.alloca() : memref<1xi32>
  %29 = memref.cast %28 : memref<1xi32> to memref<?xi32>
  %c0_11 = arith.constant 0 : index
  %30 = llvm.mlir.undef : i32
  memref.store %30, %29[%c0_11] : memref<?xi32>
  %31 = memref.alloca() : memref<1xi32>
  %32 = memref.cast %31 : memref<1xi32> to memref<?xi32>
  %c0_12 = arith.constant 0 : index
  %33 = llvm.mlir.undef : i32
  memref.store %33, %32[%c0_12] : memref<?xi32>
  %34 = memref.alloca() : memref<1xi32>
  %35 = memref.cast %34 : memref<1xi32> to memref<?xi32>
  %c0_13 = arith.constant 0 : index
  %36 = llvm.mlir.undef : i32
  memref.store %36, %35[%c0_13] : memref<?xi32>
  %37 = memref.alloca() : memref<1xi32>
  %38 = memref.cast %37 : memref<1xi32> to memref<?xi32>
  %c0_14 = arith.constant 0 : index
  %39 = llvm.mlir.undef : i32
  memref.store %39, %38[%c0_14] : memref<?xi32>
  %c1_i64_15 = arith.constant 1 : i64
  %40 = llvm.alloca %c1_i64_15 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_16 = arith.constant 1 : i64
  %41 = llvm.alloca %c1_i64_16 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  llvm.store %arg0, %41 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  llvm.store %arg1, %40 : !llvm.ptr<ptr<i8>>
  %true = arith.constant true
  %42 = memref.alloca() : memref<i1>
  %43 = memref.alloca() : memref<i1>
  memref.store %true, %43[] : memref<i1>
  memref.store %true, %42[] : memref<i1>
  %44 = memref.load %42[] : memref<i1>
  scf.if %44 {
    scf.execute_region {
      %66 = memref.load %42[] : memref<i1>
      scf.if %66 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %45 = memref.load %42[] : memref<i1>
  scf.if %45 {
    scf.execute_region {
      %66 = memref.load %42[] : memref<i1>
      scf.if %66 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %46 = memref.load %42[] : memref<i1>
  scf.if %46 {
    scf.execute_region {
      %66 = memref.load %42[] : memref<i1>
      scf.if %66 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %47 = memref.load %42[] : memref<i1>
  scf.if %47 {
    scf.execute_region {
      %66 = memref.load %42[] : memref<i1>
      scf.if %66 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %48 = memref.load %42[] : memref<i1>
  scf.if %48 {
    scf.execute_region {
      %66 = llvm.load %40 : !llvm.ptr<ptr<i8>>
      %67 = llvm.mlir.addressof @str4 : !llvm.ptr<array<3 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %68 = llvm.getelementptr %67[%c0_i32, %c0_i32_17] : (!llvm.ptr<array<3 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %69 = llvm.call @fopen(%66, %68) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>
      llvm.store %69, %16 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      scf.yield
    }
  }
  %49 = memref.load %42[] : memref<i1>
  scf.if %49 {
    scf.execute_region {
      %66 = llvm.load %41 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %67 = llvm.getelementptr %66[%c0_i32, %c0_i32_17] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      %68 = llvm.load %67 : !llvm.ptr<i32>
      %c0_18 = arith.constant 0 : index
      memref.store %68, %38[%c0_18] : memref<?xi32>
      scf.yield
    }
  }
  %50 = memref.load %42[] : memref<i1>
  scf.if %50 {
    scf.execute_region {
      %66 = llvm.load %41 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c1_i32 = arith.constant 1 : i32
      %67 = llvm.getelementptr %66[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      %68 = llvm.load %67 : !llvm.ptr<i32>
      %c0_17 = arith.constant 0 : index
      memref.store %68, %35[%c0_17] : memref<?xi32>
      scf.yield
    }
  }
  %51 = memref.load %42[] : memref<i1>
  scf.if %51 {
    scf.execute_region {
      %66 = llvm.load %41 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c2_i32 = arith.constant 2 : i32
      %67 = llvm.getelementptr %66[%c0_i32, %c2_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      %68 = llvm.load %67 : !llvm.ptr<i32>
      %c0_17 = arith.constant 0 : index
      memref.store %68, %32[%c0_17] : memref<?xi32>
      scf.yield
    }
  }
  %52 = memref.load %42[] : memref<i1>
  scf.if %52 {
    scf.execute_region {
      %66 = llvm.mlir.addressof @str5 : !llvm.ptr<array<33 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %67 = llvm.getelementptr %66[%c0_i32, %c0_i32_17] : (!llvm.ptr<array<33 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %c0_18 = arith.constant 0 : index
      %68 = memref.load %38[%c0_18] : memref<?xi32>
      %c0_19 = arith.constant 0 : index
      %69 = memref.load %35[%c0_19] : memref<?xi32>
      %c0_20 = arith.constant 0 : index
      %70 = memref.load %32[%c0_20] : memref<?xi32>
      %71 = llvm.load %40 : !llvm.ptr<ptr<i8>>
      %72 = llvm.call @printf(%67, %68, %69, %70, %71) : (!llvm.ptr<i8>, i32, i32, i32, !llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %53 = memref.load %42[] : memref<i1>
  scf.if %53 {
    scf.execute_region {
      %66 = memref.cast %38 : memref<?xi32> to memref<?xi32>
      %67 = memref.cast %66 : memref<?xi32> to memref<?xi8>
      %68 = memref.cast %67 : memref<?xi8> to memref<?xi8>
      %69 = "polygeist.memref2pointer"(%68) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c1_i64_17 = arith.constant 1 : i64
      %c1_i64_18 = arith.constant 1 : i64
      %70 = llvm.load %16 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %71 = llvm.call @fwrite(%69, %c1_i64_17, %c1_i64_18, %70) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %54 = memref.load %42[] : memref<i1>
  scf.if %54 {
    scf.execute_region {
      %66 = memref.cast %35 : memref<?xi32> to memref<?xi32>
      %67 = memref.cast %66 : memref<?xi32> to memref<?xi8>
      %68 = memref.cast %67 : memref<?xi8> to memref<?xi8>
      %69 = "polygeist.memref2pointer"(%68) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c1_i64_17 = arith.constant 1 : i64
      %c1_i64_18 = arith.constant 1 : i64
      %70 = llvm.load %16 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %71 = llvm.call @fwrite(%69, %c1_i64_17, %c1_i64_18, %70) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %55 = memref.load %42[] : memref<i1>
  scf.if %55 {
    scf.execute_region {
      %66 = memref.cast %32 : memref<?xi32> to memref<?xi32>
      %67 = memref.cast %66 : memref<?xi32> to memref<?xi8>
      %68 = memref.cast %67 : memref<?xi8> to memref<?xi8>
      %69 = "polygeist.memref2pointer"(%68) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c1_i64_17 = arith.constant 1 : i64
      %c1_i64_18 = arith.constant 1 : i64
      %70 = llvm.load %16 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %71 = llvm.call @fwrite(%69, %c1_i64_17, %c1_i64_18, %70) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %56 = memref.load %42[] : memref<i1>
  scf.if %56 {
    scf.execute_region {
      %c0_i32 = arith.constant 0 : i32
      %c0_17 = arith.constant 0 : index
      memref.store %c0_i32, %23[%c0_17] : memref<?xi32>
      scf.yield
    }
  }
  %57 = memref.load %42[] : memref<i1>
  scf.if %57 {
    scf.execute_region {
      %66 = llvm.load %41 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c9_i32 = arith.constant 9 : i32
      %67 = llvm.getelementptr %66[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %68 = llvm.load %67 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %c0_17 = arith.constant 0 : index
      memref.store %68, %19[%c0_17] : memref<?xmemref<?xmemref<?xf32>>>
      scf.yield
    }
  }
  %58 = memref.load %42[] : memref<i1>
  scf.if %58 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %66 = memref.load %38[%c0_17] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %67 = arith.addi %66, %c1_i32 : i32
      %c0_18 = arith.constant 0 : index
      %68 = memref.load %35[%c0_18] : memref<?xi32>
      %c1_i32_19 = arith.constant 1 : i32
      %69 = arith.addi %68, %c1_i32_19 : i32
      %70 = arith.muli %67, %69 : i32
      %71 = arith.extui %70 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %72 = arith.muli %71, %c4_i64 : i64
      %73 = arith.trunci %72 : i64 to i32
      %74 = arith.extui %73 : i32 to i64
      %75 = llvm.call @malloc(%74) : (i64) -> !llvm.ptr<i8>
      %76 = llvm.bitcast %75 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %76, %17 : !llvm.ptr<ptr<i8>>
      scf.yield
    }
  }
  %59 = memref.load %42[] : memref<i1>
  scf.if %59 {
    scf.execute_region {
      %66 = memref.load %42[] : memref<i1>
      scf.if %66 {
        scf.execute_region {
          %c0_i32 = arith.constant 0 : i32
          %c0_17 = arith.constant 0 : index
          memref.store %c0_i32, %29[%c0_17] : memref<?xi32>
          %true_18 = arith.constant true
          %67 = memref.alloca() : memref<i1>
          %68 = memref.alloca() : memref<i1>
          memref.store %true_18, %68[] : memref<i1>
          br ^bb1
        ^bb1:  // 2 preds: ^bb0, ^bb2
          %c0_19 = arith.constant 0 : index
          %69 = memref.load %29[%c0_19] : memref<?xi32>
          %c0_20 = arith.constant 0 : index
          %70 = memref.load %38[%c0_20] : memref<?xi32>
          %71 = arith.cmpi sle, %69, %70 : i32
          %72 = arith.extsi %71 : i1 to i32
          %73 = arith.trunci %72 : i32 to i1
          %74 = memref.load %68[] : memref<i1>
          %75 = arith.andi %73, %74 : i1
          cond_br %75, ^bb2, ^bb3
        ^bb2:  // pred: ^bb1
          %76 = memref.load %68[] : memref<i1>
          memref.store %76, %67[] : memref<i1>
          %77 = memref.load %67[] : memref<i1>
          scf.if %77 {
            scf.execute_region {
              %80 = memref.load %67[] : memref<i1>
              scf.if %80 {
                scf.execute_region {
                  %c0_i32_23 = arith.constant 0 : i32
                  %c0_24 = arith.constant 0 : index
                  memref.store %c0_i32_23, %26[%c0_24] : memref<?xi32>
                  %true_25 = arith.constant true
                  %81 = memref.alloca() : memref<i1>
                  %82 = memref.alloca() : memref<i1>
                  memref.store %true_25, %82[] : memref<i1>
                  br ^bb1
                ^bb1:  // 2 preds: ^bb0, ^bb2
                  %c0_26 = arith.constant 0 : index
                  %83 = memref.load %26[%c0_26] : memref<?xi32>
                  %c0_27 = arith.constant 0 : index
                  %84 = memref.load %35[%c0_27] : memref<?xi32>
                  %85 = arith.cmpi sle, %83, %84 : i32
                  %86 = arith.extsi %85 : i1 to i32
                  %87 = arith.trunci %86 : i32 to i1
                  %88 = memref.load %82[] : memref<i1>
                  %89 = arith.andi %87, %88 : i1
                  cond_br %89, ^bb2, ^bb3
                ^bb2:  // pred: ^bb1
                  %90 = memref.load %82[] : memref<i1>
                  memref.store %90, %81[] : memref<i1>
                  %91 = memref.load %81[] : memref<i1>
                  scf.if %91 {
                    scf.execute_region {
                      %c0_31 = arith.constant 0 : index
                      %97 = memref.load %19[%c0_31] : memref<?xmemref<?xmemref<?xf32>>>
                      %c0_32 = arith.constant 0 : index
                      %98 = memref.load %29[%c0_32] : memref<?xi32>
                      %99 = arith.index_cast %98 : i32 to index
                      %100 = "polygeist.subindex"(%97, %99) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                      %101 = "polygeist.subindex"(%100, %c0_6) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                      %c0_33 = arith.constant 0 : index
                      %102 = memref.load %101[%c0_33] : memref<?xmemref<?xf32>>
                      %c0_34 = arith.constant 0 : index
                      %103 = memref.load %26[%c0_34] : memref<?xi32>
                      %104 = arith.index_cast %103 : i32 to index
                      %105 = "polygeist.subindex"(%102, %104) : (memref<?xf32>, index) -> memref<?xf32>
                      %106 = "polygeist.subindex"(%105, %c0_6) : (memref<?xf32>, index) -> memref<?xf32>
                      %c0_35 = arith.constant 0 : index
                      %107 = memref.load %106[%c0_35] : memref<?xf32>
                      %c0_36 = arith.constant 0 : index
                      memref.store %107, %21[%c0_36] : memref<?xf32>
                      scf.yield
                    }
                  }
                  %92 = memref.load %81[] : memref<i1>
                  scf.if %92 {
                    scf.execute_region {
                      %97 = memref.load %81[] : memref<i1>
                      scf.if %97 {
                        scf.execute_region {
                          %103 = memref.load %81[] : memref<i1>
                          scf.if %103 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %98 = memref.load %81[] : memref<i1>
                      scf.if %98 {
                        scf.execute_region {
                          %103 = memref.load %81[] : memref<i1>
                          scf.if %103 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %99 = memref.load %81[] : memref<i1>
                      scf.if %99 {
                        scf.execute_region {
                          %103 = llvm.load %17 : !llvm.ptr<ptr<i8>>
                          %c0_31 = arith.constant 0 : index
                          %104 = memref.load %23[%c0_31] : memref<?xi32>
                          %105 = arith.index_cast %104 : i32 to index
                          %106 = arith.index_cast %105 : index to i64
                          %107 = llvm.getelementptr %103[%106] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                          llvm.store %107, %15 : !llvm.ptr<ptr<i8>>
                          scf.yield
                        }
                      }
                      %100 = memref.load %81[] : memref<i1>
                      scf.if %100 {
                        scf.execute_region {
                          %103 = memref.cast %21 : memref<?xf32> to memref<?xf32>
                          %104 = memref.cast %103 : memref<?xf32> to memref<?xi8>
                          %105 = "polygeist.memref2pointer"(%104) : (memref<?xi8>) -> !llvm.ptr<i8>
                          scf.yield
                        }
                      }
                      %101 = memref.load %81[] : memref<i1>
                      scf.if %101 {
                        scf.execute_region {
                          %c4_i64 = arith.constant 4 : i64
                          %c4_i32 = arith.constant 4 : i32
                          %c0_31 = arith.constant 0 : index
                          memref.store %c4_i32, %9[%c0_31] : memref<?xi32>
                          scf.yield
                        }
                      }
                      %102 = memref.load %81[] : memref<i1>
                      scf.if %102 {
                        scf.execute_region {
                          %103 = memref.load %81[] : memref<i1>
                          scf.if %103 {
                            scf.execute_region {
                              %c0_i32_31 = arith.constant 0 : i32
                              %c0_32 = arith.constant 0 : index
                              memref.store %c0_i32_31, %12[%c0_32] : memref<?xi32>
                              %true_33 = arith.constant true
                              %104 = memref.alloca() : memref<i1>
                              %105 = memref.alloca() : memref<i1>
                              memref.store %true_33, %105[] : memref<i1>
                              br ^bb1
                            ^bb1:  // 2 preds: ^bb0, ^bb2
                              %c0_34 = arith.constant 0 : index
                              %106 = memref.load %12[%c0_34] : memref<?xi32>
                              %c0_35 = arith.constant 0 : index
                              %107 = memref.load %9[%c0_35] : memref<?xi32>
                              %108 = arith.cmpi slt, %106, %107 : i32
                              %109 = arith.extsi %108 : i1 to i32
                              %110 = arith.trunci %109 : i32 to i1
                              %111 = memref.load %105[] : memref<i1>
                              %112 = arith.andi %110, %111 : i1
                              cond_br %112, ^bb2, ^bb3
                            ^bb2:  // pred: ^bb1
                              %113 = memref.load %105[] : memref<i1>
                              memref.store %113, %104[] : memref<i1>
                              %114 = llvm.load %15 : !llvm.ptr<ptr<i8>>
                              %c1_i64_36 = arith.constant 1 : i64
                              %115 = llvm.getelementptr %114[%c1_i64_36] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                              llvm.store %115, %15 : !llvm.ptr<ptr<i8>>
                              %116 = llvm.load %14 : !llvm.ptr<ptr<i8>>
                              %c1_i64_37 = arith.constant 1 : i64
                              %117 = llvm.getelementptr %116[%c1_i64_37] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                              llvm.store %117, %14 : !llvm.ptr<ptr<i8>>
                              %118 = llvm.load %116 : !llvm.ptr<i8>
                              llvm.store %118, %114 : !llvm.ptr<i8>
                              %c0_38 = arith.constant 0 : index
                              %119 = memref.load %12[%c0_38] : memref<?xi32>
                              %c1_i32_39 = arith.constant 1 : i32
                              %120 = arith.addi %119, %c1_i32_39 : i32
                              %c0_40 = arith.constant 0 : index
                              memref.store %120, %12[%c0_40] : memref<?xi32>
                              br ^bb1
                            ^bb3:  // pred: ^bb1
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      scf.yield
                    }
                  }
                  %93 = memref.load %81[] : memref<i1>
                  scf.if %93 {
                    scf.execute_region {
                      scf.yield
                    }
                  }
                  %94 = memref.load %81[] : memref<i1>
                  scf.if %94 {
                    scf.execute_region {
                      %c4_i64 = arith.constant 4 : i64
                      %c0_31 = arith.constant 0 : index
                      %97 = memref.load %23[%c0_31] : memref<?xi32>
                      %98 = arith.addi %97, %c4_i64 : i32
                      %c0_32 = arith.constant 0 : index
                      memref.store %98, %23[%c0_32] : memref<?xi32>
                      scf.yield
                    }
                  }
                  %c0_28 = arith.constant 0 : index
                  %95 = memref.load %26[%c0_28] : memref<?xi32>
                  %c1_i32_29 = arith.constant 1 : i32
                  %96 = arith.addi %95, %c1_i32_29 : i32
                  %c0_30 = arith.constant 0 : index
                  memref.store %96, %26[%c0_30] : memref<?xi32>
                  br ^bb1
                ^bb3:  // pred: ^bb1
                  scf.yield
                }
              }
              scf.yield
            }
          }
          %c0_21 = arith.constant 0 : index
          %78 = memref.load %29[%c0_21] : memref<?xi32>
          %c1_i32 = arith.constant 1 : i32
          %79 = arith.addi %78, %c1_i32 : i32
          %c0_22 = arith.constant 0 : index
          memref.store %79, %29[%c0_22] : memref<?xi32>
          br ^bb1
        ^bb3:  // pred: ^bb1
          scf.yield
        }
      }
      scf.yield
    }
  }
  %60 = memref.load %42[] : memref<i1>
  scf.if %60 {
    scf.execute_region {
      %66 = llvm.load %17 : !llvm.ptr<ptr<i8>>
      %67 = llvm.bitcast %66 : !llvm.ptr<i8> to !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %c4_i32 = arith.constant 4 : i32
      %c4_i64_17 = arith.constant 4 : i64
      %c0_18 = arith.constant 0 : index
      %68 = memref.load %38[%c0_18] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %69 = arith.addi %68, %c1_i32 : i32
      %c0_19 = arith.constant 0 : index
      %70 = memref.load %35[%c0_19] : memref<?xi32>
      %c1_i32_20 = arith.constant 1 : i32
      %71 = arith.addi %70, %c1_i32_20 : i32
      %72 = arith.muli %69, %71 : i32
      %73 = arith.extui %72 : i32 to i64
      %c4_i64_21 = arith.constant 4 : i64
      %74 = arith.muli %73, %c4_i64_21 : i64
      %75 = arith.trunci %74 : i64 to i32
      %76 = arith.extui %75 : i32 to i64
      %77 = llvm.load %16 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
      %78 = llvm.call @fwrite(%67, %c4_i64_17, %76, %77) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
      scf.yield
    }
  }
  %61 = memref.load %42[] : memref<i1>
  scf.if %61 {
    scf.execute_region {
      %66 = llvm.load %17 : !llvm.ptr<ptr<i8>>
      %67 = llvm.bitcast %66 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.call @free(%67) : (!llvm.ptr<i8>) -> ()
      scf.yield
    }
  }
  %62 = memref.load %42[] : memref<i1>
  scf.if %62 {
    scf.execute_region {
      %c0_i32 = arith.constant 0 : i32
      %c0_17 = arith.constant 0 : index
      memref.store %c0_i32, %23[%c0_17] : memref<?xi32>
      scf.yield
    }
  }
  %63 = memref.load %42[] : memref<i1>
  scf.if %63 {
    scf.execute_region {
      %66 = llvm.load %41 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %c0_i32 = arith.constant 0 : i32
      %c10_i32 = arith.constant 10 : i32
      %67 = llvm.getelementptr %66[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %68 = llvm.load %67 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %c0_17 = arith.constant 0 : index
      memref.store %68, %19[%c0_17] : memref<?xmemref<?xmemref<?xf32>>>
      scf.yield
    }
  }
  %64 = memref.load %42[] : memref<i1>
  scf.if %64 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %66 = memref.load %35[%c0_17] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %67 = arith.addi %66, %c1_i32 : i32
      %c0_18 = arith.constant 0 : index
      %68 = memref.load %32[%c0_18] : memref<?xi32>
      %c1_i32_19 = arith.constant 1 : i32
      %69 = arith.addi %68, %c1_i32_19 : i32
      %70 = arith.muli %67, %69 : i32
      %71 = arith.extui %70 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %72 = arith.muli %71, %c4_i64 : i64
      %73 = arith.trunci %72 : i64 to i32
      %74 = arith.extui %73 : i32 to i64
      %75 = llvm.call @malloc(%74) : (i64) -> !llvm.ptr<i8>
      %76 = llvm.bitcast %75 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %76, %17 : !llvm.ptr<ptr<i8>>
      scf.yield
    }
  }
  %65 = memref.load %42[] : memref<i1>
  scf.if %65 {
    scf.execute_region {
      %66 = memref.load %42[] : memref<i1>
      scf.if %66 {
        scf.execute_region {
          %c0_i32 = arith.constant 0 : i32
          %c0_17 = arith.constant 0 : index
          memref.store %c0_i32, %29[%c0_17] : memref<?xi32>
          %true_18 = arith.constant true
          %67 = memref.alloca() : memref<i1>
          %68 = memref.alloca() : memref<i1>
          memref.store %true_18, %68[] : memref<i1>
          br ^bb1
        ^bb1:  // pred: ^bb0
          %c0_19 = arith.constant 0 : index
          %69 = memref.load %29[%c0_19] : memref<?xi32>
          %c0_20 = arith.constant 0 : index
          %70 = memref.load %35[%c0_20] : memref<?xi32>
          %71 = arith.cmpi sle, %69, %70 : i32
          %72 = arith.extsi %71 : i1 to i32
          %73 = arith.trunci %72 : i32 to i1
          %74 = memref.load %68[] : memref<i1>
          %75 = arith.andi %73, %74 : i1
          cond_br %75, ^bb2, ^bb3
        ^bb2:  // pred: ^bb1
          %76 = memref.load %68[] : memref<i1>
          memref.store %76, %67[] : memref<i1>
          %77 = memref.load %67[] : memref<i1>
          scf.if %77 {
            scf.execute_region {
              %78 = memref.load %67[] : memref<i1>
              scf.if %78 {
                scf.execute_region {
                  %c0_i32_21 = arith.constant 0 : i32
                  %c0_22 = arith.constant 0 : index
                  memref.store %c0_i32_21, %26[%c0_22] : memref<?xi32>
                  %true_23 = arith.constant true
                  %79 = memref.alloca() : memref<i1>
                  %80 = memref.alloca() : memref<i1>
                  memref.store %true_23, %80[] : memref<i1>
                  br ^bb1
                ^bb1:  // pred: ^bb0
                  %c0_24 = arith.constant 0 : index
                  %81 = memref.load %26[%c0_24] : memref<?xi32>
                  %c0_25 = arith.constant 0 : index
                  %82 = memref.load %32[%c0_25] : memref<?xi32>
                  %83 = arith.cmpi sle, %81, %82 : i32
                  %84 = arith.extsi %83 : i1 to i32
                  %85 = arith.trunci %84 : i32 to i1
                  %86 = memref.load %80[] : memref<i1>
                  %87 = arith.andi %85, %86 : i1
                  cond_br %87, ^bb2, ^bb3
                ^bb2:  // pred: ^bb1
                  %88 = memref.load %80[] : memref<i1>
                  memref.store %88, %79[] : memref<i1>
                  %89 = memref.load %79[] : memref<i1>
                  scf.if %89 {
                    scf.execute_region {
                      %c0_26 = arith.constant 0 : index
                      %91 = memref.load %19[%c0_26] : memref<?xmemref<?xmemref<?xf32>>>
                      %c0_27 = arith.constant 0 : index
                      %92 = memref.load %29[%c0_27] : memref<?xi32>
                      %93 = arith.index_cast %92 : i32 to index
                      %94 = "polygeist.subindex"(%91, %93) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                      %95 = "polygeist.subindex"(%94, %c0_6) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                      %c0_28 = arith.constant 0 : index
                      %96 = memref.load %95[%c0_28] : memref<?xmemref<?xf32>>
                      %c0_29 = arith.constant 0 : index
                      %97 = memref.load %26[%c0_29] : memref<?xi32>
                      %98 = arith.index_cast %97 : i32 to index
                      %99 = "polygeist.subindex"(%96, %98) : (memref<?xf32>, index) -> memref<?xf32>
                      %100 = "polygeist.subindex"(%99, %c0_6) : (memref<?xf32>, index) -> memref<?xf32>
                      %c0_30 = arith.constant 0 : index
                      %101 = memref.load %100[%c0_30] : memref<?xf32>
                      %c0_31 = arith.constant 0 : index
                      memref.store %101, %21[%c0_31] : memref<?xf32>
                      scf.yield
                    }
                  }
                  %90 = memref.load %79[] : memref<i1>
                  scf.if %90 {
                    scf.execute_region {
                      %91 = memref.load %79[] : memref<i1>
                      scf.if %91 {
                        scf.execute_region {
                          %95 = memref.load %79[] : memref<i1>
                          scf.if %95 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %92 = memref.load %79[] : memref<i1>
                      scf.if %92 {
                        scf.execute_region {
                          %95 = memref.load %79[] : memref<i1>
                          scf.if %95 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %93 = memref.load %79[] : memref<i1>
                      scf.if %93 {
                        scf.execute_region {
                          %95 = llvm.load %17 : !llvm.ptr<ptr<i8>>
                          %c0_26 = arith.constant 0 : index
                          %96 = memref.load %23[%c0_26] : memref<?xi32>
                          %97 = arith.index_cast %96 : i32 to index
                          %98 = arith.index_cast %97 : index to i64
                          %99 = llvm.getelementptr %95[%98] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                          llvm.store %99, %7 : !llvm.ptr<ptr<i8>>
                          scf.yield
                        }
                      }
                      %94 = memref.load %79[] : memref<i1>
                      scf.if %94 {
                        scf.execute_region {
                          %95 = memref.cast %21 : memref<?xf32> to memref<?xf32>
                          %96 = memref.cast %95 : memref<?xf32> to memref<?xi8>
                        }
                      }
                    }
                  }
                ^bb3:  // pred: ^bb1
                }
              }
            }
          }
        ^bb3:  // pred: ^bb1
        }
      }
    }
  }
}
 lhs.val: %6 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
 tostore: %96 = memref.cast %95 : memref<?xf32> to memref<?xi8>
backprop.c:458:13: warning: implicit declaration of function 'open' is invalid in C99 [-Wimplicit-function-declaration]
  if ((fd = open(filename, 0, 0644)) == -1) {
            ^
Emitting fn: bpnn_read
bpnn_read
CompoundStmt 0x55b45335e278
|-DeclStmt 0x55b45332e150
| `-VarDecl 0x55b45332e0e8  used mem 'char *'
|-DeclStmt 0x55b45332e1e0
| `-VarDecl 0x55b45332e178  used new 'BPNN *'
|-DeclStmt 0x55b45332e5b8
| |-VarDecl 0x55b45332e210  used fd 'int'
| |-VarDecl 0x55b45332e290  used n1 'int'
| |-VarDecl 0x55b45332e310  used n2 'int'
| |-VarDecl 0x55b45332e390  used n3 'int'
| |-VarDecl 0x55b45332e410  used i 'int'
| |-VarDecl 0x55b45332e490  used j 'int'
| `-VarDecl 0x55b45332e510  used memcnt 'int'
|-IfStmt 0x55b45332e928
| |-BinaryOperator 0x55b45332e828 'int' '=='
| | |-ParenExpr 0x55b45332e7d0 'int'
| | | `-BinaryOperator 0x55b45332e7b0 'int' '='
| | |   |-DeclRefExpr 0x55b45332e5d0 'int' lvalue Var 0x55b45332e210 'fd' 'int'
| | |   `-CallExpr 0x55b45332e760 'int'
| | |     |-ImplicitCastExpr 0x55b45332e748 'int (*)()' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x55b45332e6c8 'int ()' Function 0x55b45332e618 'open' 'int ()'
| | |     |-ImplicitCastExpr 0x55b45332e798 'char *' <LValueToRValue>
| | |     | `-DeclRefExpr 0x55b45332e6e8 'char *' lvalue ParmVar 0x55b45332df30 'filename' 'char *'
| | |     |-IntegerLiteral 0x55b45332e708 'int' 0
| | |     `-IntegerLiteral 0x55b45332e728 'int' 420
| | `-UnaryOperator 0x55b45332e810 'int' prefix '-'
| |   `-IntegerLiteral 0x55b45332e7f0 'int' 1
| `-CompoundStmt 0x55b45332e910
|   `-ReturnStmt 0x55b45332e900
|     `-ImplicitCastExpr 0x55b45332e8e8 'BPNN *' <NullToPointer>
|       `-ParenExpr 0x55b45332e8c8 'void *'
|         `-ParenExpr 0x55b45332e8a8 'void *'
|           `-CStyleCastExpr 0x55b45332e880 'void *' <NullToPointer>
|             `-IntegerLiteral 0x55b45332e848 'int' 0
|-CallExpr 0x55b45332ea20 'int'
| |-ImplicitCastExpr 0x55b45332ea08 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332e948 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| |-ImplicitCastExpr 0x55b45332ea68 'const char *' <NoOp>
| | `-ImplicitCastExpr 0x55b45332ea50 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x55b45332e9a8 'char[14]' lvalue "Reading '%s'\n"
| `-ImplicitCastExpr 0x55b45332ea80 'char *' <LValueToRValue>
|   `-DeclRefExpr 0x55b45332e9d0 'char *' lvalue ParmVar 0x55b45332df30 'filename' 'char *'
|-CallExpr 0x55b45332ec00 'ssize_t':'long'
| |-ImplicitCastExpr 0x55b45332ebe8 'ssize_t (*)(int, void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332ea98 'ssize_t (int, void *, size_t)' Function 0x55b4531f5aa8 'read' 'ssize_t (int, void *, size_t)'
| |-ImplicitCastExpr 0x55b45332ec38 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45332eab8 'int' lvalue Var 0x55b45332e210 'fd' 'int'
| |-ImplicitCastExpr 0x55b45332ec50 'void *' <BitCast>
| | `-CStyleCastExpr 0x55b45332eb28 'char *' <BitCast>
| |   `-UnaryOperator 0x55b45332eaf8 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x55b45332ead8 'int' lvalue Var 0x55b45332e290 'n1' 'int'
| `-UnaryExprOrTypeTraitExpr 0x55b45332eb68 'unsigned long' sizeof 'int'
|-CallExpr 0x55b45332ed70 'ssize_t':'long'
| |-ImplicitCastExpr 0x55b45332ed58 'ssize_t (*)(int, void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332ec68 'ssize_t (int, void *, size_t)' Function 0x55b4531f5aa8 'read' 'ssize_t (int, void *, size_t)'
| |-ImplicitCastExpr 0x55b45332eda8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45332ec88 'int' lvalue Var 0x55b45332e210 'fd' 'int'
| |-ImplicitCastExpr 0x55b45332edc0 'void *' <BitCast>
| | `-CStyleCastExpr 0x55b45332ecf8 'char *' <BitCast>
| |   `-UnaryOperator 0x55b45332ecc8 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x55b45332eca8 'int' lvalue Var 0x55b45332e310 'n2' 'int'
| `-UnaryExprOrTypeTraitExpr 0x55b45332ed38 'unsigned long' sizeof 'int'
|-CallExpr 0x55b45332eee0 'ssize_t':'long'
| |-ImplicitCastExpr 0x55b45332eec8 'ssize_t (*)(int, void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45332edd8 'ssize_t (int, void *, size_t)' Function 0x55b4531f5aa8 'read' 'ssize_t (int, void *, size_t)'
| |-ImplicitCastExpr 0x55b45332ef18 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45332edf8 'int' lvalue Var 0x55b45332e210 'fd' 'int'
| |-ImplicitCastExpr 0x55b45332ef30 'void *' <BitCast>
| | `-CStyleCastExpr 0x55b45332ee68 'char *' <BitCast>
| |   `-UnaryOperator 0x55b45332ee38 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x55b45332ee18 'int' lvalue Var 0x55b45332e390 'n3' 'int'
| `-UnaryExprOrTypeTraitExpr 0x55b45332eea8 'unsigned long' sizeof 'int'
|-BinaryOperator 0x55b45335b178 'BPNN *' '='
| |-DeclRefExpr 0x55b45332ef48 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
| `-CallExpr 0x55b45335b0f8 'BPNN *'
|   |-ImplicitCastExpr 0x55b45335b0e0 'BPNN *(*)()' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x55b45332ef68 'BPNN *()' Function 0x55b4532a07e8 'bpnn_internal_create' 'BPNN *(int, int, int)'
|   |-ImplicitCastExpr 0x55b45335b130 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x55b45332ef88 'int' lvalue Var 0x55b45332e290 'n1' 'int'
|   |-ImplicitCastExpr 0x55b45335b148 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x55b45332efa8 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|   `-ImplicitCastExpr 0x55b45335b160 'int' <LValueToRValue>
|     `-DeclRefExpr 0x55b45335b0c0 'int' lvalue Var 0x55b45332e390 'n3' 'int'
|-CallExpr 0x55b45335b2a8 'int'
| |-ImplicitCastExpr 0x55b45335b290 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335b198 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| |-ImplicitCastExpr 0x55b45335b308 'const char *' <NoOp>
| | `-ImplicitCastExpr 0x55b45335b2f0 'char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x55b45335b1b8 'char[34]' lvalue "'%s' contains a %dx%dx%d network\n"
| |-ImplicitCastExpr 0x55b45335b320 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335b1f8 'char *' lvalue ParmVar 0x55b45332df30 'filename' 'char *'
| |-ImplicitCastExpr 0x55b45335b338 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335b218 'int' lvalue Var 0x55b45332e290 'n1' 'int'
| |-ImplicitCastExpr 0x55b45335b350 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335b238 'int' lvalue Var 0x55b45332e310 'n2' 'int'
| `-ImplicitCastExpr 0x55b45335b368 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45335b258 'int' lvalue Var 0x55b45332e390 'n3' 'int'
|-CallExpr 0x55b45335b438 'int'
| |-ImplicitCastExpr 0x55b45335b420 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335b380 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| `-ImplicitCastExpr 0x55b45335b478 'const char *' <NoOp>
|   `-ImplicitCastExpr 0x55b45335b460 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x55b45335b3d8 'char[25]' lvalue "Reading input weights..."
|-BinaryOperator 0x55b45335b4d0 'int' '='
| |-DeclRefExpr 0x55b45335b490 'int' lvalue Var 0x55b45332e510 'memcnt' 'int'
| `-IntegerLiteral 0x55b45335b4b0 'int' 0
|-BinaryOperator 0x55b45335b808 'char *' '='
| |-DeclRefExpr 0x55b45335b4f0 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
| `-CStyleCastExpr 0x55b45335b7e0 'char *' <BitCast>
|   `-CallExpr 0x55b45335b788 'void *'
|     |-ImplicitCastExpr 0x55b45335b770 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b45335b510 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-ImplicitCastExpr 0x55b45335b7b0 'unsigned long' <IntegralCast>
|       `-CStyleCastExpr 0x55b45335b748 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55b45335b728 'unsigned long'
|           `-BinaryOperator 0x55b45335b6d0 'unsigned long' '*'
|             |-ImplicitCastExpr 0x55b45335b6b8 'unsigned long' <IntegralCast>
|             | `-BinaryOperator 0x55b45335b660 'int' '*'
|             |   |-ParenExpr 0x55b45335b5a8 'int'
|             |   | `-BinaryOperator 0x55b45335b588 'int' '+'
|             |   |   |-ImplicitCastExpr 0x55b45335b570 'int' <LValueToRValue>
|             |   |   | `-DeclRefExpr 0x55b45335b530 'int' lvalue Var 0x55b45332e290 'n1' 'int'
|             |   |   `-IntegerLiteral 0x55b45335b550 'int' 1
|             |   `-ParenExpr 0x55b45335b640 'int'
|             |     `-BinaryOperator 0x55b45335b620 'int' '+'
|             |       |-ImplicitCastExpr 0x55b45335b608 'int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55b45335b5c8 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|             |       `-IntegerLiteral 0x55b45335b5e8 'int' 1
|             `-UnaryExprOrTypeTraitExpr 0x55b45335b698 'unsigned long' sizeof 'float'
|-CallExpr 0x55b45335ba60 'ssize_t':'long'
| |-ImplicitCastExpr 0x55b45335ba48 'ssize_t (*)(int, void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335b828 'ssize_t (int, void *, size_t)' Function 0x55b4531f5aa8 'read' 'ssize_t (int, void *, size_t)'
| |-ImplicitCastExpr 0x55b45335ba98 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335b848 'int' lvalue Var 0x55b45332e210 'fd' 'int'
| |-ImplicitCastExpr 0x55b45335bac8 'void *' <BitCast>
| | `-ImplicitCastExpr 0x55b45335bab0 'char *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45335b868 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
| `-BinaryOperator 0x55b45335ba28 'unsigned long' '*'
|   |-ImplicitCastExpr 0x55b45335ba10 'unsigned long' <IntegralCast>
|   | `-BinaryOperator 0x55b45335b9b8 'int' '*'
|   |   |-ParenExpr 0x55b45335b900 'int'
|   |   | `-BinaryOperator 0x55b45335b8e0 'int' '+'
|   |   |   |-ImplicitCastExpr 0x55b45335b8c8 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55b45335b888 'int' lvalue Var 0x55b45332e290 'n1' 'int'
|   |   |   `-IntegerLiteral 0x55b45335b8a8 'int' 1
|   |   `-ParenExpr 0x55b45335b998 'int'
|   |     `-BinaryOperator 0x55b45335b978 'int' '+'
|   |       |-ImplicitCastExpr 0x55b45335b960 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55b45335b920 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|   |       `-IntegerLiteral 0x55b45335b940 'int' 1
|   `-UnaryExprOrTypeTraitExpr 0x55b45335b9f0 'unsigned long' sizeof 'float'
|-ForStmt 0x55b45335c768
| |-BinaryOperator 0x55b45335bb20 'int' '='
| | |-DeclRefExpr 0x55b45335bae0 'int' lvalue Var 0x55b45332e410 'i' 'int'
| | `-IntegerLiteral 0x55b45335bb00 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b45335bbb0 'int' '<='
| | |-ImplicitCastExpr 0x55b45335bb80 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b45335bb40 'int' lvalue Var 0x55b45332e410 'i' 'int'
| | `-ImplicitCastExpr 0x55b45335bb98 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45335bb60 'int' lvalue Var 0x55b45332e290 'n1' 'int'
| |-UnaryOperator 0x55b45335bbf0 'int' postfix '++'
| | `-DeclRefExpr 0x55b45335bbd0 'int' lvalue Var 0x55b45332e410 'i' 'int'
| `-CompoundStmt 0x55b45335c750
|   `-ForStmt 0x55b45335c718
|     |-BinaryOperator 0x55b45335bc48 'int' '='
|     | |-DeclRefExpr 0x55b45335bc08 'int' lvalue Var 0x55b45332e490 'j' 'int'
|     | `-IntegerLiteral 0x55b45335bc28 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b45335bcd8 'int' '<='
|     | |-ImplicitCastExpr 0x55b45335bca8 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b45335bc68 'int' lvalue Var 0x55b45332e490 'j' 'int'
|     | `-ImplicitCastExpr 0x55b45335bcc0 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b45335bc88 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|     |-UnaryOperator 0x55b45335bd18 'int' postfix '++'
|     | `-DeclRefExpr 0x55b45335bcf8 'int' lvalue Var 0x55b45332e490 'j' 'int'
|     `-CompoundStmt 0x55b45335c6f0
|       |-CompoundStmt 0x55b45335c620
|       | |-DeclStmt 0x55b45335be48
|       | | |-VarDecl 0x55b45335bd48  used _to 'char *' register
|       | | `-VarDecl 0x55b45335bdc8  used _from 'char *' register
|       | |-DeclStmt 0x55b45335bf78
|       | | |-VarDecl 0x55b45335be78  used _i 'int' register
|       | | `-VarDecl 0x55b45335bef8  used _l 'int' register
|       | |-BinaryOperator 0x55b45335c1b0 'char *' '='
|       | | |-DeclRefExpr 0x55b45335bf90 'char *' lvalue Var 0x55b45335bd48 '_to' 'char *'
|       | | `-CStyleCastExpr 0x55b45335c188 'char *' <BitCast>
|       | |   `-ParenExpr 0x55b45335c168 'float *'
|       | |     `-UnaryOperator 0x55b45335c118 'float *' prefix '&' cannot overflow
|       | |       `-ParenExpr 0x55b45335c0f8 'float' lvalue
|       | |         `-ArraySubscriptExpr 0x55b45335c0d8 'float' lvalue
|       | |           |-ImplicitCastExpr 0x55b45335c0a8 'float *' <LValueToRValue>
|       | |           | `-ArraySubscriptExpr 0x55b45335c068 'float *' lvalue
|       | |           |   |-ImplicitCastExpr 0x55b45335c038 'float **' <LValueToRValue>
|       | |           |   | `-MemberExpr 0x55b45335bfe8 'float **' lvalue ->input_weights 0x55b45316fe68
|       | |           |   |   `-ImplicitCastExpr 0x55b45335bfd0 'BPNN *' <LValueToRValue>
|       | |           |   |     `-DeclRefExpr 0x55b45335bfb0 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
|       | |           |   `-ImplicitCastExpr 0x55b45335c050 'int' <LValueToRValue>
|       | |           |     `-DeclRefExpr 0x55b45335c018 'int' lvalue Var 0x55b45332e410 'i' 'int'
|       | |           `-ImplicitCastExpr 0x55b45335c0c0 'int' <LValueToRValue>
|       | |             `-DeclRefExpr 0x55b45335c088 'int' lvalue Var 0x55b45332e490 'j' 'int'
|       | |-BinaryOperator 0x55b45335c318 'char *' '='
|       | | |-DeclRefExpr 0x55b45335c1d0 'char *' lvalue Var 0x55b45335bdc8 '_from' 'char *'
|       | | `-CStyleCastExpr 0x55b45335c2f0 'char *' <NoOp>
|       | |   `-ParenExpr 0x55b45335c2d0 'char *'
|       | |     `-UnaryOperator 0x55b45335c280 'char *' prefix '&' cannot overflow
|       | |       `-ArraySubscriptExpr 0x55b45335c260 'char' lvalue
|       | |         |-ImplicitCastExpr 0x55b45335c230 'char *' <LValueToRValue>
|       | |         | `-DeclRefExpr 0x55b45335c1f0 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
|       | |         `-ImplicitCastExpr 0x55b45335c248 'int' <LValueToRValue>
|       | |           `-DeclRefExpr 0x55b45335c210 'int' lvalue Var 0x55b45332e510 'memcnt' 'int'
|       | |-BinaryOperator 0x55b45335c3c8 'int' '='
|       | | |-DeclRefExpr 0x55b45335c338 'int' lvalue Var 0x55b45335bef8 '_l' 'int'
|       | | `-ImplicitCastExpr 0x55b45335c3b0 'int' <IntegralCast>
|       | |   `-ParenExpr 0x55b45335c390 'unsigned long'
|       | |     `-UnaryExprOrTypeTraitExpr 0x55b45335c370 'unsigned long' sizeof 'float'
|       | `-ForStmt 0x55b45335c5e8
|       |   |-BinaryOperator 0x55b45335c428 'int' '='
|       |   | |-DeclRefExpr 0x55b45335c3e8 'int' lvalue Var 0x55b45335be78 '_i' 'int'
|       |   | `-IntegerLiteral 0x55b45335c408 'int' 0
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x55b45335c4b8 'int' '<'
|       |   | |-ImplicitCastExpr 0x55b45335c488 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x55b45335c448 'int' lvalue Var 0x55b45335be78 '_i' 'int'
|       |   | `-ImplicitCastExpr 0x55b45335c4a0 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55b45335c468 'int' lvalue Var 0x55b45335bef8 '_l' 'int'
|       |   |-UnaryOperator 0x55b45335c4f8 'int' postfix '++'
|       |   | `-DeclRefExpr 0x55b45335c4d8 'int' lvalue Var 0x55b45335be78 '_i' 'int'
|       |   `-BinaryOperator 0x55b45335c5c8 'char' '='
|       |     |-UnaryOperator 0x55b45335c548 'char' lvalue prefix '*' cannot overflow
|       |     | `-UnaryOperator 0x55b45335c530 'char *' postfix '++'
|       |     |   `-DeclRefExpr 0x55b45335c510 'char *' lvalue Var 0x55b45335bd48 '_to' 'char *'
|       |     `-ImplicitCastExpr 0x55b45335c5b0 'char' <LValueToRValue>
|       |       `-UnaryOperator 0x55b45335c598 'char' lvalue prefix '*' cannot overflow
|       |         `-UnaryOperator 0x55b45335c580 'char *' postfix '++'
|       |           `-DeclRefExpr 0x55b45335c560 'char *' lvalue Var 0x55b45335bdc8 '_from' 'char *'
|       |-NullStmt 0x55b45335c660
|       `-CompoundAssignOperator 0x55b45335c6c0 'int' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|         |-DeclRefExpr 0x55b45335c668 'int' lvalue Var 0x55b45332e510 'memcnt' 'int'
|         `-UnaryExprOrTypeTraitExpr 0x55b45335c6a0 'unsigned long' sizeof 'float'
|-CallExpr 0x55b45335c810 'void'
| |-ImplicitCastExpr 0x55b45335c7f8 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335c7a0 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b45335c850 'void *' <BitCast>
|   `-ImplicitCastExpr 0x55b45335c838 'char *' <LValueToRValue>
|     `-DeclRefExpr 0x55b45335c7c0 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
|-CallExpr 0x55b45335c930 'int'
| |-ImplicitCastExpr 0x55b45335c918 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335c868 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| `-ImplicitCastExpr 0x55b45335c970 'const char *' <NoOp>
|   `-ImplicitCastExpr 0x55b45335c958 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x55b45335c8c8 'char[31]' lvalue "Done\nReading hidden weights..."
|-BinaryOperator 0x55b45335c9c8 'int' '='
| |-DeclRefExpr 0x55b45335c988 'int' lvalue Var 0x55b45332e510 'memcnt' 'int'
| `-IntegerLiteral 0x55b45335c9a8 'int' 0
|-BinaryOperator 0x55b45335cd00 'char *' '='
| |-DeclRefExpr 0x55b45335c9e8 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
| `-CStyleCastExpr 0x55b45335ccd8 'char *' <BitCast>
|   `-CallExpr 0x55b45335cc80 'void *'
|     |-ImplicitCastExpr 0x55b45335cc68 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55b45335ca08 'void *(unsigned long)' Function 0x55b4530a9a00 'malloc' 'void *(unsigned long)'
|     `-ImplicitCastExpr 0x55b45335cca8 'unsigned long' <IntegralCast>
|       `-CStyleCastExpr 0x55b45335cc40 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55b45335cc20 'unsigned long'
|           `-BinaryOperator 0x55b45335cbc8 'unsigned long' '*'
|             |-ImplicitCastExpr 0x55b45335cbb0 'unsigned long' <IntegralCast>
|             | `-BinaryOperator 0x55b45335cb58 'int' '*'
|             |   |-ParenExpr 0x55b45335caa0 'int'
|             |   | `-BinaryOperator 0x55b45335ca80 'int' '+'
|             |   |   |-ImplicitCastExpr 0x55b45335ca68 'int' <LValueToRValue>
|             |   |   | `-DeclRefExpr 0x55b45335ca28 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|             |   |   `-IntegerLiteral 0x55b45335ca48 'int' 1
|             |   `-ParenExpr 0x55b45335cb38 'int'
|             |     `-BinaryOperator 0x55b45335cb18 'int' '+'
|             |       |-ImplicitCastExpr 0x55b45335cb00 'int' <LValueToRValue>
|             |       | `-DeclRefExpr 0x55b45335cac0 'int' lvalue Var 0x55b45332e390 'n3' 'int'
|             |       `-IntegerLiteral 0x55b45335cae0 'int' 1
|             `-UnaryExprOrTypeTraitExpr 0x55b45335cb90 'unsigned long' sizeof 'float'
|-CallExpr 0x55b45335cf58 'ssize_t':'long'
| |-ImplicitCastExpr 0x55b45335cf40 'ssize_t (*)(int, void *, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335cd20 'ssize_t (int, void *, size_t)' Function 0x55b4531f5aa8 'read' 'ssize_t (int, void *, size_t)'
| |-ImplicitCastExpr 0x55b45335cf90 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335cd40 'int' lvalue Var 0x55b45332e210 'fd' 'int'
| |-ImplicitCastExpr 0x55b45335cfc0 'void *' <BitCast>
| | `-ImplicitCastExpr 0x55b45335cfa8 'char *' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45335cd60 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
| `-BinaryOperator 0x55b45335cf20 'unsigned long' '*'
|   |-ImplicitCastExpr 0x55b45335cf08 'unsigned long' <IntegralCast>
|   | `-BinaryOperator 0x55b45335ceb0 'int' '*'
|   |   |-ParenExpr 0x55b45335cdf8 'int'
|   |   | `-BinaryOperator 0x55b45335cdd8 'int' '+'
|   |   |   |-ImplicitCastExpr 0x55b45335cdc0 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55b45335cd80 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|   |   |   `-IntegerLiteral 0x55b45335cda0 'int' 1
|   |   `-ParenExpr 0x55b45335ce90 'int'
|   |     `-BinaryOperator 0x55b45335ce70 'int' '+'
|   |       |-ImplicitCastExpr 0x55b45335ce58 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55b45335ce18 'int' lvalue Var 0x55b45332e390 'n3' 'int'
|   |       `-IntegerLiteral 0x55b45335ce38 'int' 1
|   `-UnaryExprOrTypeTraitExpr 0x55b45335cee8 'unsigned long' sizeof 'float'
|-ForStmt 0x55b45335dc88
| |-BinaryOperator 0x55b45335d018 'int' '='
| | |-DeclRefExpr 0x55b45335cfd8 'int' lvalue Var 0x55b45332e410 'i' 'int'
| | `-IntegerLiteral 0x55b45335cff8 'int' 0
| |-<<<NULL>>>
| |-BinaryOperator 0x55b45335d0d0 'int' '<='
| | |-ImplicitCastExpr 0x55b45335d078 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x55b45335d038 'int' lvalue Var 0x55b45332e410 'i' 'int'
| | `-ImplicitCastExpr 0x55b45335d090 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55b45335d058 'int' lvalue Var 0x55b45332e310 'n2' 'int'
| |-UnaryOperator 0x55b45335d110 'int' postfix '++'
| | `-DeclRefExpr 0x55b45335d0f0 'int' lvalue Var 0x55b45332e410 'i' 'int'
| `-CompoundStmt 0x55b45335dc70
|   `-ForStmt 0x55b45335dc38
|     |-BinaryOperator 0x55b45335d168 'int' '='
|     | |-DeclRefExpr 0x55b45335d128 'int' lvalue Var 0x55b45332e490 'j' 'int'
|     | `-IntegerLiteral 0x55b45335d148 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x55b45335d1f8 'int' '<='
|     | |-ImplicitCastExpr 0x55b45335d1c8 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55b45335d188 'int' lvalue Var 0x55b45332e490 'j' 'int'
|     | `-ImplicitCastExpr 0x55b45335d1e0 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55b45335d1a8 'int' lvalue Var 0x55b45332e390 'n3' 'int'
|     |-UnaryOperator 0x55b45335d238 'int' postfix '++'
|     | `-DeclRefExpr 0x55b45335d218 'int' lvalue Var 0x55b45332e490 'j' 'int'
|     `-CompoundStmt 0x55b45335dc10
|       |-CompoundStmt 0x55b45335db40
|       | |-DeclStmt 0x55b45335d368
|       | | |-VarDecl 0x55b45335d268  used _to 'char *' register
|       | | `-VarDecl 0x55b45335d2e8  used _from 'char *' register
|       | |-DeclStmt 0x55b45335d498
|       | | |-VarDecl 0x55b45335d398  used _i 'int' register
|       | | `-VarDecl 0x55b45335d418  used _l 'int' register
|       | |-BinaryOperator 0x55b45335d6d0 'char *' '='
|       | | |-DeclRefExpr 0x55b45335d4b0 'char *' lvalue Var 0x55b45335d268 '_to' 'char *'
|       | | `-CStyleCastExpr 0x55b45335d6a8 'char *' <BitCast>
|       | |   `-ParenExpr 0x55b45335d688 'float *'
|       | |     `-UnaryOperator 0x55b45335d638 'float *' prefix '&' cannot overflow
|       | |       `-ParenExpr 0x55b45335d618 'float' lvalue
|       | |         `-ArraySubscriptExpr 0x55b45335d5f8 'float' lvalue
|       | |           |-ImplicitCastExpr 0x55b45335d5c8 'float *' <LValueToRValue>
|       | |           | `-ArraySubscriptExpr 0x55b45335d588 'float *' lvalue
|       | |           |   |-ImplicitCastExpr 0x55b45335d558 'float **' <LValueToRValue>
|       | |           |   | `-MemberExpr 0x55b45335d508 'float **' lvalue ->hidden_weights 0x55b45316fed8
|       | |           |   |   `-ImplicitCastExpr 0x55b45335d4f0 'BPNN *' <LValueToRValue>
|       | |           |   |     `-DeclRefExpr 0x55b45335d4d0 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
|       | |           |   `-ImplicitCastExpr 0x55b45335d570 'int' <LValueToRValue>
|       | |           |     `-DeclRefExpr 0x55b45335d538 'int' lvalue Var 0x55b45332e410 'i' 'int'
|       | |           `-ImplicitCastExpr 0x55b45335d5e0 'int' <LValueToRValue>
|       | |             `-DeclRefExpr 0x55b45335d5a8 'int' lvalue Var 0x55b45332e490 'j' 'int'
|       | |-BinaryOperator 0x55b45335d838 'char *' '='
|       | | |-DeclRefExpr 0x55b45335d6f0 'char *' lvalue Var 0x55b45335d2e8 '_from' 'char *'
|       | | `-CStyleCastExpr 0x55b45335d810 'char *' <NoOp>
|       | |   `-ParenExpr 0x55b45335d7f0 'char *'
|       | |     `-UnaryOperator 0x55b45335d7a0 'char *' prefix '&' cannot overflow
|       | |       `-ArraySubscriptExpr 0x55b45335d780 'char' lvalue
|       | |         |-ImplicitCastExpr 0x55b45335d750 'char *' <LValueToRValue>
|       | |         | `-DeclRefExpr 0x55b45335d710 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
|       | |         `-ImplicitCastExpr 0x55b45335d768 'int' <LValueToRValue>
|       | |           `-DeclRefExpr 0x55b45335d730 'int' lvalue Var 0x55b45332e510 'memcnt' 'int'
|       | |-BinaryOperator 0x55b45335d8e8 'int' '='
|       | | |-DeclRefExpr 0x55b45335d858 'int' lvalue Var 0x55b45335d418 '_l' 'int'
|       | | `-ImplicitCastExpr 0x55b45335d8d0 'int' <IntegralCast>
|       | |   `-ParenExpr 0x55b45335d8b0 'unsigned long'
|       | |     `-UnaryExprOrTypeTraitExpr 0x55b45335d890 'unsigned long' sizeof 'float'
|       | `-ForStmt 0x55b45335db08
|       |   |-BinaryOperator 0x55b45335d948 'int' '='
|       |   | |-DeclRefExpr 0x55b45335d908 'int' lvalue Var 0x55b45335d398 '_i' 'int'
|       |   | `-IntegerLiteral 0x55b45335d928 'int' 0
|       |   |-<<<NULL>>>
|       |   |-BinaryOperator 0x55b45335d9d8 'int' '<'
|       |   | |-ImplicitCastExpr 0x55b45335d9a8 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x55b45335d968 'int' lvalue Var 0x55b45335d398 '_i' 'int'
|       |   | `-ImplicitCastExpr 0x55b45335d9c0 'int' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x55b45335d988 'int' lvalue Var 0x55b45335d418 '_l' 'int'
|       |   |-UnaryOperator 0x55b45335da18 'int' postfix '++'
|       |   | `-DeclRefExpr 0x55b45335d9f8 'int' lvalue Var 0x55b45335d398 '_i' 'int'
|       |   `-BinaryOperator 0x55b45335dae8 'char' '='
|       |     |-UnaryOperator 0x55b45335da68 'char' lvalue prefix '*' cannot overflow
|       |     | `-UnaryOperator 0x55b45335da50 'char *' postfix '++'
|       |     |   `-DeclRefExpr 0x55b45335da30 'char *' lvalue Var 0x55b45335d268 '_to' 'char *'
|       |     `-ImplicitCastExpr 0x55b45335dad0 'char' <LValueToRValue>
|       |       `-UnaryOperator 0x55b45335dab8 'char' lvalue prefix '*' cannot overflow
|       |         `-UnaryOperator 0x55b45335daa0 'char *' postfix '++'
|       |           `-DeclRefExpr 0x55b45335da80 'char *' lvalue Var 0x55b45335d2e8 '_from' 'char *'
|       |-NullStmt 0x55b45335db80
|       `-CompoundAssignOperator 0x55b45335dbe0 'int' '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|         |-DeclRefExpr 0x55b45335db88 'int' lvalue Var 0x55b45332e510 'memcnt' 'int'
|         `-UnaryExprOrTypeTraitExpr 0x55b45335dbc0 'unsigned long' sizeof 'float'
|-CallExpr 0x55b45335dd30 'void'
| |-ImplicitCastExpr 0x55b45335dd18 'void (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335dcc0 'void (void *)' Function 0x55b4530aa8e0 'free' 'void (void *)'
| `-ImplicitCastExpr 0x55b45335dd70 'void *' <BitCast>
|   `-ImplicitCastExpr 0x55b45335dd58 'char *' <LValueToRValue>
|     `-DeclRefExpr 0x55b45335dce0 'char *' lvalue Var 0x55b45332e0e8 'mem' 'char *'
|-CallExpr 0x55b45335de10 'int'
| |-ImplicitCastExpr 0x55b45335ddf8 'int (*)(int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335dd88 'int (int)' Function 0x55b4531f57a8 'close' 'int (int)'
| `-ImplicitCastExpr 0x55b45335de38 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45335dda8 'int' lvalue Var 0x55b45332e210 'fd' 'int'
|-CallExpr 0x55b45335def8 'int'
| |-ImplicitCastExpr 0x55b45335dee0 'int (*)(const char *, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335de50 'int (const char *, ...)' Function 0x55b4530d6b68 'printf' 'int (const char *, ...)'
| `-ImplicitCastExpr 0x55b45335df38 'const char *' <NoOp>
|   `-ImplicitCastExpr 0x55b45335df20 'char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x55b45335dea8 'char[6]' lvalue "Done\n"
|-CallExpr 0x55b45335e030 'int'
| |-ImplicitCastExpr 0x55b45335e018 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335df50 'int ()' Function 0x55b45329fb80 'bpnn_zero_weights' 'int (float **, int, int)'
| |-ImplicitCastExpr 0x55b45335e068 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45335dfa8 'float **' lvalue ->input_prev_weights 0x55b45316ff78
| |   `-ImplicitCastExpr 0x55b45335df90 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45335df70 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
| |-ImplicitCastExpr 0x55b45335e080 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335dfd8 'int' lvalue Var 0x55b45332e290 'n1' 'int'
| `-ImplicitCastExpr 0x55b45335e098 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45335dff8 'int' lvalue Var 0x55b45332e310 'n2' 'int'
|-CallExpr 0x55b45335e190 'int'
| |-ImplicitCastExpr 0x55b45335e178 'int (*)()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x55b45335e0b0 'int ()' Function 0x55b45329fb80 'bpnn_zero_weights' 'int (float **, int, int)'
| |-ImplicitCastExpr 0x55b45335e1c8 'float **' <LValueToRValue>
| | `-MemberExpr 0x55b45335e108 'float **' lvalue ->hidden_prev_weights 0x55b45316ffe8
| |   `-ImplicitCastExpr 0x55b45335e0f0 'BPNN *' <LValueToRValue>
| |     `-DeclRefExpr 0x55b45335e0d0 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
| |-ImplicitCastExpr 0x55b45335e1e0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x55b45335e138 'int' lvalue Var 0x55b45332e310 'n2' 'int'
| `-ImplicitCastExpr 0x55b45335e1f8 'int' <LValueToRValue>
|   `-DeclRefExpr 0x55b45335e158 'int' lvalue Var 0x55b45332e390 'n3' 'int'
`-ReturnStmt 0x55b45335e268
  `-ImplicitCastExpr 0x55b45335e250 'BPNN *' <LValueToRValue>
    `-ParenExpr 0x55b45335e230 'BPNN *' lvalue
      `-DeclRefExpr 0x55b45335e210 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
BinaryOperator 0x55b45335c1b0 'char *' '='
|-DeclRefExpr 0x55b45335bf90 'char *' lvalue Var 0x55b45335bd48 '_to' 'char *'
`-CStyleCastExpr 0x55b45335c188 'char *' <BitCast>
  `-ParenExpr 0x55b45335c168 'float *'
    `-UnaryOperator 0x55b45335c118 'float *' prefix '&' cannot overflow
      `-ParenExpr 0x55b45335c0f8 'float' lvalue
        `-ArraySubscriptExpr 0x55b45335c0d8 'float' lvalue
          |-ImplicitCastExpr 0x55b45335c0a8 'float *' <LValueToRValue>
          | `-ArraySubscriptExpr 0x55b45335c068 'float *' lvalue
          |   |-ImplicitCastExpr 0x55b45335c038 'float **' <LValueToRValue>
          |   | `-MemberExpr 0x55b45335bfe8 'float **' lvalue ->input_weights 0x55b45316fe68
          |   |   `-ImplicitCastExpr 0x55b45335bfd0 'BPNN *' <LValueToRValue>
          |   |     `-DeclRefExpr 0x55b45335bfb0 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
          |   `-ImplicitCastExpr 0x55b45335c050 'int' <LValueToRValue>
          |     `-DeclRefExpr 0x55b45335c018 'int' lvalue Var 0x55b45332e410 'i' 'int'
          `-ImplicitCastExpr 0x55b45335c0c0 'int' <LValueToRValue>
            `-DeclRefExpr 0x55b45335c088 'int' lvalue Var 0x55b45332e490 'j' 'int'
func @bpnn_read(%arg0: !llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> attributes {llvm.linkage = #llvm.linkage<external>} {
  %c0 = arith.constant 0 : index
  %0 = memref.alloca() : memref<1xi32>
  %1 = memref.cast %0 : memref<1xi32> to memref<?xi32>
  %c0_0 = arith.constant 0 : index
  %2 = llvm.mlir.undef : i32
  memref.store %2, %1[%c0_0] : memref<?xi32>
  %3 = memref.alloca() : memref<1xi32>
  %4 = memref.cast %3 : memref<1xi32> to memref<?xi32>
  %c0_1 = arith.constant 0 : index
  %5 = llvm.mlir.undef : i32
  memref.store %5, %4[%c0_1] : memref<?xi32>
  %c1_i64 = arith.constant 1 : i64
  %6 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_2 = arith.constant 1 : i64
  %7 = llvm.alloca %c1_i64_2 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %8 = memref.alloca() : memref<1xi32>
  %9 = memref.cast %8 : memref<1xi32> to memref<?xi32>
  %c0_3 = arith.constant 0 : index
  %10 = llvm.mlir.undef : i32
  memref.store %10, %9[%c0_3] : memref<?xi32>
  %11 = memref.alloca() : memref<1xi32>
  %12 = memref.cast %11 : memref<1xi32> to memref<?xi32>
  %c0_4 = arith.constant 0 : index
  %13 = llvm.mlir.undef : i32
  memref.store %13, %12[%c0_4] : memref<?xi32>
  %14 = memref.alloca() : memref<1xi32>
  %15 = memref.cast %14 : memref<1xi32> to memref<?xi32>
  %c0_5 = arith.constant 0 : index
  %16 = llvm.mlir.undef : i32
  memref.store %16, %15[%c0_5] : memref<?xi32>
  %17 = memref.alloca() : memref<1xi32>
  %18 = memref.cast %17 : memref<1xi32> to memref<?xi32>
  %c0_6 = arith.constant 0 : index
  %19 = llvm.mlir.undef : i32
  memref.store %19, %18[%c0_6] : memref<?xi32>
  %20 = memref.alloca() : memref<1xi32>
  %21 = memref.cast %20 : memref<1xi32> to memref<?xi32>
  %c0_7 = arith.constant 0 : index
  %22 = llvm.mlir.undef : i32
  memref.store %22, %21[%c0_7] : memref<?xi32>
  %23 = memref.alloca() : memref<1xi32>
  %24 = memref.cast %23 : memref<1xi32> to memref<?xi32>
  %c0_8 = arith.constant 0 : index
  %25 = llvm.mlir.undef : i32
  memref.store %25, %24[%c0_8] : memref<?xi32>
  %26 = memref.alloca() : memref<1xi32>
  %27 = memref.cast %26 : memref<1xi32> to memref<?xi32>
  %c0_9 = arith.constant 0 : index
  %28 = llvm.mlir.undef : i32
  memref.store %28, %27[%c0_9] : memref<?xi32>
  %c1_i64_10 = arith.constant 1 : i64
  %29 = llvm.alloca %c1_i64_10 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  %c1_i64_11 = arith.constant 1 : i64
  %30 = llvm.alloca %c1_i64_11 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_12 = arith.constant 1 : i64
  %31 = llvm.alloca %c1_i64_12 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  llvm.store %arg0, %31 : !llvm.ptr<ptr<i8>>
  %true = arith.constant true
  %32 = memref.alloca() : memref<i1>
  %33 = memref.alloca() : memref<i1>
  memref.store %true, %33[] : memref<i1>
  memref.store %true, %32[] : memref<i1>
  %34 = memref.alloca() : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  %35 = memref.load %32[] : memref<i1>
  scf.if %35 {
    scf.execute_region {
      %50 = memref.load %32[] : memref<i1>
      scf.if %50 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %36 = memref.load %32[] : memref<i1>
  scf.if %36 {
    scf.execute_region {
      %50 = memref.load %32[] : memref<i1>
      scf.if %50 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %37 = memref.load %32[] : memref<i1>
  scf.if %37 {
    scf.execute_region {
      %50 = memref.load %32[] : memref<i1>
      scf.if %50 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %38 = memref.load %32[] : memref<i1>
  scf.if %38 {
    scf.execute_region {
      %50 = memref.load %32[] : memref<i1>
      scf.if %50 {
        scf.execute_region {
          %51 = llvm.load %31 : !llvm.ptr<ptr<i8>>
          %c0_i32 = arith.constant 0 : i32
          %c420_i32 = arith.constant 420 : i32
          %52 = llvm.call @open(%51, %c0_i32, %c420_i32) : (!llvm.ptr<i8>, i32, i32) -> i32
          %c0_13 = arith.constant 0 : index
          memref.store %52, %27[%c0_13] : memref<?xi32>
          %c1_i32 = arith.constant 1 : i32
          %c0_i32_14 = arith.constant 0 : i32
          %53 = arith.subi %c0_i32_14, %c1_i32 : i32
          %c0_15 = arith.constant 0 : index
          %54 = memref.load %27[%c0_15] : memref<?xi32>
          %55 = arith.cmpi eq, %54, %53 : i32
          %56 = arith.extsi %55 : i1 to i32
          %57 = arith.trunci %56 : i32 to i1
          scf.if %57 {
            %58 = memref.load %32[] : memref<i1>
            scf.if %58 {
              scf.execute_region {
                %59 = memref.load %32[] : memref<i1>
                scf.if %59 {
                  scf.execute_region {
                    %60 = llvm.mlir.null : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
                    memref.store %60, %34[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
                    %false = arith.constant false
                    memref.store %false, %32[] : memref<i1>
                    memref.store %false, %33[] : memref<i1>
                    scf.yield
                  }
                }
                scf.yield
              }
            }
          }
          scf.yield
        }
      }
      scf.yield
    }
  }
  %39 = memref.load %32[] : memref<i1>
  scf.if %39 {
    scf.execute_region {
      %50 = llvm.mlir.addressof @str6 : !llvm.ptr<array<14 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_13 = arith.constant 0 : i32
      %51 = llvm.getelementptr %50[%c0_i32, %c0_i32_13] : (!llvm.ptr<array<14 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %52 = llvm.load %31 : !llvm.ptr<ptr<i8>>
      %53 = llvm.call @printf(%51, %52) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %40 = memref.load %32[] : memref<i1>
  scf.if %40 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %50 = memref.load %27[%c0_13] : memref<?xi32>
      %51 = memref.cast %24 : memref<?xi32> to memref<?xi32>
      %52 = memref.cast %51 : memref<?xi32> to memref<?xi8>
      %53 = memref.cast %52 : memref<?xi8> to memref<?xi8>
      %54 = "polygeist.memref2pointer"(%53) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %55 = llvm.call @read(%50, %54, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %41 = memref.load %32[] : memref<i1>
  scf.if %41 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %50 = memref.load %27[%c0_13] : memref<?xi32>
      %51 = memref.cast %21 : memref<?xi32> to memref<?xi32>
      %52 = memref.cast %51 : memref<?xi32> to memref<?xi8>
      %53 = memref.cast %52 : memref<?xi8> to memref<?xi8>
      %54 = "polygeist.memref2pointer"(%53) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %55 = llvm.call @read(%50, %54, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %42 = memref.load %32[] : memref<i1>
  scf.if %42 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %50 = memref.load %27[%c0_13] : memref<?xi32>
      %51 = memref.cast %18 : memref<?xi32> to memref<?xi32>
      %52 = memref.cast %51 : memref<?xi32> to memref<?xi8>
      %53 = memref.cast %52 : memref<?xi8> to memref<?xi8>
      %54 = "polygeist.memref2pointer"(%53) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %55 = llvm.call @read(%50, %54, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %43 = memref.load %32[] : memref<i1>
  scf.if %43 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %50 = memref.load %24[%c0_13] : memref<?xi32>
      %c0_14 = arith.constant 0 : index
      %51 = memref.load %21[%c0_14] : memref<?xi32>
      %c0_15 = arith.constant 0 : index
      %52 = memref.load %18[%c0_15] : memref<?xi32>
      %53 = call @bpnn_internal_create(%50, %51, %52) : (i32, i32, i32) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
      llvm.store %53, %29 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      scf.yield
    }
  }
  %44 = memref.load %32[] : memref<i1>
  scf.if %44 {
    scf.execute_region {
      %50 = llvm.mlir.addressof @str7 : !llvm.ptr<array<34 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_13 = arith.constant 0 : i32
      %51 = llvm.getelementptr %50[%c0_i32, %c0_i32_13] : (!llvm.ptr<array<34 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %52 = llvm.load %31 : !llvm.ptr<ptr<i8>>
      %c0_14 = arith.constant 0 : index
      %53 = memref.load %24[%c0_14] : memref<?xi32>
      %c0_15 = arith.constant 0 : index
      %54 = memref.load %21[%c0_15] : memref<?xi32>
      %c0_16 = arith.constant 0 : index
      %55 = memref.load %18[%c0_16] : memref<?xi32>
      %56 = llvm.call @printf(%51, %52, %53, %54, %55) : (!llvm.ptr<i8>, !llvm.ptr<i8>, i32, i32, i32) -> i32
      scf.yield
    }
  }
  %45 = memref.load %32[] : memref<i1>
  scf.if %45 {
    scf.execute_region {
      %50 = llvm.mlir.addressof @str8 : !llvm.ptr<array<25 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_13 = arith.constant 0 : i32
      %51 = llvm.getelementptr %50[%c0_i32, %c0_i32_13] : (!llvm.ptr<array<25 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %52 = llvm.call @printf(%51) : (!llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %46 = memref.load %32[] : memref<i1>
  scf.if %46 {
    scf.execute_region {
      %c0_i32 = arith.constant 0 : i32
      %c0_13 = arith.constant 0 : index
      memref.store %c0_i32, %9[%c0_13] : memref<?xi32>
      scf.yield
    }
  }
  %47 = memref.load %32[] : memref<i1>
  scf.if %47 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %50 = memref.load %24[%c0_13] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %51 = arith.addi %50, %c1_i32 : i32
      %c0_14 = arith.constant 0 : index
      %52 = memref.load %21[%c0_14] : memref<?xi32>
      %c1_i32_15 = arith.constant 1 : i32
      %53 = arith.addi %52, %c1_i32_15 : i32
      %54 = arith.muli %51, %53 : i32
      %55 = arith.extui %54 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %56 = arith.muli %55, %c4_i64 : i64
      %57 = arith.trunci %56 : i64 to i32
      %58 = arith.extui %57 : i32 to i64
      %59 = llvm.call @malloc(%58) : (i64) -> !llvm.ptr<i8>
      %60 = llvm.bitcast %59 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %60, %30 : !llvm.ptr<ptr<i8>>
      scf.yield
    }
  }
  %48 = memref.load %32[] : memref<i1>
  scf.if %48 {
    scf.execute_region {
      %c0_13 = arith.constant 0 : index
      %50 = memref.load %27[%c0_13] : memref<?xi32>
      %51 = llvm.load %30 : !llvm.ptr<ptr<i8>>
      %52 = llvm.bitcast %51 : !llvm.ptr<i8> to !llvm.ptr<i8>
      %c0_14 = arith.constant 0 : index
      %53 = memref.load %24[%c0_14] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %54 = arith.addi %53, %c1_i32 : i32
      %c0_15 = arith.constant 0 : index
      %55 = memref.load %21[%c0_15] : memref<?xi32>
      %c1_i32_16 = arith.constant 1 : i32
      %56 = arith.addi %55, %c1_i32_16 : i32
      %57 = arith.muli %54, %56 : i32
      %58 = arith.extui %57 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %59 = arith.muli %58, %c4_i64 : i64
      %60 = llvm.call @read(%50, %52, %59) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %49 = memref.load %32[] : memref<i1>
  scf.if %49 {
    scf.execute_region {
      %50 = memref.load %32[] : memref<i1>
      scf.if %50 {
        scf.execute_region {
          %c0_i32 = arith.constant 0 : i32
          %c0_13 = arith.constant 0 : index
          memref.store %c0_i32, %15[%c0_13] : memref<?xi32>
          %true_14 = arith.constant true
          %51 = memref.alloca() : memref<i1>
          %52 = memref.alloca() : memref<i1>
          memref.store %true_14, %52[] : memref<i1>
          br ^bb1
        ^bb1:  // pred: ^bb0
          %c0_15 = arith.constant 0 : index
          %53 = memref.load %15[%c0_15] : memref<?xi32>
          %c0_16 = arith.constant 0 : index
          %54 = memref.load %24[%c0_16] : memref<?xi32>
          %55 = arith.cmpi sle, %53, %54 : i32
          %56 = arith.extsi %55 : i1 to i32
          %57 = arith.trunci %56 : i32 to i1
          %58 = memref.load %52[] : memref<i1>
          %59 = arith.andi %57, %58 : i1
          cond_br %59, ^bb2, ^bb3
        ^bb2:  // pred: ^bb1
          %60 = memref.load %52[] : memref<i1>
          memref.store %60, %51[] : memref<i1>
          %61 = memref.load %51[] : memref<i1>
          scf.if %61 {
            scf.execute_region {
              %62 = memref.load %51[] : memref<i1>
              scf.if %62 {
                scf.execute_region {
                  %c0_i32_17 = arith.constant 0 : i32
                  %c0_18 = arith.constant 0 : index
                  memref.store %c0_i32_17, %12[%c0_18] : memref<?xi32>
                  %true_19 = arith.constant true
                  %63 = memref.alloca() : memref<i1>
                  %64 = memref.alloca() : memref<i1>
                  memref.store %true_19, %64[] : memref<i1>
                  br ^bb1
                ^bb1:  // pred: ^bb0
                  %c0_20 = arith.constant 0 : index
                  %65 = memref.load %12[%c0_20] : memref<?xi32>
                  %c0_21 = arith.constant 0 : index
                  %66 = memref.load %21[%c0_21] : memref<?xi32>
                  %67 = arith.cmpi sle, %65, %66 : i32
                  %68 = arith.extsi %67 : i1 to i32
                  %69 = arith.trunci %68 : i32 to i1
                  %70 = memref.load %64[] : memref<i1>
                  %71 = arith.andi %69, %70 : i1
                  cond_br %71, ^bb2, ^bb3
                ^bb2:  // pred: ^bb1
                  %72 = memref.load %64[] : memref<i1>
                  memref.store %72, %63[] : memref<i1>
                  %73 = memref.load %63[] : memref<i1>
                  scf.if %73 {
                    scf.execute_region {
                      %74 = memref.load %63[] : memref<i1>
                      scf.if %74 {
                        scf.execute_region {
                          %77 = memref.load %63[] : memref<i1>
                          scf.if %77 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %75 = memref.load %63[] : memref<i1>
                      scf.if %75 {
                        scf.execute_region {
                          %77 = memref.load %63[] : memref<i1>
                          scf.if %77 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %76 = memref.load %63[] : memref<i1>
                      scf.if %76 {
                        scf.execute_region {
                          %77 = llvm.load %29 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
                          %c0_i32_22 = arith.constant 0 : i32
                          %c9_i32 = arith.constant 9 : i32
                          %78 = llvm.getelementptr %77[%c0_i32_22, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
                          %79 = llvm.load %78 : !llvm.ptr<memref<?xmemref<?xf32>>>
                          %c0_23 = arith.constant 0 : index
                          %80 = memref.load %15[%c0_23] : memref<?xi32>
                          %81 = arith.index_cast %80 : i32 to index
                          %82 = "polygeist.subindex"(%79, %81) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                          %83 = "polygeist.subindex"(%82, %c0) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                          %c0_24 = arith.constant 0 : index
                          %84 = memref.load %83[%c0_24] : memref<?xmemref<?xf32>>
                          %c0_25 = arith.constant 0 : index
                          %85 = memref.load %12[%c0_25] : memref<?xi32>
                          %86 = arith.index_cast %85 : i32 to index
                          %87 = "polygeist.subindex"(%84, %86) : (memref<?xf32>, index) -> memref<?xf32>
                          %88 = "polygeist.subindex"(%87, %c0) : (memref<?xf32>, index) -> memref<?xf32>
                          %89 = memref.cast %88 : memref<?xf32> to memref<?xf32>
                          %90 = memref.cast %89 : memref<?xf32> to memref<?xi8>
                        }
                      }
                    }
                  }
                ^bb3:  // pred: ^bb1
                }
              }
            }
          }
        ^bb3:  // pred: ^bb1
        }
      }
    }
  }
}
 lhs.val: %7 = llvm.alloca %c1_i64_2 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
 tostore: %90 = memref.cast %89 : memref<?xf32> to memref<?xi8>
BinaryOperator 0x55b45335d6d0 'char *' '='
|-DeclRefExpr 0x55b45335d4b0 'char *' lvalue Var 0x55b45335d268 '_to' 'char *'
`-CStyleCastExpr 0x55b45335d6a8 'char *' <BitCast>
  `-ParenExpr 0x55b45335d688 'float *'
    `-UnaryOperator 0x55b45335d638 'float *' prefix '&' cannot overflow
      `-ParenExpr 0x55b45335d618 'float' lvalue
        `-ArraySubscriptExpr 0x55b45335d5f8 'float' lvalue
          |-ImplicitCastExpr 0x55b45335d5c8 'float *' <LValueToRValue>
          | `-ArraySubscriptExpr 0x55b45335d588 'float *' lvalue
          |   |-ImplicitCastExpr 0x55b45335d558 'float **' <LValueToRValue>
          |   | `-MemberExpr 0x55b45335d508 'float **' lvalue ->hidden_weights 0x55b45316fed8
          |   |   `-ImplicitCastExpr 0x55b45335d4f0 'BPNN *' <LValueToRValue>
          |   |     `-DeclRefExpr 0x55b45335d4d0 'BPNN *' lvalue Var 0x55b45332e178 'new' 'BPNN *'
          |   `-ImplicitCastExpr 0x55b45335d570 'int' <LValueToRValue>
          |     `-DeclRefExpr 0x55b45335d538 'int' lvalue Var 0x55b45332e410 'i' 'int'
          `-ImplicitCastExpr 0x55b45335d5e0 'int' <LValueToRValue>
            `-DeclRefExpr 0x55b45335d5a8 'int' lvalue Var 0x55b45332e490 'j' 'int'
func @bpnn_read(%arg0: !llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> attributes {llvm.linkage = #llvm.linkage<external>} {
  %0 = memref.alloca() : memref<1xi32>
  %1 = memref.cast %0 : memref<1xi32> to memref<?xi32>
  %c0 = arith.constant 0 : index
  %2 = llvm.mlir.undef : i32
  memref.store %2, %1[%c0] : memref<?xi32>
  %3 = memref.alloca() : memref<1xi32>
  %4 = memref.cast %3 : memref<1xi32> to memref<?xi32>
  %c0_0 = arith.constant 0 : index
  %5 = llvm.mlir.undef : i32
  memref.store %5, %4[%c0_0] : memref<?xi32>
  %c1_i64 = arith.constant 1 : i64
  %6 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_1 = arith.constant 1 : i64
  %7 = llvm.alloca %c1_i64_1 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c0_2 = arith.constant 0 : index
  %8 = memref.alloca() : memref<1xi32>
  %9 = memref.cast %8 : memref<1xi32> to memref<?xi32>
  %c0_3 = arith.constant 0 : index
  %10 = llvm.mlir.undef : i32
  memref.store %10, %9[%c0_3] : memref<?xi32>
  %11 = memref.alloca() : memref<1xi32>
  %12 = memref.cast %11 : memref<1xi32> to memref<?xi32>
  %c0_4 = arith.constant 0 : index
  %13 = llvm.mlir.undef : i32
  memref.store %13, %12[%c0_4] : memref<?xi32>
  %c1_i64_5 = arith.constant 1 : i64
  %14 = llvm.alloca %c1_i64_5 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_6 = arith.constant 1 : i64
  %15 = llvm.alloca %c1_i64_6 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %16 = memref.alloca() : memref<1xi32>
  %17 = memref.cast %16 : memref<1xi32> to memref<?xi32>
  %c0_7 = arith.constant 0 : index
  %18 = llvm.mlir.undef : i32
  memref.store %18, %17[%c0_7] : memref<?xi32>
  %19 = memref.alloca() : memref<1xi32>
  %20 = memref.cast %19 : memref<1xi32> to memref<?xi32>
  %c0_8 = arith.constant 0 : index
  %21 = llvm.mlir.undef : i32
  memref.store %21, %20[%c0_8] : memref<?xi32>
  %22 = memref.alloca() : memref<1xi32>
  %23 = memref.cast %22 : memref<1xi32> to memref<?xi32>
  %c0_9 = arith.constant 0 : index
  %24 = llvm.mlir.undef : i32
  memref.store %24, %23[%c0_9] : memref<?xi32>
  %25 = memref.alloca() : memref<1xi32>
  %26 = memref.cast %25 : memref<1xi32> to memref<?xi32>
  %c0_10 = arith.constant 0 : index
  %27 = llvm.mlir.undef : i32
  memref.store %27, %26[%c0_10] : memref<?xi32>
  %28 = memref.alloca() : memref<1xi32>
  %29 = memref.cast %28 : memref<1xi32> to memref<?xi32>
  %c0_11 = arith.constant 0 : index
  %30 = llvm.mlir.undef : i32
  memref.store %30, %29[%c0_11] : memref<?xi32>
  %31 = memref.alloca() : memref<1xi32>
  %32 = memref.cast %31 : memref<1xi32> to memref<?xi32>
  %c0_12 = arith.constant 0 : index
  %33 = llvm.mlir.undef : i32
  memref.store %33, %32[%c0_12] : memref<?xi32>
  %34 = memref.alloca() : memref<1xi32>
  %35 = memref.cast %34 : memref<1xi32> to memref<?xi32>
  %c0_13 = arith.constant 0 : index
  %36 = llvm.mlir.undef : i32
  memref.store %36, %35[%c0_13] : memref<?xi32>
  %c1_i64_14 = arith.constant 1 : i64
  %37 = llvm.alloca %c1_i64_14 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  %c1_i64_15 = arith.constant 1 : i64
  %38 = llvm.alloca %c1_i64_15 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  %c1_i64_16 = arith.constant 1 : i64
  %39 = llvm.alloca %c1_i64_16 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
  llvm.store %arg0, %39 : !llvm.ptr<ptr<i8>>
  %true = arith.constant true
  %40 = memref.alloca() : memref<i1>
  %41 = memref.alloca() : memref<i1>
  memref.store %true, %41[] : memref<i1>
  memref.store %true, %40[] : memref<i1>
  %42 = memref.alloca() : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
  %43 = memref.load %40[] : memref<i1>
  scf.if %43 {
    scf.execute_region {
      %64 = memref.load %40[] : memref<i1>
      scf.if %64 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %44 = memref.load %40[] : memref<i1>
  scf.if %44 {
    scf.execute_region {
      %64 = memref.load %40[] : memref<i1>
      scf.if %64 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %45 = memref.load %40[] : memref<i1>
  scf.if %45 {
    scf.execute_region {
      %64 = memref.load %40[] : memref<i1>
      scf.if %64 {
        scf.execute_region {
          scf.yield
        }
      }
      scf.yield
    }
  }
  %46 = memref.load %40[] : memref<i1>
  scf.if %46 {
    scf.execute_region {
      %64 = memref.load %40[] : memref<i1>
      scf.if %64 {
        scf.execute_region {
          %65 = llvm.load %39 : !llvm.ptr<ptr<i8>>
          %c0_i32 = arith.constant 0 : i32
          %c420_i32 = arith.constant 420 : i32
          %66 = llvm.call @open(%65, %c0_i32, %c420_i32) : (!llvm.ptr<i8>, i32, i32) -> i32
          %c0_17 = arith.constant 0 : index
          memref.store %66, %35[%c0_17] : memref<?xi32>
          %c1_i32 = arith.constant 1 : i32
          %c0_i32_18 = arith.constant 0 : i32
          %67 = arith.subi %c0_i32_18, %c1_i32 : i32
          %c0_19 = arith.constant 0 : index
          %68 = memref.load %35[%c0_19] : memref<?xi32>
          %69 = arith.cmpi eq, %68, %67 : i32
          %70 = arith.extsi %69 : i1 to i32
          %71 = arith.trunci %70 : i32 to i1
          scf.if %71 {
            %72 = memref.load %40[] : memref<i1>
            scf.if %72 {
              scf.execute_region {
                %73 = memref.load %40[] : memref<i1>
                scf.if %73 {
                  scf.execute_region {
                    %74 = llvm.mlir.null : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
                    memref.store %74, %42[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
                    %false = arith.constant false
                    memref.store %false, %40[] : memref<i1>
                    memref.store %false, %41[] : memref<i1>
                    scf.yield
                  }
                }
                scf.yield
              }
            }
          }
          scf.yield
        }
      }
      scf.yield
    }
  }
  %47 = memref.load %40[] : memref<i1>
  scf.if %47 {
    scf.execute_region {
      %64 = llvm.mlir.addressof @str6 : !llvm.ptr<array<14 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %65 = llvm.getelementptr %64[%c0_i32, %c0_i32_17] : (!llvm.ptr<array<14 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %66 = llvm.load %39 : !llvm.ptr<ptr<i8>>
      %67 = llvm.call @printf(%65, %66) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %48 = memref.load %40[] : memref<i1>
  scf.if %48 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %35[%c0_17] : memref<?xi32>
      %65 = memref.cast %32 : memref<?xi32> to memref<?xi32>
      %66 = memref.cast %65 : memref<?xi32> to memref<?xi8>
      %67 = memref.cast %66 : memref<?xi8> to memref<?xi8>
      %68 = "polygeist.memref2pointer"(%67) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %69 = llvm.call @read(%64, %68, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %49 = memref.load %40[] : memref<i1>
  scf.if %49 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %35[%c0_17] : memref<?xi32>
      %65 = memref.cast %29 : memref<?xi32> to memref<?xi32>
      %66 = memref.cast %65 : memref<?xi32> to memref<?xi8>
      %67 = memref.cast %66 : memref<?xi8> to memref<?xi8>
      %68 = "polygeist.memref2pointer"(%67) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %69 = llvm.call @read(%64, %68, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %50 = memref.load %40[] : memref<i1>
  scf.if %50 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %35[%c0_17] : memref<?xi32>
      %65 = memref.cast %26 : memref<?xi32> to memref<?xi32>
      %66 = memref.cast %65 : memref<?xi32> to memref<?xi8>
      %67 = memref.cast %66 : memref<?xi8> to memref<?xi8>
      %68 = "polygeist.memref2pointer"(%67) : (memref<?xi8>) -> !llvm.ptr<i8>
      %c4_i64 = arith.constant 4 : i64
      %69 = llvm.call @read(%64, %68, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %51 = memref.load %40[] : memref<i1>
  scf.if %51 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %32[%c0_17] : memref<?xi32>
      %c0_18 = arith.constant 0 : index
      %65 = memref.load %29[%c0_18] : memref<?xi32>
      %c0_19 = arith.constant 0 : index
      %66 = memref.load %26[%c0_19] : memref<?xi32>
      %67 = call @bpnn_internal_create(%64, %65, %66) : (i32, i32, i32) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
      llvm.store %67, %37 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      scf.yield
    }
  }
  %52 = memref.load %40[] : memref<i1>
  scf.if %52 {
    scf.execute_region {
      %64 = llvm.mlir.addressof @str7 : !llvm.ptr<array<34 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %65 = llvm.getelementptr %64[%c0_i32, %c0_i32_17] : (!llvm.ptr<array<34 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %66 = llvm.load %39 : !llvm.ptr<ptr<i8>>
      %c0_18 = arith.constant 0 : index
      %67 = memref.load %32[%c0_18] : memref<?xi32>
      %c0_19 = arith.constant 0 : index
      %68 = memref.load %29[%c0_19] : memref<?xi32>
      %c0_20 = arith.constant 0 : index
      %69 = memref.load %26[%c0_20] : memref<?xi32>
      %70 = llvm.call @printf(%65, %66, %67, %68, %69) : (!llvm.ptr<i8>, !llvm.ptr<i8>, i32, i32, i32) -> i32
      scf.yield
    }
  }
  %53 = memref.load %40[] : memref<i1>
  scf.if %53 {
    scf.execute_region {
      %64 = llvm.mlir.addressof @str8 : !llvm.ptr<array<25 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %65 = llvm.getelementptr %64[%c0_i32, %c0_i32_17] : (!llvm.ptr<array<25 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %66 = llvm.call @printf(%65) : (!llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %54 = memref.load %40[] : memref<i1>
  scf.if %54 {
    scf.execute_region {
      %c0_i32 = arith.constant 0 : i32
      %c0_17 = arith.constant 0 : index
      memref.store %c0_i32, %17[%c0_17] : memref<?xi32>
      scf.yield
    }
  }
  %55 = memref.load %40[] : memref<i1>
  scf.if %55 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %32[%c0_17] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %65 = arith.addi %64, %c1_i32 : i32
      %c0_18 = arith.constant 0 : index
      %66 = memref.load %29[%c0_18] : memref<?xi32>
      %c1_i32_19 = arith.constant 1 : i32
      %67 = arith.addi %66, %c1_i32_19 : i32
      %68 = arith.muli %65, %67 : i32
      %69 = arith.extui %68 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %70 = arith.muli %69, %c4_i64 : i64
      %71 = arith.trunci %70 : i64 to i32
      %72 = arith.extui %71 : i32 to i64
      %73 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr<i8>
      %74 = llvm.bitcast %73 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %74, %38 : !llvm.ptr<ptr<i8>>
      scf.yield
    }
  }
  %56 = memref.load %40[] : memref<i1>
  scf.if %56 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %35[%c0_17] : memref<?xi32>
      %65 = llvm.load %38 : !llvm.ptr<ptr<i8>>
      %66 = llvm.bitcast %65 : !llvm.ptr<i8> to !llvm.ptr<i8>
      %c0_18 = arith.constant 0 : index
      %67 = memref.load %32[%c0_18] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %68 = arith.addi %67, %c1_i32 : i32
      %c0_19 = arith.constant 0 : index
      %69 = memref.load %29[%c0_19] : memref<?xi32>
      %c1_i32_20 = arith.constant 1 : i32
      %70 = arith.addi %69, %c1_i32_20 : i32
      %71 = arith.muli %68, %70 : i32
      %72 = arith.extui %71 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %73 = arith.muli %72, %c4_i64 : i64
      %74 = llvm.call @read(%64, %66, %73) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %57 = memref.load %40[] : memref<i1>
  scf.if %57 {
    scf.execute_region {
      %64 = memref.load %40[] : memref<i1>
      scf.if %64 {
        scf.execute_region {
          %c0_i32 = arith.constant 0 : i32
          %c0_17 = arith.constant 0 : index
          memref.store %c0_i32, %23[%c0_17] : memref<?xi32>
          %true_18 = arith.constant true
          %65 = memref.alloca() : memref<i1>
          %66 = memref.alloca() : memref<i1>
          memref.store %true_18, %66[] : memref<i1>
          br ^bb1
        ^bb1:  // 2 preds: ^bb0, ^bb2
          %c0_19 = arith.constant 0 : index
          %67 = memref.load %23[%c0_19] : memref<?xi32>
          %c0_20 = arith.constant 0 : index
          %68 = memref.load %32[%c0_20] : memref<?xi32>
          %69 = arith.cmpi sle, %67, %68 : i32
          %70 = arith.extsi %69 : i1 to i32
          %71 = arith.trunci %70 : i32 to i1
          %72 = memref.load %66[] : memref<i1>
          %73 = arith.andi %71, %72 : i1
          cond_br %73, ^bb2, ^bb3
        ^bb2:  // pred: ^bb1
          %74 = memref.load %66[] : memref<i1>
          memref.store %74, %65[] : memref<i1>
          %75 = memref.load %65[] : memref<i1>
          scf.if %75 {
            scf.execute_region {
              %78 = memref.load %65[] : memref<i1>
              scf.if %78 {
                scf.execute_region {
                  %c0_i32_23 = arith.constant 0 : i32
                  %c0_24 = arith.constant 0 : index
                  memref.store %c0_i32_23, %20[%c0_24] : memref<?xi32>
                  %true_25 = arith.constant true
                  %79 = memref.alloca() : memref<i1>
                  %80 = memref.alloca() : memref<i1>
                  memref.store %true_25, %80[] : memref<i1>
                  br ^bb1
                ^bb1:  // 2 preds: ^bb0, ^bb2
                  %c0_26 = arith.constant 0 : index
                  %81 = memref.load %20[%c0_26] : memref<?xi32>
                  %c0_27 = arith.constant 0 : index
                  %82 = memref.load %29[%c0_27] : memref<?xi32>
                  %83 = arith.cmpi sle, %81, %82 : i32
                  %84 = arith.extsi %83 : i1 to i32
                  %85 = arith.trunci %84 : i32 to i1
                  %86 = memref.load %80[] : memref<i1>
                  %87 = arith.andi %85, %86 : i1
                  cond_br %87, ^bb2, ^bb3
                ^bb2:  // pred: ^bb1
                  %88 = memref.load %80[] : memref<i1>
                  memref.store %88, %79[] : memref<i1>
                  %89 = memref.load %79[] : memref<i1>
                  scf.if %89 {
                    scf.execute_region {
                      %94 = memref.load %79[] : memref<i1>
                      scf.if %94 {
                        scf.execute_region {
                          %100 = memref.load %79[] : memref<i1>
                          scf.if %100 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %95 = memref.load %79[] : memref<i1>
                      scf.if %95 {
                        scf.execute_region {
                          %100 = memref.load %79[] : memref<i1>
                          scf.if %100 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %96 = memref.load %79[] : memref<i1>
                      scf.if %96 {
                        scf.execute_region {
                          %100 = llvm.load %37 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
                          %c0_i32_31 = arith.constant 0 : i32
                          %c9_i32 = arith.constant 9 : i32
                          %101 = llvm.getelementptr %100[%c0_i32_31, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
                          %102 = llvm.load %101 : !llvm.ptr<memref<?xmemref<?xf32>>>
                          %c0_32 = arith.constant 0 : index
                          %103 = memref.load %23[%c0_32] : memref<?xi32>
                          %104 = arith.index_cast %103 : i32 to index
                          %105 = "polygeist.subindex"(%102, %104) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                          %106 = "polygeist.subindex"(%105, %c0_2) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                          %c0_33 = arith.constant 0 : index
                          %107 = memref.load %106[%c0_33] : memref<?xmemref<?xf32>>
                          %c0_34 = arith.constant 0 : index
                          %108 = memref.load %20[%c0_34] : memref<?xi32>
                          %109 = arith.index_cast %108 : i32 to index
                          %110 = "polygeist.subindex"(%107, %109) : (memref<?xf32>, index) -> memref<?xf32>
                          %111 = "polygeist.subindex"(%110, %c0_2) : (memref<?xf32>, index) -> memref<?xf32>
                          %112 = memref.cast %111 : memref<?xf32> to memref<?xf32>
                          %113 = memref.cast %112 : memref<?xf32> to memref<?xi8>
                          %114 = "polygeist.memref2pointer"(%113) : (memref<?xi8>) -> !llvm.ptr<i8>
                          scf.yield
                        }
                      }
                      %97 = memref.load %79[] : memref<i1>
                      scf.if %97 {
                        scf.execute_region {
                          %100 = llvm.load %38 : !llvm.ptr<ptr<i8>>
                          %c0_31 = arith.constant 0 : index
                          %101 = memref.load %17[%c0_31] : memref<?xi32>
                          %102 = arith.index_cast %101 : i32 to index
                          %103 = arith.index_cast %102 : index to i64
                          %104 = llvm.getelementptr %100[%103] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                          llvm.store %104, %14 : !llvm.ptr<ptr<i8>>
                          scf.yield
                        }
                      }
                      %98 = memref.load %79[] : memref<i1>
                      scf.if %98 {
                        scf.execute_region {
                          %c4_i64 = arith.constant 4 : i64
                          %c4_i32 = arith.constant 4 : i32
                          %c0_31 = arith.constant 0 : index
                          memref.store %c4_i32, %9[%c0_31] : memref<?xi32>
                          scf.yield
                        }
                      }
                      %99 = memref.load %79[] : memref<i1>
                      scf.if %99 {
                        scf.execute_region {
                          %100 = memref.load %79[] : memref<i1>
                          scf.if %100 {
                            scf.execute_region {
                              %c0_i32_31 = arith.constant 0 : i32
                              %c0_32 = arith.constant 0 : index
                              memref.store %c0_i32_31, %12[%c0_32] : memref<?xi32>
                              %true_33 = arith.constant true
                              %101 = memref.alloca() : memref<i1>
                              %102 = memref.alloca() : memref<i1>
                              memref.store %true_33, %102[] : memref<i1>
                              br ^bb1
                            ^bb1:  // 2 preds: ^bb0, ^bb2
                              %c0_34 = arith.constant 0 : index
                              %103 = memref.load %12[%c0_34] : memref<?xi32>
                              %c0_35 = arith.constant 0 : index
                              %104 = memref.load %9[%c0_35] : memref<?xi32>
                              %105 = arith.cmpi slt, %103, %104 : i32
                              %106 = arith.extsi %105 : i1 to i32
                              %107 = arith.trunci %106 : i32 to i1
                              %108 = memref.load %102[] : memref<i1>
                              %109 = arith.andi %107, %108 : i1
                              cond_br %109, ^bb2, ^bb3
                            ^bb2:  // pred: ^bb1
                              %110 = memref.load %102[] : memref<i1>
                              memref.store %110, %101[] : memref<i1>
                              %111 = llvm.load %15 : !llvm.ptr<ptr<i8>>
                              %c1_i64_36 = arith.constant 1 : i64
                              %112 = llvm.getelementptr %111[%c1_i64_36] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                              llvm.store %112, %15 : !llvm.ptr<ptr<i8>>
                              %113 = llvm.load %14 : !llvm.ptr<ptr<i8>>
                              %c1_i64_37 = arith.constant 1 : i64
                              %114 = llvm.getelementptr %113[%c1_i64_37] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
                              llvm.store %114, %14 : !llvm.ptr<ptr<i8>>
                              %115 = llvm.load %113 : !llvm.ptr<i8>
                              llvm.store %115, %111 : !llvm.ptr<i8>
                              %c0_38 = arith.constant 0 : index
                              %116 = memref.load %12[%c0_38] : memref<?xi32>
                              %c1_i32_39 = arith.constant 1 : i32
                              %117 = arith.addi %116, %c1_i32_39 : i32
                              %c0_40 = arith.constant 0 : index
                              memref.store %117, %12[%c0_40] : memref<?xi32>
                              br ^bb1
                            ^bb3:  // pred: ^bb1
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      scf.yield
                    }
                  }
                  %90 = memref.load %79[] : memref<i1>
                  scf.if %90 {
                    scf.execute_region {
                      scf.yield
                    }
                  }
                  %91 = memref.load %79[] : memref<i1>
                  scf.if %91 {
                    scf.execute_region {
                      %c4_i64 = arith.constant 4 : i64
                      %c0_31 = arith.constant 0 : index
                      %94 = memref.load %17[%c0_31] : memref<?xi32>
                      %95 = arith.addi %94, %c4_i64 : i32
                      %c0_32 = arith.constant 0 : index
                      memref.store %95, %17[%c0_32] : memref<?xi32>
                      scf.yield
                    }
                  }
                  %c0_28 = arith.constant 0 : index
                  %92 = memref.load %20[%c0_28] : memref<?xi32>
                  %c1_i32_29 = arith.constant 1 : i32
                  %93 = arith.addi %92, %c1_i32_29 : i32
                  %c0_30 = arith.constant 0 : index
                  memref.store %93, %20[%c0_30] : memref<?xi32>
                  br ^bb1
                ^bb3:  // pred: ^bb1
                  scf.yield
                }
              }
              scf.yield
            }
          }
          %c0_21 = arith.constant 0 : index
          %76 = memref.load %23[%c0_21] : memref<?xi32>
          %c1_i32 = arith.constant 1 : i32
          %77 = arith.addi %76, %c1_i32 : i32
          %c0_22 = arith.constant 0 : index
          memref.store %77, %23[%c0_22] : memref<?xi32>
          br ^bb1
        ^bb3:  // pred: ^bb1
          scf.yield
        }
      }
      scf.yield
    }
  }
  %58 = memref.load %40[] : memref<i1>
  scf.if %58 {
    scf.execute_region {
      %64 = llvm.load %38 : !llvm.ptr<ptr<i8>>
      %65 = llvm.bitcast %64 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.call @free(%65) : (!llvm.ptr<i8>) -> ()
      scf.yield
    }
  }
  %59 = memref.load %40[] : memref<i1>
  scf.if %59 {
    scf.execute_region {
      %64 = llvm.mlir.addressof @str9 : !llvm.ptr<array<31 x i8>>
      %c0_i32 = arith.constant 0 : i32
      %c0_i32_17 = arith.constant 0 : i32
      %65 = llvm.getelementptr %64[%c0_i32, %c0_i32_17] : (!llvm.ptr<array<31 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %66 = llvm.call @printf(%65) : (!llvm.ptr<i8>) -> i32
      scf.yield
    }
  }
  %60 = memref.load %40[] : memref<i1>
  scf.if %60 {
    scf.execute_region {
      %c0_i32 = arith.constant 0 : i32
      %c0_17 = arith.constant 0 : index
      memref.store %c0_i32, %17[%c0_17] : memref<?xi32>
      scf.yield
    }
  }
  %61 = memref.load %40[] : memref<i1>
  scf.if %61 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %29[%c0_17] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %65 = arith.addi %64, %c1_i32 : i32
      %c0_18 = arith.constant 0 : index
      %66 = memref.load %26[%c0_18] : memref<?xi32>
      %c1_i32_19 = arith.constant 1 : i32
      %67 = arith.addi %66, %c1_i32_19 : i32
      %68 = arith.muli %65, %67 : i32
      %69 = arith.extui %68 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %70 = arith.muli %69, %c4_i64 : i64
      %71 = arith.trunci %70 : i64 to i32
      %72 = arith.extui %71 : i32 to i64
      %73 = llvm.call @malloc(%72) : (i64) -> !llvm.ptr<i8>
      %74 = llvm.bitcast %73 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %74, %38 : !llvm.ptr<ptr<i8>>
      scf.yield
    }
  }
  %62 = memref.load %40[] : memref<i1>
  scf.if %62 {
    scf.execute_region {
      %c0_17 = arith.constant 0 : index
      %64 = memref.load %35[%c0_17] : memref<?xi32>
      %65 = llvm.load %38 : !llvm.ptr<ptr<i8>>
      %66 = llvm.bitcast %65 : !llvm.ptr<i8> to !llvm.ptr<i8>
      %c0_18 = arith.constant 0 : index
      %67 = memref.load %29[%c0_18] : memref<?xi32>
      %c1_i32 = arith.constant 1 : i32
      %68 = arith.addi %67, %c1_i32 : i32
      %c0_19 = arith.constant 0 : index
      %69 = memref.load %26[%c0_19] : memref<?xi32>
      %c1_i32_20 = arith.constant 1 : i32
      %70 = arith.addi %69, %c1_i32_20 : i32
      %71 = arith.muli %68, %70 : i32
      %72 = arith.extui %71 : i32 to i64
      %c4_i64 = arith.constant 4 : i64
      %73 = arith.muli %72, %c4_i64 : i64
      %74 = llvm.call @read(%64, %66, %73) : (i32, !llvm.ptr<i8>, i64) -> i64
      scf.yield
    }
  }
  %63 = memref.load %40[] : memref<i1>
  scf.if %63 {
    scf.execute_region {
      %64 = memref.load %40[] : memref<i1>
      scf.if %64 {
        scf.execute_region {
          %c0_i32 = arith.constant 0 : i32
          %c0_17 = arith.constant 0 : index
          memref.store %c0_i32, %23[%c0_17] : memref<?xi32>
          %true_18 = arith.constant true
          %65 = memref.alloca() : memref<i1>
          %66 = memref.alloca() : memref<i1>
          memref.store %true_18, %66[] : memref<i1>
          br ^bb1
        ^bb1:  // pred: ^bb0
          %c0_19 = arith.constant 0 : index
          %67 = memref.load %23[%c0_19] : memref<?xi32>
          %c0_20 = arith.constant 0 : index
          %68 = memref.load %29[%c0_20] : memref<?xi32>
          %69 = arith.cmpi sle, %67, %68 : i32
          %70 = arith.extsi %69 : i1 to i32
          %71 = arith.trunci %70 : i32 to i1
          %72 = memref.load %66[] : memref<i1>
          %73 = arith.andi %71, %72 : i1
          cond_br %73, ^bb2, ^bb3
        ^bb2:  // pred: ^bb1
          %74 = memref.load %66[] : memref<i1>
          memref.store %74, %65[] : memref<i1>
          %75 = memref.load %65[] : memref<i1>
          scf.if %75 {
            scf.execute_region {
              %76 = memref.load %65[] : memref<i1>
              scf.if %76 {
                scf.execute_region {
                  %c0_i32_21 = arith.constant 0 : i32
                  %c0_22 = arith.constant 0 : index
                  memref.store %c0_i32_21, %20[%c0_22] : memref<?xi32>
                  %true_23 = arith.constant true
                  %77 = memref.alloca() : memref<i1>
                  %78 = memref.alloca() : memref<i1>
                  memref.store %true_23, %78[] : memref<i1>
                  br ^bb1
                ^bb1:  // pred: ^bb0
                  %c0_24 = arith.constant 0 : index
                  %79 = memref.load %20[%c0_24] : memref<?xi32>
                  %c0_25 = arith.constant 0 : index
                  %80 = memref.load %26[%c0_25] : memref<?xi32>
                  %81 = arith.cmpi sle, %79, %80 : i32
                  %82 = arith.extsi %81 : i1 to i32
                  %83 = arith.trunci %82 : i32 to i1
                  %84 = memref.load %78[] : memref<i1>
                  %85 = arith.andi %83, %84 : i1
                  cond_br %85, ^bb2, ^bb3
                ^bb2:  // pred: ^bb1
                  %86 = memref.load %78[] : memref<i1>
                  memref.store %86, %77[] : memref<i1>
                  %87 = memref.load %77[] : memref<i1>
                  scf.if %87 {
                    scf.execute_region {
                      %88 = memref.load %77[] : memref<i1>
                      scf.if %88 {
                        scf.execute_region {
                          %91 = memref.load %77[] : memref<i1>
                          scf.if %91 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %89 = memref.load %77[] : memref<i1>
                      scf.if %89 {
                        scf.execute_region {
                          %91 = memref.load %77[] : memref<i1>
                          scf.if %91 {
                            scf.execute_region {
                              scf.yield
                            }
                          }
                          scf.yield
                        }
                      }
                      %90 = memref.load %77[] : memref<i1>
                      scf.if %90 {
                        scf.execute_region {
                          %91 = llvm.load %37 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
                          %c0_i32_26 = arith.constant 0 : i32
                          %c10_i32 = arith.constant 10 : i32
                          %92 = llvm.getelementptr %91[%c0_i32_26, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
                          %93 = llvm.load %92 : !llvm.ptr<memref<?xmemref<?xf32>>>
                          %c0_27 = arith.constant 0 : index
                          %94 = memref.load %23[%c0_27] : memref<?xi32>
                          %95 = arith.index_cast %94 : i32 to index
                          %96 = "polygeist.subindex"(%93, %95) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                          %97 = "polygeist.subindex"(%96, %c0_2) : (memref<?xmemref<?xf32>>, index) -> memref<?xmemref<?xf32>>
                          %c0_28 = arith.constant 0 : index
                          %98 = memref.load %97[%c0_28] : memref<?xmemref<?xf32>>
                          %c0_29 = arith.constant 0 : index
                          %99 = memref.load %20[%c0_29] : memref<?xi32>
                          %100 = arith.index_cast %99 : i32 to index
                          %101 = "polygeist.subindex"(%98, %100) : (memref<?xf32>, index) -> memref<?xf32>
                          %102 = "polygeist.subindex"(%101, %c0_2) : (memref<?xf32>, index) -> memref<?xf32>
                          %103 = memref.cast %102 : memref<?xf32> to memref<?xf32>
                          %104 = memref.cast %103 : memref<?xf32> to memref<?xi8>
                        }
                      }
                    }
                  }
                ^bb3:  // pred: ^bb1
                }
              }
            }
          }
        ^bb3:  // pred: ^bb1
        }
      }
    }
  }
}
 lhs.val: %7 = llvm.alloca %c1_i64_1 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
 tostore: %104 = memref.cast %103 : memref<?xf32> to memref<?xi8>
error: 'std.call' op operand type mismatch: expected operand type 'f32', but provided 'f64' for operand number 0
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"}  {
  llvm.mlir.global internal constant @str10("Done\0A\00")
  llvm.func @close(i32) -> i32
  llvm.mlir.global internal constant @str9("Done\0AReading hidden weights...\00")
  llvm.mlir.global internal constant @str8("Reading input weights...\00")
  llvm.mlir.global internal constant @str7("'%s' contains a %dx%dx%d network\0A\00")
  llvm.func @read(i32, !llvm.ptr<i8>, i64) -> i64
  llvm.mlir.global internal constant @str6("Reading '%s'\0A\00")
  llvm.func @open() -> i32
  llvm.func @fclose(!llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i32
  llvm.func @fwrite(!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
  llvm.mlir.global internal constant @str5("Saving %dx%dx%d network to '%s'\0A\00")
  llvm.func @fopen(!llvm.ptr<i8>, !llvm.ptr<i8>) -> !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>
  llvm.mlir.global internal constant @str4("w+\00")
  llvm.func @free(!llvm.ptr<i8>)
  llvm.mlir.global internal constant @str3("BPNN_CREATE: Couldn't allocate neural network\0A\00")
  llvm.func @malloc(i64) -> !llvm.ptr<i8>
  llvm.mlir.global internal constant @str2("Random number generator seed: %d\0A\00")
  llvm.mlir.global internal constant @str1("ALLOC_2D_DBL: Couldn't allocate array of dbl ptrs\0A\00")
  llvm.func @printf(!llvm.ptr<i8>, ...) -> i32
  llvm.mlir.global internal constant @str0("ALLOC_1D_DBL: Couldn't allocate array of floats\0A\00")
  func @drnd() -> f32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %cst = arith.constant 2.14748365E+9 : f32
    %0 = call @rand() : () -> i32
    %1 = arith.sitofp %0 : i32 to f32
    %2 = arith.divf %1, %cst : f32
    return %2 : f32
  }
  func private @rand() -> i32 attributes {llvm.linkage = #llvm.linkage<external>}
  func @dpn1() -> f32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %cst = arith.constant 1.000000e+00 : f64
    %cst_0 = arith.constant 2.000000e+00 : f64
    %0 = call @drnd() : () -> f32
    %1 = arith.extf %0 : f32 to f64
    %2 = arith.mulf %1, %cst_0 : f64
    %3 = arith.subf %2, %cst : f64
    %4 = arith.truncf %3 : f64 to f32
    return %4 : f32
  }
  func @squash(%arg0: f32) -> f32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %cst = arith.constant 1.000000e+00 : f64
    %0 = arith.negf %arg0 : f32
    %1 = arith.extf %0 : f32 to f64
    %2 = math.exp %1 : f64
    %3 = arith.addf %cst, %2 : f64
    %4 = arith.divf %cst, %3 : f64
    %5 = arith.truncf %4 : f64 to f32
    return %5 : f32
  }
  func @alloc_1d_dbl(%arg0: i32) -> memref<?xf32> attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i32 = arith.constant 0 : i32
    %c4 = arith.constant 4 : index
    %c4_i64 = arith.constant 4 : i64
    %true = arith.constant true
    %0 = memref.alloca() : memref<memref<?xf32>>
    %1 = arith.extui %arg0 : i32 to i64
    %2 = arith.muli %1, %c4_i64 : i64
    %3 = arith.trunci %2 : i64 to i32
    %4 = arith.extui %3 : i32 to i64
    %5 = arith.index_cast %4 : i64 to index
    %6 = arith.divui %5, %c4 : index
    %7 = memref.alloc(%6) : memref<?xf32>
    %8 = affine.load %0[] : memref<memref<?xf32>>
    %9 = llvm.mlir.null : !llvm.ptr<i8>
    %10 = "polygeist.pointer2memref"(%9) : (!llvm.ptr<i8>) -> memref<?xf32>
    %11 = "polygeist.memref2pointer"(%7) : (memref<?xf32>) -> !llvm.ptr<f32>
    %12 = llvm.bitcast %9 : !llvm.ptr<i8> to !llvm.ptr<f32>
    %13 = llvm.icmp "eq" %11, %12 : !llvm.ptr<f32>
    %14 = arith.xori %13, %true : i1
    %15 = scf.if %13 -> (memref<?xf32>) {
      %17 = llvm.mlir.addressof @str0 : !llvm.ptr<array<49 x i8>>
      %18 = llvm.getelementptr %17[%c0_i32, %c0_i32] : (!llvm.ptr<array<49 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %19 = llvm.call @printf(%18) : (!llvm.ptr<i8>) -> i32
      affine.store %10, %0[] : memref<memref<?xf32>>
      scf.yield %10 : memref<?xf32>
    } else {
      scf.yield %8 : memref<?xf32>
    }
    %16 = scf.if %14 -> (memref<?xf32>) {
      affine.store %7, %0[] : memref<memref<?xf32>>
      scf.yield %7 : memref<?xf32>
    } else {
      scf.yield %15 : memref<?xf32>
    }
    return %16 : memref<?xf32>
  }
  func @alloc_2d_dbl(%arg0: i32, %arg1: i32) -> memref<?xmemref<?xf32>> attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %c8 = arith.constant 8 : index
    %c8_i64 = arith.constant 8 : i64
    %true = arith.constant true
    %0 = memref.alloca() : memref<memref<?xmemref<?xf32>>>
    %1 = arith.extui %arg0 : i32 to i64
    %2 = arith.muli %1, %c8_i64 : i64
    %3 = arith.trunci %2 : i64 to i32
    %4 = arith.extui %3 : i32 to i64
    %5 = arith.index_cast %4 : i64 to index
    %6 = arith.divui %5, %c8 : index
    %7 = memref.alloc(%6) : memref<?xmemref<?xf32>>
    %8 = affine.load %0[] : memref<memref<?xmemref<?xf32>>>
    %9 = llvm.mlir.null : !llvm.ptr<i8>
    %10 = "polygeist.pointer2memref"(%9) : (!llvm.ptr<i8>) -> memref<?xmemref<?xf32>>
    %11 = "polygeist.memref2pointer"(%7) : (memref<?xmemref<?xf32>>) -> !llvm.ptr<memref<?xf32>>
    %12 = llvm.bitcast %9 : !llvm.ptr<i8> to !llvm.ptr<memref<?xf32>>
    %13 = llvm.icmp "eq" %11, %12 : !llvm.ptr<memref<?xf32>>
    %14 = arith.xori %13, %true : i1
    %15 = scf.if %13 -> (memref<?xmemref<?xf32>>) {
      %17 = llvm.mlir.addressof @str1 : !llvm.ptr<array<51 x i8>>
      %18 = llvm.getelementptr %17[%c0_i32, %c0_i32] : (!llvm.ptr<array<51 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %19 = llvm.call @printf(%18) : (!llvm.ptr<i8>) -> i32
      affine.store %10, %0[] : memref<memref<?xmemref<?xf32>>>
      scf.yield %10 : memref<?xmemref<?xf32>>
    } else {
      scf.yield %8 : memref<?xmemref<?xf32>>
    }
    %16 = scf.if %14 -> (memref<?xmemref<?xf32>>) {
      %17 = arith.index_cast %arg0 : i32 to index
      scf.for %arg2 = %c0 to %17 step %c1 {
        %18 = call @alloc_1d_dbl(%arg1) : (i32) -> memref<?xf32>
        memref.store %18, %7[%arg2] : memref<?xmemref<?xf32>>
      }
      affine.store %7, %0[] : memref<memref<?xmemref<?xf32>>>
      scf.yield %7 : memref<?xmemref<?xf32>>
    } else {
      scf.yield %15 : memref<?xmemref<?xf32>>
    }
    return %16 : memref<?xmemref<?xf32>>
  }
  func @bpnn_randomize_weights(%arg0: memref<?xmemref<?xf32>>, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant 2.14748365E+9 : f32
    %0 = llvm.mlir.undef : i32
    %1 = arith.addi %arg1, %c1_i32 : i32
    %2 = arith.index_cast %1 : i32 to index
    scf.for %arg3 = %c0 to %2 step %c1 {
      %3 = arith.addi %arg2, %c1_i32 : i32
      %4 = arith.index_cast %3 : i32 to index
      scf.for %arg4 = %c0 to %4 step %c1 {
        %5 = memref.load %arg0[%arg3] : memref<?xmemref<?xf32>>
        %6 = call @rand() : () -> i32
        %7 = arith.sitofp %6 : i32 to f32
        %8 = arith.divf %7, %cst : f32
        memref.store %8, %5[%arg4] : memref<?xf32>
      }
    }
    return %0 : i32
  }
  func @bpnn_randomize_row(%arg0: memref<?xf32>, %arg1: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant 1.000000e-01 : f64
    %0 = llvm.mlir.undef : i32
    %1 = arith.addi %arg1, %c1_i32 : i32
    %2 = arith.index_cast %1 : i32 to index
    scf.for %arg2 = %c0 to %2 step %c1 {
      %3 = arith.truncf %cst : f64 to f32
      memref.store %3, %arg0[%arg2] : memref<?xf32>
    }
    return %0 : i32
  }
  func @bpnn_zero_weights(%arg0: memref<?xmemref<?xf32>>, %arg1: i32, %arg2: i32) -> i32 attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %0 = llvm.mlir.undef : i32
    %1 = arith.addi %arg1, %c1_i32 : i32
    %2 = arith.index_cast %1 : i32 to index
    scf.for %arg3 = %c0 to %2 step %c1 {
      %3 = arith.addi %arg2, %c1_i32 : i32
      %4 = arith.index_cast %3 : i32 to index
      scf.for %arg4 = %c0 to %4 step %c1 {
        %5 = memref.load %arg0[%arg3] : memref<?xmemref<?xf32>>
        memref.store %cst, %5[%arg4] : memref<?xf32>
      }
    }
    return %0 : i32
  }
  func @bpnn_initialize(%arg0: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c0_i32 = arith.constant 0 : i32
    %0 = llvm.mlir.addressof @str2 : !llvm.ptr<array<34 x i8>>
    %1 = llvm.getelementptr %0[%c0_i32, %c0_i32] : (!llvm.ptr<array<34 x i8>>, i32, i32) -> !llvm.ptr<i8>
    %2 = llvm.call @printf(%1, %arg0) : (!llvm.ptr<i8>, i32) -> i32
    call @srand(%arg0) : (i32) -> ()
    return
  }
  func private @srand(i32) attributes {llvm.linkage = #llvm.linkage<external>}
  func @bpnn_internal_create(%arg0: i32, %arg1: i32, %arg2: i32) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> attributes {llvm.linkage = #llvm.linkage<external>} {
    %c12_i32 = arith.constant 12 : i32
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c96_i64 = arith.constant 96 : i64
    %c1_i64 = arith.constant 1 : i64
    %true = arith.constant true
    %0 = llvm.alloca %c1_i64 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %1 = memref.alloca() : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %2 = llvm.load %0 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %3 = llvm.call @malloc(%c96_i64) : (i64) -> !llvm.ptr<i8>
    %4 = llvm.bitcast %3 : !llvm.ptr<i8> to !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    llvm.store %4, %0 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %5 = affine.load %1[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %6 = llvm.mlir.null : !llvm.ptr<i8>
    %7 = llvm.bitcast %6 : !llvm.ptr<i8> to !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    %8 = llvm.icmp "eq" %4, %7 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    %9 = arith.xori %8, %true : i1
    %10 = scf.if %8 -> (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) {
      %12 = llvm.mlir.addressof @str3 : !llvm.ptr<array<47 x i8>>
      %13 = llvm.getelementptr %12[%c0_i32, %c0_i32] : (!llvm.ptr<array<47 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %14 = llvm.call @printf(%13) : (!llvm.ptr<i8>) -> i32
      %15 = llvm.mlir.null : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
      affine.store %15, %1[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      scf.yield %15 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    } else {
      scf.yield %5 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    }
    %11 = scf.if %9 -> (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) {
      %12 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      llvm.store %arg0, %12 : !llvm.ptr<i32>
      %13 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      llvm.store %arg1, %13 : !llvm.ptr<i32>
      %14 = llvm.getelementptr %4[%c0_i32, %c2_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
      llvm.store %arg2, %14 : !llvm.ptr<i32>
      %15 = llvm.getelementptr %4[%c0_i32, %c3_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
      %16 = arith.addi %arg0, %c1_i32 : i32
      %17 = call @alloc_1d_dbl(%16) : (i32) -> memref<?xf32>
      llvm.store %17, %15 : !llvm.ptr<memref<?xf32>>
      %18 = llvm.getelementptr %4[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
      %19 = arith.addi %arg1, %c1_i32 : i32
      %20 = call @alloc_1d_dbl(%19) : (i32) -> memref<?xf32>
      llvm.store %20, %18 : !llvm.ptr<memref<?xf32>>
      %21 = llvm.getelementptr %4[%c0_i32, %c5_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
      %22 = arith.addi %arg2, %c1_i32 : i32
      %23 = call @alloc_1d_dbl(%22) : (i32) -> memref<?xf32>
      llvm.store %23, %21 : !llvm.ptr<memref<?xf32>>
      %24 = llvm.getelementptr %4[%c0_i32, %c6_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
      %25 = arith.addi %arg1, %c1_i32 : i32
      %26 = call @alloc_1d_dbl(%25) : (i32) -> memref<?xf32>
      llvm.store %26, %24 : !llvm.ptr<memref<?xf32>>
      %27 = llvm.getelementptr %4[%c0_i32, %c7_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
      %28 = arith.addi %arg2, %c1_i32 : i32
      %29 = call @alloc_1d_dbl(%28) : (i32) -> memref<?xf32>
      llvm.store %29, %27 : !llvm.ptr<memref<?xf32>>
      %30 = llvm.getelementptr %4[%c0_i32, %c8_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
      %31 = arith.addi %arg2, %c1_i32 : i32
      %32 = call @alloc_1d_dbl(%31) : (i32) -> memref<?xf32>
      llvm.store %32, %30 : !llvm.ptr<memref<?xf32>>
      %33 = llvm.getelementptr %4[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %34 = arith.addi %arg0, %c1_i32 : i32
      %35 = arith.addi %arg1, %c1_i32 : i32
      %36 = call @alloc_2d_dbl(%34, %35) : (i32, i32) -> memref<?xmemref<?xf32>>
      llvm.store %36, %33 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %37 = llvm.getelementptr %4[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %38 = arith.addi %arg1, %c1_i32 : i32
      %39 = arith.addi %arg2, %c1_i32 : i32
      %40 = call @alloc_2d_dbl(%38, %39) : (i32, i32) -> memref<?xmemref<?xf32>>
      llvm.store %40, %37 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %41 = llvm.getelementptr %4[%c0_i32, %c11_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %42 = arith.addi %arg0, %c1_i32 : i32
      %43 = arith.addi %arg1, %c1_i32 : i32
      %44 = call @alloc_2d_dbl(%42, %43) : (i32, i32) -> memref<?xmemref<?xf32>>
      llvm.store %44, %41 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %45 = llvm.getelementptr %4[%c0_i32, %c12_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %46 = arith.addi %arg1, %c1_i32 : i32
      %47 = arith.addi %arg2, %c1_i32 : i32
      %48 = call @alloc_2d_dbl(%46, %47) : (i32, i32) -> memref<?xmemref<?xf32>>
      llvm.store %48, %45 : !llvm.ptr<memref<?xmemref<?xf32>>>
      affine.store %4, %1[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      scf.yield %4 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    } else {
      scf.yield %10 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    }
    return %11 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
  }
  func @bpnn_free(%arg0: !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c12_i32 = arith.constant 12 : i32
    %c10_i32 = arith.constant 10 : i32
    %c11_i32 = arith.constant 11 : i32
    %c9_i32 = arith.constant 9 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = llvm.getelementptr %arg0[%c0_i32, %c0_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %1 = llvm.load %0 : !llvm.ptr<i32>
    %2 = llvm.getelementptr %arg0[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %3 = llvm.load %2 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %arg0[%c0_i32, %c3_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %5 = llvm.load %4 : !llvm.ptr<memref<?xf32>>
    memref.dealloc %5 : memref<?xf32>
    %6 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %7 = llvm.load %6 : !llvm.ptr<memref<?xf32>>
    memref.dealloc %7 : memref<?xf32>
    %8 = llvm.getelementptr %arg0[%c0_i32, %c5_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %9 = llvm.load %8 : !llvm.ptr<memref<?xf32>>
    memref.dealloc %9 : memref<?xf32>
    %10 = llvm.getelementptr %arg0[%c0_i32, %c6_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %11 = llvm.load %10 : !llvm.ptr<memref<?xf32>>
    memref.dealloc %11 : memref<?xf32>
    %12 = llvm.getelementptr %arg0[%c0_i32, %c7_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %13 = llvm.load %12 : !llvm.ptr<memref<?xf32>>
    memref.dealloc %13 : memref<?xf32>
    %14 = llvm.getelementptr %arg0[%c0_i32, %c8_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %15 = llvm.load %14 : !llvm.ptr<memref<?xf32>>
    memref.dealloc %15 : memref<?xf32>
    %16 = arith.addi %1, %c1_i32 : i32
    %17 = arith.index_cast %16 : i32 to index
    scf.for %arg1 = %c0 to %17 step %c1 {
      %29 = llvm.getelementptr %arg0[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %30 = llvm.load %29 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %31 = memref.load %30[%arg1] : memref<?xmemref<?xf32>>
      memref.dealloc %31 : memref<?xf32>
      %32 = llvm.getelementptr %arg0[%c0_i32, %c11_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %33 = llvm.load %32 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %34 = memref.load %33[%arg1] : memref<?xmemref<?xf32>>
      memref.dealloc %34 : memref<?xf32>
    }
    %18 = llvm.getelementptr %arg0[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %19 = llvm.load %18 : !llvm.ptr<memref<?xmemref<?xf32>>>
    memref.dealloc %19 : memref<?xmemref<?xf32>>
    %20 = llvm.getelementptr %arg0[%c0_i32, %c11_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %21 = llvm.load %20 : !llvm.ptr<memref<?xmemref<?xf32>>>
    memref.dealloc %21 : memref<?xmemref<?xf32>>
    %22 = arith.addi %3, %c1_i32 : i32
    %23 = arith.index_cast %22 : i32 to index
    scf.for %arg1 = %c0 to %23 step %c1 {
      %29 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %30 = llvm.load %29 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %31 = memref.load %30[%arg1] : memref<?xmemref<?xf32>>
      memref.dealloc %31 : memref<?xf32>
      %32 = llvm.getelementptr %arg0[%c0_i32, %c12_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %33 = llvm.load %32 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %34 = memref.load %33[%arg1] : memref<?xmemref<?xf32>>
      memref.dealloc %34 : memref<?xf32>
    }
    %24 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %25 = llvm.load %24 : !llvm.ptr<memref<?xmemref<?xf32>>>
    memref.dealloc %25 : memref<?xmemref<?xf32>>
    %26 = llvm.getelementptr %arg0[%c0_i32, %c12_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %27 = llvm.load %26 : !llvm.ptr<memref<?xmemref<?xf32>>>
    memref.dealloc %27 : memref<?xmemref<?xf32>>
    %28 = llvm.bitcast %arg0 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> to !llvm.ptr<i8>
    llvm.call @free(%28) : (!llvm.ptr<i8>) -> ()
    return
  }
  func @bpnn_create(%arg0: i32, %arg1: i32, %arg2: i32) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> attributes {llvm.linkage = #llvm.linkage<external>} {
    %c8_i32 = arith.constant 8 : i32
    %c12_i32 = arith.constant 12 : i32
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.alloca %c1_i64 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %1 = llvm.load %0 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %2 = call @bpnn_internal_create(%arg0, %arg1, %arg2) : (i32, i32, i32) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    llvm.store %2, %0 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %3 = llvm.getelementptr %2[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %4 = llvm.load %3 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %5 = call @bpnn_randomize_weights(%4, %arg0, %arg1) : (memref<?xmemref<?xf32>>, i32, i32) -> i32
    %6 = llvm.getelementptr %2[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %7 = llvm.load %6 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %8 = call @bpnn_randomize_weights(%7, %arg1, %arg2) : (memref<?xmemref<?xf32>>, i32, i32) -> i32
    %9 = llvm.getelementptr %2[%c0_i32, %c11_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %10 = llvm.load %9 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %11 = call @bpnn_zero_weights(%10, %arg0, %arg1) : (memref<?xmemref<?xf32>>, i32, i32) -> i32
    %12 = llvm.getelementptr %2[%c0_i32, %c12_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %13 = llvm.load %12 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %14 = call @bpnn_zero_weights(%13, %arg1, %arg2) : (memref<?xmemref<?xf32>>, i32, i32) -> i32
    %15 = llvm.getelementptr %2[%c0_i32, %c8_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %16 = llvm.load %15 : !llvm.ptr<memref<?xf32>>
    %17 = call @bpnn_randomize_row(%16, %arg2) : (memref<?xf32>, i32) -> i32
    return %2 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
  }
  func @bpnn_layerforward(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xmemref<?xf32>>, %arg3: i32, %arg4: i32) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 1.000000e+00 : f32
    affine.store %cst_0, %arg0[0] : memref<?xf32>
    %0 = arith.addi %arg4, %c1_i32 : i32
    %1 = arith.index_cast %0 : i32 to index
    scf.for %arg5 = %c1 to %1 step %c1 {
      %2 = arith.subi %arg5, %c1 : index
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.addi %3, %c1_i32 : i32
      %5 = arith.index_cast %4 : i32 to index
      %6 = arith.index_cast %4 : i32 to index
      %7 = arith.addi %arg3, %c1_i32 : i32
      %8 = arith.index_cast %7 : i32 to index
      %9:2 = scf.for %arg6 = %c0 to %8 step %c1 iter_args(%arg7 = %cst, %arg8 = %cst) -> (f32, f32) {
        %12 = memref.load %arg2[%arg6] : memref<?xmemref<?xf32>>
        %13 = memref.load %12[%5] : memref<?xf32>
        %14 = memref.load %arg0[%arg6] : memref<?xf32>
        %15 = arith.mulf %13, %14 : f32
        %16 = arith.addf %arg7, %15 : f32
        scf.yield %16, %16 : f32, f32
      }
      %10 = arith.extf %9#1 : f32 to f64
      %11 = call @squash(%10) : (f64) -> f32
      memref.store %11, %arg1[%6] : memref<?xf32>
    }
    return
  }
  func @bpnn_output_error(%arg0: memref<?xf32>, %arg1: memref<?xf32>, %arg2: memref<?xf32>, %arg3: i32, %arg4: memref<?xf32>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %cst = arith.constant 0.000000e+00 : f64
    %cst_0 = arith.constant 1.000000e+00 : f64
    %c1_i32 = arith.constant 1 : i32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %0 = arith.addi %arg3, %c1_i32 : i32
    %1 = arith.index_cast %0 : i32 to index
    %2:2 = scf.for %arg5 = %c1 to %1 step %c1 iter_args(%arg6 = %cst_1, %arg7 = %cst_1) -> (f32, f32) {
      %3 = arith.subi %arg5, %c1 : index
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.addi %4, %c1_i32 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.index_cast %5 : i32 to index
      %8 = arith.index_cast %5 : i32 to index
      %9 = arith.index_cast %5 : i32 to index
      %10 = memref.load %arg2[%6] : memref<?xf32>
      %11 = memref.load %arg1[%7] : memref<?xf32>
      %12 = arith.extf %10 : f32 to f64
      %13 = arith.subf %cst_0, %12 : f64
      %14 = arith.mulf %12, %13 : f64
      %15 = arith.subf %11, %10 : f32
      %16 = arith.extf %15 : f32 to f64
      %17 = arith.mulf %14, %16 : f64
      %18 = arith.truncf %17 : f64 to f32
      memref.store %18, %arg0[%8] : memref<?xf32>
      %19 = memref.load %arg0[%9] : memref<?xf32>
      %20 = arith.extf %19 : f32 to f64
      %21 = arith.cmpf ugt, %20, %cst : f64
      %22 = scf.if %21 -> (f32) {
        %24 = memref.load %arg0[%9] : memref<?xf32>
        scf.yield %24 : f32
      } else {
        %24 = memref.load %arg0[%9] : memref<?xf32>
        %25 = arith.negf %24 : f32
        scf.yield %25 : f32
      }
      %23 = arith.addf %arg6, %22 : f32
      scf.yield %23, %23 : f32, f32
    }
    affine.store %2#1, %arg4[0] : memref<?xf32>
    return
  }
  func @bpnn_hidden_error(%arg0: memref<?xf32>, %arg1: i32, %arg2: memref<?xf32>, %arg3: i32, %arg4: memref<?xmemref<?xf32>>, %arg5: memref<?xf32>, %arg6: memref<?xf32>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %cst = arith.constant 0.000000e+00 : f64
    %cst_0 = arith.constant 1.000000e+00 : f64
    %c1_i32 = arith.constant 1 : i32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %0 = arith.addi %arg1, %c1_i32 : i32
    %1 = arith.index_cast %0 : i32 to index
    %2:2 = scf.for %arg7 = %c1 to %1 step %c1 iter_args(%arg8 = %cst_1, %arg9 = %cst_1) -> (f32, f32) {
      %3 = arith.subi %arg7, %c1 : index
      %4 = arith.index_cast %3 : index to i32
      %5 = arith.addi %4, %c1_i32 : i32
      %6 = arith.index_cast %5 : i32 to index
      %7 = arith.index_cast %5 : i32 to index
      %8 = arith.index_cast %5 : i32 to index
      %9 = arith.index_cast %5 : i32 to index
      %10 = memref.load %arg5[%6] : memref<?xf32>
      %11 = arith.addi %arg3, %c1_i32 : i32
      %12 = arith.index_cast %11 : i32 to index
      %13:2 = scf.for %arg10 = %c1 to %12 step %c1 iter_args(%arg11 = %cst_1, %arg12 = %cst_1) -> (f32, f32) {
        %25 = arith.subi %arg10, %c1 : index
        %26 = arith.index_cast %25 : index to i32
        %27 = arith.addi %26, %c1_i32 : i32
        %28 = arith.index_cast %27 : i32 to index
        %29 = memref.load %arg2[%28] : memref<?xf32>
        %30 = memref.load %arg4[%7] : memref<?xmemref<?xf32>>
        %31 = memref.load %30[%28] : memref<?xf32>
        %32 = arith.mulf %29, %31 : f32
        %33 = arith.addf %arg11, %32 : f32
        scf.yield %33, %33 : f32, f32
      }
      %14 = arith.extf %10 : f32 to f64
      %15 = arith.subf %cst_0, %14 : f64
      %16 = arith.mulf %14, %15 : f64
      %17 = arith.extf %13#1 : f32 to f64
      %18 = arith.mulf %16, %17 : f64
      %19 = arith.truncf %18 : f64 to f32
      memref.store %19, %arg0[%8] : memref<?xf32>
      %20 = memref.load %arg0[%9] : memref<?xf32>
      %21 = arith.extf %20 : f32 to f64
      %22 = arith.cmpf ugt, %21, %cst : f64
      %23 = scf.if %22 -> (f32) {
        %25 = memref.load %arg0[%9] : memref<?xf32>
        scf.yield %25 : f32
      } else {
        %25 = memref.load %arg0[%9] : memref<?xf32>
        %26 = arith.negf %25 : f32
        scf.yield %26 : f32
      }
      %24 = arith.addf %arg8, %23 : f32
      scf.yield %24, %24 : f32, f32
    }
    affine.store %2#1, %arg6[0] : memref<?xf32>
    return
  }
  func @bpnn_adjust_weights(%arg0: memref<?xf32>, %arg1: i32, %arg2: memref<?xf32>, %arg3: i32, %arg4: memref<?xmemref<?xf32>>, %arg5: memref<?xmemref<?xf32>>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 3.000000e-01 : f64
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 1.000000e+00 : f32
    affine.store %cst_0, %arg2[0] : memref<?xf32>
    %0 = arith.addi %arg1, %c1_i32 : i32
    %1 = arith.index_cast %0 : i32 to index
    scf.for %arg6 = %c1 to %1 step %c1 {
      %2 = arith.subi %arg6, %c1 : index
      %3 = arith.index_cast %2 : index to i32
      %4 = arith.addi %3, %c1_i32 : i32
      %5 = arith.index_cast %4 : i32 to index
      %6 = arith.index_cast %4 : i32 to index
      %7 = arith.index_cast %4 : i32 to index
      %8 = arith.addi %arg3, %c1_i32 : i32
      %9 = arith.index_cast %8 : i32 to index
      scf.for %arg7 = %c0 to %9 step %c1 {
        %10 = memref.load %arg0[%5] : memref<?xf32>
        %11 = arith.extf %10 : f32 to f64
        %12 = arith.mulf %cst, %11 : f64
        %13 = memref.load %arg2[%arg7] : memref<?xf32>
        %14 = arith.extf %13 : f32 to f64
        %15 = arith.mulf %12, %14 : f64
        %16 = memref.load %arg5[%arg7] : memref<?xmemref<?xf32>>
        %17 = memref.load %16[%5] : memref<?xf32>
        %18 = arith.extf %17 : f32 to f64
        %19 = arith.mulf %cst, %18 : f64
        %20 = arith.addf %15, %19 : f64
        %21 = arith.truncf %20 : f64 to f32
        %22 = memref.load %arg4[%arg7] : memref<?xmemref<?xf32>>
        %23 = memref.load %22[%6] : memref<?xf32>
        %24 = arith.addf %23, %21 : f32
        memref.store %24, %22[%6] : memref<?xf32>
        %25 = memref.load %arg5[%arg7] : memref<?xmemref<?xf32>>
        memref.store %21, %25[%7] : memref<?xf32>
      }
    }
    return
  }
  func @bpnn_feedforward(%arg0: !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c10_i32 = arith.constant 10 : i32
    %c5_i32 = arith.constant 5 : i32
    %c9_i32 = arith.constant 9 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = llvm.getelementptr %arg0[%c0_i32, %c0_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %1 = llvm.load %0 : !llvm.ptr<i32>
    %2 = llvm.getelementptr %arg0[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %3 = llvm.load %2 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %arg0[%c0_i32, %c2_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    %6 = llvm.getelementptr %arg0[%c0_i32, %c3_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %7 = llvm.load %6 : !llvm.ptr<memref<?xf32>>
    %8 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %9 = llvm.load %8 : !llvm.ptr<memref<?xf32>>
    %10 = llvm.getelementptr %arg0[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %11 = llvm.load %10 : !llvm.ptr<memref<?xmemref<?xf32>>>
    call @bpnn_layerforward(%7, %9, %11, %1, %3) : (memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, i32, i32) -> ()
    %12 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %13 = llvm.load %12 : !llvm.ptr<memref<?xf32>>
    %14 = llvm.getelementptr %arg0[%c0_i32, %c5_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %15 = llvm.load %14 : !llvm.ptr<memref<?xf32>>
    %16 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %17 = llvm.load %16 : !llvm.ptr<memref<?xmemref<?xf32>>>
    call @bpnn_layerforward(%13, %15, %17, %3, %5) : (memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, i32, i32) -> ()
    return
  }
  func @bpnn_train(%arg0: !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, %arg1: memref<?xf32>, %arg2: memref<?xf32>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c11_i32 = arith.constant 11 : i32
    %c12_i32 = arith.constant 12 : i32
    %c6_i32 = arith.constant 6 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %c10_i32 = arith.constant 10 : i32
    %c5_i32 = arith.constant 5 : i32
    %c9_i32 = arith.constant 9 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = memref.alloca() : memref<1xf32>
    %1 = memref.alloca() : memref<1xf32>
    %2 = llvm.getelementptr %arg0[%c0_i32, %c0_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %3 = llvm.load %2 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %arg0[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    %6 = llvm.getelementptr %arg0[%c0_i32, %c2_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %7 = llvm.load %6 : !llvm.ptr<i32>
    %8 = llvm.getelementptr %arg0[%c0_i32, %c3_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %9 = llvm.load %8 : !llvm.ptr<memref<?xf32>>
    %10 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %11 = llvm.load %10 : !llvm.ptr<memref<?xf32>>
    %12 = llvm.getelementptr %arg0[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %13 = llvm.load %12 : !llvm.ptr<memref<?xmemref<?xf32>>>
    call @bpnn_layerforward(%9, %11, %13, %3, %5) : (memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, i32, i32) -> ()
    %14 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %15 = llvm.load %14 : !llvm.ptr<memref<?xf32>>
    %16 = llvm.getelementptr %arg0[%c0_i32, %c5_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %17 = llvm.load %16 : !llvm.ptr<memref<?xf32>>
    %18 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %19 = llvm.load %18 : !llvm.ptr<memref<?xmemref<?xf32>>>
    call @bpnn_layerforward(%15, %17, %19, %5, %7) : (memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, i32, i32) -> ()
    %20 = llvm.getelementptr %arg0[%c0_i32, %c7_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %21 = llvm.load %20 : !llvm.ptr<memref<?xf32>>
    %22 = llvm.getelementptr %arg0[%c0_i32, %c8_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %23 = llvm.load %22 : !llvm.ptr<memref<?xf32>>
    %24 = llvm.getelementptr %arg0[%c0_i32, %c5_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %25 = llvm.load %24 : !llvm.ptr<memref<?xf32>>
    %26 = memref.cast %1 : memref<1xf32> to memref<?xf32>
    call @bpnn_output_error(%21, %23, %25, %7, %26) : (memref<?xf32>, memref<?xf32>, memref<?xf32>, i32, memref<?xf32>) -> ()
    %27 = llvm.getelementptr %arg0[%c0_i32, %c6_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %28 = llvm.load %27 : !llvm.ptr<memref<?xf32>>
    %29 = llvm.getelementptr %arg0[%c0_i32, %c7_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %30 = llvm.load %29 : !llvm.ptr<memref<?xf32>>
    %31 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %32 = llvm.load %31 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %33 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %34 = llvm.load %33 : !llvm.ptr<memref<?xf32>>
    %35 = memref.cast %0 : memref<1xf32> to memref<?xf32>
    call @bpnn_hidden_error(%28, %5, %30, %7, %32, %34, %35) : (memref<?xf32>, i32, memref<?xf32>, i32, memref<?xmemref<?xf32>>, memref<?xf32>, memref<?xf32>) -> ()
    %36 = affine.load %1[0] : memref<1xf32>
    affine.store %36, %arg1[0] : memref<?xf32>
    %37 = affine.load %0[0] : memref<1xf32>
    affine.store %37, %arg2[0] : memref<?xf32>
    %38 = llvm.getelementptr %arg0[%c0_i32, %c7_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %39 = llvm.load %38 : !llvm.ptr<memref<?xf32>>
    %40 = llvm.getelementptr %arg0[%c0_i32, %c4_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %41 = llvm.load %40 : !llvm.ptr<memref<?xf32>>
    %42 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %43 = llvm.load %42 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %44 = llvm.getelementptr %arg0[%c0_i32, %c12_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %45 = llvm.load %44 : !llvm.ptr<memref<?xmemref<?xf32>>>
    call @bpnn_adjust_weights(%39, %7, %41, %5, %43, %45) : (memref<?xf32>, i32, memref<?xf32>, i32, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>) -> ()
    %46 = llvm.getelementptr %arg0[%c0_i32, %c6_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %47 = llvm.load %46 : !llvm.ptr<memref<?xf32>>
    %48 = llvm.getelementptr %arg0[%c0_i32, %c3_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xf32>>
    %49 = llvm.load %48 : !llvm.ptr<memref<?xf32>>
    %50 = llvm.getelementptr %arg0[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %51 = llvm.load %50 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %52 = llvm.getelementptr %arg0[%c0_i32, %c11_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %53 = llvm.load %52 : !llvm.ptr<memref<?xmemref<?xf32>>>
    call @bpnn_adjust_weights(%47, %5, %49, %3, %51, %53) : (memref<?xf32>, i32, memref<?xf32>, i32, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>) -> ()
    return
  }
  func @bpnn_save(%arg0: !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, %arg1: !llvm.ptr<i8>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c10_i32 = arith.constant 10 : i32
    %c4_i64 = arith.constant 4 : i64
    %c9_i32 = arith.constant 9 : i32
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.mlir.undef : i32
    %1 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
    %2 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
    %3 = llvm.alloca %c1_i64 x !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>> : (i64) -> !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
    %4 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
    %5 = memref.alloca() : memref<1xi32>
    affine.store %0, %5[0] : memref<1xi32>
    %6 = memref.alloca() : memref<1xi32>
    affine.store %0, %6[0] : memref<1xi32>
    %7 = memref.alloca() : memref<1xi32>
    affine.store %0, %7[0] : memref<1xi32>
    %8 = llvm.load %3 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
    %9 = llvm.mlir.addressof @str4 : !llvm.ptr<array<3 x i8>>
    %10 = llvm.getelementptr %9[%c0_i32, %c0_i32] : (!llvm.ptr<array<3 x i8>>, i32, i32) -> !llvm.ptr<i8>
    %11 = llvm.call @fopen(%arg1, %10) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>
    llvm.store %11, %3 : !llvm.ptr<ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>>
    %12 = llvm.getelementptr %arg0[%c0_i32, %c0_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %13 = llvm.load %12 : !llvm.ptr<i32>
    affine.store %13, %7[0] : memref<1xi32>
    %14 = llvm.getelementptr %arg0[%c0_i32, %c1_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %15 = llvm.load %14 : !llvm.ptr<i32>
    affine.store %15, %6[0] : memref<1xi32>
    %16 = llvm.getelementptr %arg0[%c0_i32, %c2_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<i32>
    %17 = llvm.load %16 : !llvm.ptr<i32>
    affine.store %17, %5[0] : memref<1xi32>
    %18 = llvm.mlir.addressof @str5 : !llvm.ptr<array<33 x i8>>
    %19 = llvm.getelementptr %18[%c0_i32, %c0_i32] : (!llvm.ptr<array<33 x i8>>, i32, i32) -> !llvm.ptr<i8>
    %20 = affine.load %7[0] : memref<1xi32>
    %21 = affine.load %6[0] : memref<1xi32>
    %22 = affine.load %5[0] : memref<1xi32>
    %23 = llvm.call @printf(%19, %20, %21, %22, %arg1) : (!llvm.ptr<i8>, i32, i32, i32, !llvm.ptr<i8>) -> i32
    %24 = "polygeist.memref2pointer"(%7) : (memref<1xi32>) -> !llvm.ptr<i8>
    %25 = llvm.call @fwrite(%24, %c1_i64, %c1_i64, %11) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
    %26 = "polygeist.memref2pointer"(%6) : (memref<1xi32>) -> !llvm.ptr<i8>
    %27 = llvm.call @fwrite(%26, %c1_i64, %c1_i64, %11) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
    %28 = "polygeist.memref2pointer"(%5) : (memref<1xi32>) -> !llvm.ptr<i8>
    %29 = llvm.call @fwrite(%28, %c1_i64, %c1_i64, %11) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
    %30 = llvm.getelementptr %arg0[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %31 = llvm.load %30 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %32 = llvm.load %4 : !llvm.ptr<ptr<i8>>
    %33 = affine.load %7[0] : memref<1xi32>
    %34 = arith.addi %33, %c1_i32 : i32
    %35 = affine.load %6[0] : memref<1xi32>
    %36 = arith.addi %35, %c1_i32 : i32
    %37 = arith.muli %34, %36 : i32
    %38 = arith.extui %37 : i32 to i64
    %39 = arith.muli %38, %c4_i64 : i64
    %40 = arith.trunci %39 : i64 to i32
    %41 = arith.extui %40 : i32 to i64
    %42 = llvm.call @malloc(%41) : (i64) -> !llvm.ptr<i8>
    %43 = llvm.bitcast %42 : !llvm.ptr<i8> to !llvm.ptr<i8>
    llvm.store %43, %4 : !llvm.ptr<ptr<i8>>
    %44:2 = scf.while (%arg2 = %c0_i32, %arg3 = %c0_i32) : (i32, i32) -> (i32, i32) {
      %84 = affine.load %7[0] : memref<1xi32>
      %85 = arith.cmpi sle, %arg2, %84 : i32
      scf.condition(%85) %arg2, %arg3 : i32, i32
    } do {
    ^bb0(%arg2: i32, %arg3: i32):  // no predecessors
      %84:2 = scf.while (%arg4 = %c0_i32, %arg5 = %arg3) : (i32, i32) -> (i32, i32) {
        %86 = affine.load %6[0] : memref<1xi32>
        %87 = arith.cmpi sle, %arg4, %86 : i32
        scf.condition(%87) %arg5, %arg4 : i32, i32
      } do {
      ^bb0(%arg4: i32, %arg5: i32):  // no predecessors
        %86 = arith.index_cast %arg4 : i32 to index
        %87 = arith.index_cast %86 : index to i64
        %88 = llvm.getelementptr %43[%87] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
        %89 = scf.for %arg6 = %c0 to %c4 step %c1 iter_args(%arg7 = %88) -> (!llvm.ptr<i8>) {
          %92 = llvm.getelementptr %arg7[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
          %93 = llvm.load %2 : !llvm.ptr<ptr<i8>>
          %94 = llvm.getelementptr %93[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
          llvm.store %94, %2 : !llvm.ptr<ptr<i8>>
          %95 = llvm.load %93 : !llvm.ptr<i8>
          llvm.store %95, %arg7 : !llvm.ptr<i8>
          scf.yield %92 : !llvm.ptr<i8>
        }
        %90 = arith.addi %arg4, %c4_i64 : i32
        %91 = arith.addi %arg5, %c1_i32 : i32
        scf.yield %91, %90 : i32, i32
      }
      %85 = arith.addi %arg2, %c1_i32 : i32
      scf.yield %85, %84#0 : i32, i32
    }
    %45 = llvm.bitcast %43 : !llvm.ptr<i8> to !llvm.ptr<i8>
    %46 = affine.load %7[0] : memref<1xi32>
    %47 = arith.addi %46, %c1_i32 : i32
    %48 = affine.load %6[0] : memref<1xi32>
    %49 = arith.addi %48, %c1_i32 : i32
    %50 = arith.muli %47, %49 : i32
    %51 = arith.extui %50 : i32 to i64
    %52 = arith.muli %51, %c4_i64 : i64
    %53 = arith.trunci %52 : i64 to i32
    %54 = arith.extui %53 : i32 to i64
    %55 = llvm.call @fwrite(%45, %c4_i64, %54, %11) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
    %56 = llvm.bitcast %43 : !llvm.ptr<i8> to !llvm.ptr<i8>
    llvm.call @free(%56) : (!llvm.ptr<i8>) -> ()
    %57 = llvm.getelementptr %arg0[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
    %58 = llvm.load %57 : !llvm.ptr<memref<?xmemref<?xf32>>>
    %59 = affine.load %6[0] : memref<1xi32>
    %60 = arith.addi %59, %c1_i32 : i32
    %61 = affine.load %5[0] : memref<1xi32>
    %62 = arith.addi %61, %c1_i32 : i32
    %63 = arith.muli %60, %62 : i32
    %64 = arith.extui %63 : i32 to i64
    %65 = arith.muli %64, %c4_i64 : i64
    %66 = arith.trunci %65 : i64 to i32
    %67 = arith.extui %66 : i32 to i64
    %68 = llvm.call @malloc(%67) : (i64) -> !llvm.ptr<i8>
    %69 = llvm.bitcast %68 : !llvm.ptr<i8> to !llvm.ptr<i8>
    llvm.store %69, %4 : !llvm.ptr<ptr<i8>>
    %70:2 = scf.while (%arg2 = %c0_i32, %arg3 = %c0_i32) : (i32, i32) -> (i32, i32) {
      %84 = affine.load %6[0] : memref<1xi32>
      %85 = arith.cmpi sle, %arg2, %84 : i32
      scf.condition(%85) %arg2, %arg3 : i32, i32
    } do {
    ^bb0(%arg2: i32, %arg3: i32):  // no predecessors
      %84:2 = scf.while (%arg4 = %c0_i32, %arg5 = %arg3) : (i32, i32) -> (i32, i32) {
        %86 = affine.load %5[0] : memref<1xi32>
        %87 = arith.cmpi sle, %arg4, %86 : i32
        scf.condition(%87) %arg5, %arg4 : i32, i32
      } do {
      ^bb0(%arg4: i32, %arg5: i32):  // no predecessors
        %86 = arith.index_cast %arg4 : i32 to index
        %87 = arith.index_cast %86 : index to i64
        %88 = llvm.getelementptr %69[%87] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
        %89 = scf.for %arg6 = %c0 to %c4 step %c1 iter_args(%arg7 = %88) -> (!llvm.ptr<i8>) {
          %92 = llvm.getelementptr %arg7[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
          %93 = llvm.load %1 : !llvm.ptr<ptr<i8>>
          %94 = llvm.getelementptr %93[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
          llvm.store %94, %1 : !llvm.ptr<ptr<i8>>
          %95 = llvm.load %93 : !llvm.ptr<i8>
          llvm.store %95, %arg7 : !llvm.ptr<i8>
          scf.yield %92 : !llvm.ptr<i8>
        }
        %90 = arith.addi %arg4, %c4_i64 : i32
        %91 = arith.addi %arg5, %c1_i32 : i32
        scf.yield %91, %90 : i32, i32
      }
      %85 = arith.addi %arg2, %c1_i32 : i32
      scf.yield %85, %84#0 : i32, i32
    }
    %71 = llvm.bitcast %69 : !llvm.ptr<i8> to !llvm.ptr<i8>
    %72 = affine.load %6[0] : memref<1xi32>
    %73 = arith.addi %72, %c1_i32 : i32
    %74 = affine.load %5[0] : memref<1xi32>
    %75 = arith.addi %74, %c1_i32 : i32
    %76 = arith.muli %73, %75 : i32
    %77 = arith.extui %76 : i32 to i64
    %78 = arith.muli %77, %c4_i64 : i64
    %79 = arith.trunci %78 : i64 to i32
    %80 = arith.extui %79 : i32 to i64
    %81 = llvm.call @fwrite(%71, %c4_i64, %80, %11) : (!llvm.ptr<i8>, i64, i64, !llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i64
    %82 = llvm.bitcast %69 : !llvm.ptr<i8> to !llvm.ptr<i8>
    llvm.call @free(%82) : (!llvm.ptr<i8>) -> ()
    %83 = llvm.call @fclose(%11) : (!llvm.ptr<struct<(i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE", (i32, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, ptr<struct<"struct._IO_marker", (ptr<struct<"struct._IO_marker">>, ptr<struct<"struct._IO_FILE">>, i32, array<4 x i8>)>>, ptr<struct<"struct._IO_FILE">>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>, i32, i32, i64, i16, i8, array<1 x i8>, ptr<i8>, i64, ptr<i8>, ptr<i8>, ptr<i8>, ptr<i8>, i64, i32, array<20 x i8>)>>) -> i32
    return
  }
  func @bpnn_read(%arg0: !llvm.ptr<i8>) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c12_i32 = arith.constant 12 : i32
    %c11_i32 = arith.constant 11 : i32
    %c10_i32 = arith.constant 10 : i32
    %c9_i32 = arith.constant 9 : i32
    %c1_i32 = arith.constant 1 : i32
    %c4_i64 = arith.constant 4 : i64
    %c-1_i32 = arith.constant -1 : i32
    %c420_i32 = arith.constant 420 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i64 = arith.constant 1 : i64
    %0 = llvm.mlir.undef : i32
    %1 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
    %2 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
    %3 = memref.alloca() : memref<1xi32>
    affine.store %0, %3[0] : memref<1xi32>
    %4 = memref.alloca() : memref<1xi32>
    affine.store %0, %4[0] : memref<1xi32>
    %5 = memref.alloca() : memref<1xi32>
    affine.store %0, %5[0] : memref<1xi32>
    %6 = memref.alloca() : memref<1xi32>
    affine.store %0, %6[0] : memref<1xi32>
    %7 = llvm.alloca %c1_i64 x !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>> : (i64) -> !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %8 = llvm.alloca %c1_i64 x !llvm.ptr<i8> : (i64) -> !llvm.ptr<ptr<i8>>
    %9 = memref.alloca() : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %10 = affine.load %9[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %11 = llvm.call @open(%arg0, %c0_i32, %c420_i32) : (!llvm.ptr<i8>, i32, i32) -> i32
    %12 = arith.cmpi eq, %11, %c-1_i32 : i32
    %13 = arith.cmpi ne, %11, %c-1_i32 : i32
    %14 = scf.if %12 -> (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) {
      %21 = llvm.mlir.null : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
      affine.store %21, %9[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      scf.yield %21 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    } else {
      scf.yield %10 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    }
    scf.if %13 {
      %21 = llvm.mlir.addressof @str6 : !llvm.ptr<array<14 x i8>>
      %22 = llvm.getelementptr %21[%c0_i32, %c0_i32] : (!llvm.ptr<array<14 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %23 = llvm.call @printf(%22, %arg0) : (!llvm.ptr<i8>, !llvm.ptr<i8>) -> i32
      %24 = "polygeist.memref2pointer"(%6) : (memref<1xi32>) -> !llvm.ptr<i8>
      %25 = llvm.call @read(%11, %24, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      %26 = "polygeist.memref2pointer"(%5) : (memref<1xi32>) -> !llvm.ptr<i8>
      %27 = llvm.call @read(%11, %26, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
      %28 = "polygeist.memref2pointer"(%4) : (memref<1xi32>) -> !llvm.ptr<i8>
      %29 = llvm.call @read(%11, %28, %c4_i64) : (i32, !llvm.ptr<i8>, i64) -> i64
    }
    %15 = llvm.load %7 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
    %16 = scf.if %13 -> (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) {
      %21 = affine.load %6[0] : memref<1xi32>
      %22 = affine.load %5[0] : memref<1xi32>
      %23 = affine.load %4[0] : memref<1xi32>
      %24 = call @bpnn_internal_create(%21, %22, %23) : (i32, i32, i32) -> !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
      llvm.store %24, %7 : !llvm.ptr<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      %25 = llvm.mlir.addressof @str7 : !llvm.ptr<array<34 x i8>>
      %26 = llvm.getelementptr %25[%c0_i32, %c0_i32] : (!llvm.ptr<array<34 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %27 = affine.load %6[0] : memref<1xi32>
      %28 = affine.load %5[0] : memref<1xi32>
      %29 = affine.load %4[0] : memref<1xi32>
      %30 = llvm.call @printf(%26, %arg0, %27, %28, %29) : (!llvm.ptr<i8>, !llvm.ptr<i8>, i32, i32, i32) -> i32
      %31 = llvm.mlir.addressof @str8 : !llvm.ptr<array<25 x i8>>
      %32 = llvm.getelementptr %31[%c0_i32, %c0_i32] : (!llvm.ptr<array<25 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %33 = llvm.call @printf(%32) : (!llvm.ptr<i8>) -> i32
      affine.store %c0_i32, %3[0] : memref<1xi32>
      scf.yield %24 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    } else {
      scf.yield %15 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    }
    %17 = llvm.load %8 : !llvm.ptr<ptr<i8>>
    %18 = scf.if %13 -> (!llvm.ptr<i8>) {
      %21 = affine.load %6[0] : memref<1xi32>
      %22 = arith.addi %21, %c1_i32 : i32
      %23 = affine.load %5[0] : memref<1xi32>
      %24 = arith.addi %23, %c1_i32 : i32
      %25 = arith.muli %22, %24 : i32
      %26 = arith.extui %25 : i32 to i64
      %27 = arith.muli %26, %c4_i64 : i64
      %28 = arith.trunci %27 : i64 to i32
      %29 = arith.extui %28 : i32 to i64
      %30 = llvm.call @malloc(%29) : (i64) -> !llvm.ptr<i8>
      %31 = llvm.bitcast %30 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %31, %8 : !llvm.ptr<ptr<i8>>
      scf.yield %31 : !llvm.ptr<i8>
    } else {
      scf.yield %17 : !llvm.ptr<i8>
    }
    %19 = scf.if %13 -> (!llvm.ptr<i8>) {
      %21 = llvm.bitcast %18 : !llvm.ptr<i8> to !llvm.ptr<i8>
      %22 = affine.load %6[0] : memref<1xi32>
      %23 = arith.addi %22, %c1_i32 : i32
      %24 = affine.load %5[0] : memref<1xi32>
      %25 = arith.addi %24, %c1_i32 : i32
      %26 = arith.muli %23, %25 : i32
      %27 = arith.extui %26 : i32 to i64
      %28 = arith.muli %27, %c4_i64 : i64
      %29 = llvm.call @read(%11, %21, %28) : (i32, !llvm.ptr<i8>, i64) -> i64
      %30 = scf.while (%arg1 = %c0_i32) : (i32) -> i32 {
        %46 = affine.load %6[0] : memref<1xi32>
        %47 = arith.cmpi sle, %arg1, %46 : i32
        scf.condition(%47) %arg1 : i32
      } do {
      ^bb0(%arg1: i32):  // no predecessors
        %46 = scf.while (%arg2 = %c0_i32) : (i32) -> i32 {
          %48 = affine.load %5[0] : memref<1xi32>
          %49 = arith.cmpi sle, %arg2, %48 : i32
          scf.condition(%49) %arg2 : i32
        } do {
        ^bb0(%arg2: i32):  // no predecessors
          %48 = llvm.getelementptr %16[%c0_i32, %c9_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
          %49 = llvm.load %48 : !llvm.ptr<memref<?xmemref<?xf32>>>
          %50 = affine.load %3[0] : memref<1xi32>
          %51 = arith.index_cast %50 : i32 to index
          %52 = arith.index_cast %51 : index to i64
          %53 = llvm.getelementptr %18[%52] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
          %54 = scf.for %arg3 = %c0 to %c4 step %c1 iter_args(%arg4 = %53) -> (!llvm.ptr<i8>) {
            %57 = llvm.load %2 : !llvm.ptr<ptr<i8>>
            %58 = llvm.getelementptr %57[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
            llvm.store %58, %2 : !llvm.ptr<ptr<i8>>
            %59 = llvm.getelementptr %arg4[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
            %60 = llvm.load %arg4 : !llvm.ptr<i8>
            llvm.store %60, %57 : !llvm.ptr<i8>
            scf.yield %59 : !llvm.ptr<i8>
          }
          %55 = arith.addi %50, %c4_i64 : i32
          affine.store %55, %3[0] : memref<1xi32>
          %56 = arith.addi %arg2, %c1_i32 : i32
          scf.yield %56 : i32
        }
        %47 = arith.addi %arg1, %c1_i32 : i32
        scf.yield %47 : i32
      }
      %31 = llvm.bitcast %18 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.call @free(%31) : (!llvm.ptr<i8>) -> ()
      %32 = llvm.mlir.addressof @str9 : !llvm.ptr<array<31 x i8>>
      %33 = llvm.getelementptr %32[%c0_i32, %c0_i32] : (!llvm.ptr<array<31 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %34 = llvm.call @printf(%33) : (!llvm.ptr<i8>) -> i32
      affine.store %c0_i32, %3[0] : memref<1xi32>
      %35 = affine.load %5[0] : memref<1xi32>
      %36 = arith.addi %35, %c1_i32 : i32
      %37 = affine.load %4[0] : memref<1xi32>
      %38 = arith.addi %37, %c1_i32 : i32
      %39 = arith.muli %36, %38 : i32
      %40 = arith.extui %39 : i32 to i64
      %41 = arith.muli %40, %c4_i64 : i64
      %42 = arith.trunci %41 : i64 to i32
      %43 = arith.extui %42 : i32 to i64
      %44 = llvm.call @malloc(%43) : (i64) -> !llvm.ptr<i8>
      %45 = llvm.bitcast %44 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.store %45, %8 : !llvm.ptr<ptr<i8>>
      scf.yield %45 : !llvm.ptr<i8>
    } else {
      scf.yield %18 : !llvm.ptr<i8>
    }
    %20 = scf.if %13 -> (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>) {
      %21 = llvm.bitcast %19 : !llvm.ptr<i8> to !llvm.ptr<i8>
      %22 = affine.load %5[0] : memref<1xi32>
      %23 = arith.addi %22, %c1_i32 : i32
      %24 = affine.load %4[0] : memref<1xi32>
      %25 = arith.addi %24, %c1_i32 : i32
      %26 = arith.muli %23, %25 : i32
      %27 = arith.extui %26 : i32 to i64
      %28 = arith.muli %27, %c4_i64 : i64
      %29 = llvm.call @read(%11, %21, %28) : (i32, !llvm.ptr<i8>, i64) -> i64
      %30 = scf.while (%arg1 = %c0_i32) : (i32) -> i32 {
        %46 = affine.load %5[0] : memref<1xi32>
        %47 = arith.cmpi sle, %arg1, %46 : i32
        scf.condition(%47) %arg1 : i32
      } do {
      ^bb0(%arg1: i32):  // no predecessors
        %46 = scf.while (%arg2 = %c0_i32) : (i32) -> i32 {
          %48 = affine.load %4[0] : memref<1xi32>
          %49 = arith.cmpi sle, %arg2, %48 : i32
          scf.condition(%49) %arg2 : i32
        } do {
        ^bb0(%arg2: i32):  // no predecessors
          %48 = llvm.getelementptr %16[%c0_i32, %c10_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
          %49 = llvm.load %48 : !llvm.ptr<memref<?xmemref<?xf32>>>
          %50 = affine.load %3[0] : memref<1xi32>
          %51 = arith.index_cast %50 : i32 to index
          %52 = arith.index_cast %51 : index to i64
          %53 = llvm.getelementptr %19[%52] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
          %54 = scf.for %arg3 = %c0 to %c4 step %c1 iter_args(%arg4 = %53) -> (!llvm.ptr<i8>) {
            %57 = llvm.load %1 : !llvm.ptr<ptr<i8>>
            %58 = llvm.getelementptr %57[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
            llvm.store %58, %1 : !llvm.ptr<ptr<i8>>
            %59 = llvm.getelementptr %arg4[%c1_i64] : (!llvm.ptr<i8>, i64) -> !llvm.ptr<i8>
            %60 = llvm.load %arg4 : !llvm.ptr<i8>
            llvm.store %60, %57 : !llvm.ptr<i8>
            scf.yield %59 : !llvm.ptr<i8>
          }
          %55 = arith.addi %50, %c4_i64 : i32
          affine.store %55, %3[0] : memref<1xi32>
          %56 = arith.addi %arg2, %c1_i32 : i32
          scf.yield %56 : i32
        }
        %47 = arith.addi %arg1, %c1_i32 : i32
        scf.yield %47 : i32
      }
      %31 = llvm.bitcast %19 : !llvm.ptr<i8> to !llvm.ptr<i8>
      llvm.call @free(%31) : (!llvm.ptr<i8>) -> ()
      %32 = llvm.call @close(%11) : (i32) -> i32
      %33 = llvm.mlir.addressof @str10 : !llvm.ptr<array<6 x i8>>
      %34 = llvm.getelementptr %33[%c0_i32, %c0_i32] : (!llvm.ptr<array<6 x i8>>, i32, i32) -> !llvm.ptr<i8>
      %35 = llvm.call @printf(%34) : (!llvm.ptr<i8>) -> i32
      %36 = llvm.getelementptr %16[%c0_i32, %c11_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %37 = llvm.load %36 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %38 = affine.load %6[0] : memref<1xi32>
      %39 = affine.load %5[0] : memref<1xi32>
      %40 = call @bpnn_zero_weights(%37, %38, %39) : (memref<?xmemref<?xf32>>, i32, i32) -> i32
      %41 = llvm.getelementptr %16[%c0_i32, %c12_i32] : (!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>, i32, i32) -> !llvm.ptr<memref<?xmemref<?xf32>>>
      %42 = llvm.load %41 : !llvm.ptr<memref<?xmemref<?xf32>>>
      %43 = affine.load %5[0] : memref<1xi32>
      %44 = affine.load %4[0] : memref<1xi32>
      %45 = call @bpnn_zero_weights(%42, %43, %44) : (memref<?xmemref<?xf32>>, i32, i32) -> i32
      affine.store %16, %9[] : memref<!llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>>
      scf.yield %16 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    } else {
      scf.yield %14 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
    }
    return %20 : !llvm.ptr<!llvm.struct<(i32, i32, i32, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xf32>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>, memref<?xmemref<?xf32>>)>>
  }
}
